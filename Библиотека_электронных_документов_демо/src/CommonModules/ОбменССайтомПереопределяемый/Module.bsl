////////////////////////////////////////////////////////////////////////////////
// ОбменССайтомПереопределяемый: механизм обмена с сайтом
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ФормаУзлаОбмена

// Определяет имя формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  ВыбраннаяФорма - Форма - форма для узла плана обмена.
//
Процедура ПереопределитьФормуУзла(ВыбраннаяФорма) Экспорт
	
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - Форма - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - ПланОбменаОбъект - узел плана обмена "ОбменССайтом".
//
Процедура ФормаУзлаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	// _Демо начало примера
	
	Если Не ЗначениеЗаполнено(Форма.СпособИдентификацииКонтрагентов) Тогда
		Форма.СпособИдентификацииКонтрагентов = Перечисления._ДемоСпособыИдентификацииКонтрагентов.Наименование;
	КонецЕсли;
	
	// _Демо конец примера
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - Форма - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ФормаУзлаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - Форма - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ - Булево - признак отказа от выполнения действия.
//  ТекущийОбъект - ПланОбменаОбъект - записываемый объект.
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//
Процедура ФормаУзлаПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт	
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - ПланОбменаОбъект - записываемый объект.
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//
Процедура ФормаУзлаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
КонецПроцедуры

// В данной процедуре можно изменить условное оформление формы узла обмена с сайтом.
//
// Параметры:
//  Форма  - УправляемаяФорма - форма узла обмена с сайтом.
//
Процедура УстановитьУсловноеОформлениеФормаУзлаОбмена(Форма) Экспорт
	
	// _Демо начало примера
	
	// Имя элементы формы, имя реквизита формы	
	ОбязательныеПоля = Новый Соответствие;
	ОбязательныеПоля.Вставить("НомерНаСайте","НомерЗаказаНаСайте");
	ОбязательныеПоля.Вставить("ДатаНаСайте","ДатаЗаказаНаСайте");
	ОбязательныеПоля.Вставить("Организация","Организация");
	ОбязательныеПоля.Вставить("ЭлементЕдиницаИзмерения","ЕдиницаИзмеренияНовойНоменклатуры");
	
	Для Каждого КлючЗначение Из ОбязательныеПоля Цикл
		
		// Отметка не заполненного пустого поля формы узла обмена.
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(КлючЗначение.Ключ);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(КлючЗначение.Значение);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
	КонецЦикла;
	
	// _Демо конец примера
	
КонецПроцедуры

// В данной процедуре можно изменить видимость элементов формы узла обмена с сайтом
//
// Параметры:
//  Форма  - УправляемаяФорма - форма узла обмена с сайтом.
//
Процедура УстановитьВидимостьЭлементовФормыУзла(Форма) Экспорт
	
	
	
КонецПроцедуры

// Корректирует проверяемые при записи реквизиты формы узла 
//
// Параметры:
//  Форма                 - УправляемаяФорма - форма плана узла обмена, в которой выполняется запись.
//  ПроверяемыеРеквизиты  - Массив - массив имен проверяемых на заполненность реквизитов формы.
//  ОбменТоварами         - Булево - признак того, что будет выполняться обмен товарами.
//  ОбменЗаказами         - Булево - признак того, что будет выполняться обмен заказами.
//
Процедура СкорректироватьПроверяемыеРеквизитыФормыУзла(Форма, ПроверяемыеРеквизиты, ОбменТоварами, ОбменЗаказами) Экспорт
	
	// _Демо начало примера
	
	РеквизитыОбменаЗаказами = _ДемоОбменССайтом.РеквизитыОбменаЗаказами();

	НеПроверяемыеРеквизиты = Новый Массив;
	Если Не ОбменЗаказами Тогда
		НепроверяемыеРеквизиты = _ДемоОбменССайтом.РеквизитыОбменаЗаказами();
	Иначе
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеРеквизиты, РеквизитыОбменаЗаказами);
		ПроверяемыеРеквизиты.Добавить("СоответствиеСтатусовЗаказов.СтатусЗаказаВБазе");
		ПроверяемыеРеквизиты.Добавить("СоответствиеСтатусовЗаказов.СтатусЗаказаНаСайте");
		
		НепроверяемыеРеквизиты.Добавить("ГруппаДляНовойНоменклатуры");
		НепроверяемыеРеквизиты.Добавить("ГруппаДляНовыхКонтрагентов");
		НепроверяемыеРеквизиты.Добавить("СоответствиеСтатусовЗаказов");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	// _Демо конец примера
	
КонецПроцедуры

// Обработчик события ПриИзменении флажка формы узла обмена.
//
// Параметры:
//  ЭлементИмя - Строка - наименование элемента формы.
//  Форма - УправляемаяФорма - Форма узла обмена.
//
Процедура ПолеВводаПриИзмененииНаСервере(ЭлементИмя, Форма) Экспорт
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода формы узла обмена.
//
// Параметры:
//  ЭлементИмя - Строка - наименование элемента формы.
//  Форма - УправляемаяФорма - Форма узла обмена.
//
Процедура ПолеФлажкаПриИзмененииНаСервере(ЭлементИмя, Форма) Экспорт
	

	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования табличной части формы узла обмена.
//
// Параметры:
//  ЭлементИмя - Строка - наименование элемента формы.
//  Форма - УправляемаяФорма - Форма узла обмена.
//  НоваяСтрока - Булево - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево - Истина, если произошла отмена редактирования.
//  Отказ - Булево - Признак отказа от записи объекта.
//
Процедура ТаблицаФормыПередОкончаниемРедактированияНаСервере(ЭлементИмя, НоваяСтрока, ОтменаРедактирования, Отказ, Форма) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаДанных

// Формирует текст запроса, который позволит получить таблицу значений, описанную 
// в макете "СхемаВыгрузкиОбновлениеПакетаПредложений" плана обмена "Обмен с сайтом".
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//
Процедура ПолучитьТекстЗапросаОбновлениеПакетаПредложений(ТекстЗапроса) Экспорт
	
	// _Демо начало примера
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	_ДемоЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	_ДемоЦеныНоменклатурыСрезПоследних.Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	|	_ДемоЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	_ДемоЦеныНоменклатурыСрезПоследних.ВидЦены КАК ТипЦены,
	|	_ДемоЦеныНоменклатурыСрезПоследних.Цена КАК ЦенаЗаЕдиницу,
	|	_ДемоТоварыНаСкладахОстатки.Склад КАК Склад,
	|	ЕСТЬNULL(_ДемоТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК ОстатокНаСкладе,
	|	_ДемоЦеныНоменклатурыСрезПоследних.ВидЦены.Валюта.Наименование КАК ТипЦеныВалютаКод,
	|	_ДемоЦеныНоменклатурыСрезПоследних.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	1 КАК ТипЦеныЕдиницаЦеныКоэффициент
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	НоменклатураВидНоменклатуры.*,
	|	Характеристика.*,
	|	ТипЦены.*,
	|	ЦенаЗаЕдиницу,
	|	Склад.*,
	|	ОстатокНаСкладе,
	|	ТипЦеныВалютаКод,
	|	ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ТипЦеныЕдиницаЦеныКоэффициент}
	|ИЗ
	|	РегистрСведений._ДемоЦеныНоменклатуры.СрезПоследних КАК _ДемоЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления._ДемоТоварыНаСкладах.Остатки КАК _ДемоТоварыНаСкладахОстатки
	|		ПО _ДемоЦеныНоменклатурыСрезПоследних.Номенклатура = _ДемоТоварыНаСкладахОстатки.Номенклатура
	|			И _ДемоЦеныНоменклатурыСрезПоследних.Характеристика = _ДемоТоварыНаСкладахОстатки.Характеристика
	|{ГДЕ
	|	_ДемоЦеныНоменклатурыСрезПоследних.Номенклатура.*,
	|	_ДемоЦеныНоменклатурыСрезПоследних.ВидЦены.* КАК ТипЦены,
	|	_ДемоТоварыНаСкладахОстатки.Склад.*,
	|	(ЕСТЬNULL(_ДемоТоварыНаСкладахОстатки.КоличествоОстаток, 0)) КАК ОстатокНаСкладе}";

	// _Демо конец примера

КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре
// ПолучитьТекстЗапросаОбновлениеПакетаПредложений или быть особенностью прикладного решения.
//
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ПараметрыКомпоновки - ПараметрыСхемыКомпоновкиДанных - параметры, которые могли появиться в тексте запроса
//                                                      в процедуре ПолучитьТекстЗапросаОбновлениеПакетаПредложений.
//
Процедура УстановитьПараметрыЗапросаОбновлениеПакетаПредложений(ПрикладныеПараметры, ПараметрыКомпоновки)  Экспорт
	
КонецПроцедуры

// Заполняет структуру полями, которые должны быть добавлены в отбор настройки каталога.
// Указанные поля будут добавлены к предопределенными полям, заданным в макете 
// "СхемаВыгрузкиОбновлениеПакетаПредложений" плана обмена "Обмен с сайтом".
// Параметры:
//  ПоляОтбора - Структура - сюда добавляются поля отбора.
//		* Ключ - Наименование поля отбора;
//		* Значение - Описание типа значения добавляемого поля.
//
Процедура ЗаполнитьПоляОтбораОбновленияПакетаПредложений(ПоляОтбора) Экспорт
	
КонецПроцедуры

// Формирует тексты запросов, которые позволяют получить таблицу значений,
// описанные в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом".
// Параметры:
//  ТекстыЗапросов - структура - тексты запросов;
//    * Цены - поле, в которое нужно поместить текст запроса для заполнения источника данных "Цены"
//					макета "СхемаВыгрузкиПакетПредложений" плана обмена "ОбменССайтом";
//    * Остатки - поле, в которое нужно поместить текст запроса для заполнения источника данных "Остатки"
//					макета "СхемаВыгрузкиПакетПредложений" плана обмена "ОбменССайтом".
//
Процедура ПолучитьТекстыЗапросовПакетаПредложений(ТекстыЗапросов) Экспорт
	
	// _Демо начало примера
	
	ТекстыЗапросов.Цены =
	"ВЫБРАТЬ
	|	_ДемоЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	_ДемоЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	_ДемоЦеныНоменклатурыСрезПоследних.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	_ДемоЦеныНоменклатурыСрезПоследних.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	_ДемоЦеныНоменклатурыСрезПоследних.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	_ДемоЦеныНоменклатурыСрезПоследних.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	_ДемоЦеныНоменклатурыСрезПоследних.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	_ДемоЦеныНоменклатурыСрезПоследних.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ЕдиницаИзмеренияПересчетКоэф,
	|	_ДемоЦеныНоменклатурыСрезПоследних.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияПересчетЕдиница,
	|	_ДемоЦеныНоменклатурыСрезПоследних.ВидЦены КАК ТипЦены,
	|	_ДемоЦеныНоменклатурыСрезПоследних.ВидЦены.Валюта КАК ТипЦеныВалюта,
	|	ИСТИНА КАК ТипЦеныЦенаВключаетНДС,
	|	_ДемоЦеныНоменклатурыСрезПоследних.ВидЦены.Наименование КАК ТипЦеныНаименование,
	|	_ДемоЦеныНоменклатурыСрезПоследних.ВидЦены.Валюта.Наименование КАК ТипЦеныВалютаКод,
	|	1 КАК ТипЦеныЕдиницаЦеныКоэффициент,
	|	_ДемоЦеныНоменклатурыСрезПоследних.Номенклатура.ЕдиницаИзмерения.Код КАК ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	_ДемоЦеныНоменклатурыСрезПоследних.Цена КАК ЦенаЗаЕдиницу,
	|	_ДемоЦеныНоменклатурыСрезПоследних.Номенклатура.ПометкаУдаления КАК НоменклатураПометкаУдаления
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Характеристика.*,
	|	НоменклатураНаименование,
	|	НоменклатураАртикул,
	|	ЕдиницаИзмерения.*,
	|	ЕдиницаИзмеренияКод,
	|	ЕдиницаИзмеренияНаименованиеПолное,
	|	ЕдиницаИзмеренияМеждународноеСокращение,
	|	ЕдиницаИзмеренияПересчетКоэф,
	|	ЕдиницаИзмеренияПересчетЕдиница,
	|	ТипЦены.*,
	|	ТипЦеныВалюта.*,
	|	ТипЦеныЦенаВключаетНДС,
	|	ТипЦеныНаименование,
	|	ТипЦеныВалютаКод,
	|	ТипЦеныЕдиницаЦеныКоэффициент,
	|	ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ЦенаЗаЕдиницу,
	|	НоменклатураПометкаУдаления}
	|ИЗ
	|	РегистрСведений._ДемоЦеныНоменклатуры.СрезПоследних(, {(Номенклатура = &Номенклатура
	|			    И ВидЦены = &ТипЦены) КАК Поле2}) КАК _ДемоЦеныНоменклатурыСрезПоследних
	|{ГДЕ
	|	_ДемоЦеныНоменклатурыСрезПоследних.Номенклатура.*,
	|	_ДемоЦеныНоменклатурыСрезПоследних.ВидЦены.* КАК ТипЦены}";
	
	ТекстыЗапросов.Остатки =
	"ВЫБРАТЬ
	|	_ДемоТоварыНаСкладахОстатки.Номенклатура,
	|	_ДемоТоварыНаСкладахОстатки.Характеристика,
	|	_ДемоТоварыНаСкладахОстатки.Склад,
	|	_ДемоТоварыНаСкладахОстатки.КоличествоОстаток КАК ОстатокНаСкладе,
	|	_ДемоТоварыНаСкладахОстатки.Склад.Наименование,
	|	_ДемоТоварыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Характеристика.*,
	|	Склад.*,
	|	СкладНаименование,
	|	ОстатокНаСкладе,
	|	ЕдиницаИзмерения.*}
	|ИЗ
	|	РегистрНакопления._ДемоТоварыНаСкладах.Остатки(, {(Номенклатура = &Номенклатура
	|			    И Склад = &Склад) КАК Поле2}) КАК _ДемоТоварыНаСкладахОстатки
	|ГДЕ
	|	_ДемоТоварыНаСкладахОстатки.КоличествоОстаток > 0
	|{ГДЕ
	|	_ДемоТоварыНаСкладахОстатки.Номенклатура.*,
	|	_ДемоТоварыНаСкладахОстатки.Склад.*,
	|	_ДемоТоварыНаСкладахОстатки.КоличествоОстаток КАК ОстатокНаСкладе}"
	
	// _Демо конец примера
	
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре
// ПолучитьТекстЗапросаПакетПредложений или быть особенностью прикладного решения.
// 
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ПараметрыСхемыКомпоновки - ПараметрыСхемыКомпоновки - параметры схемы компоновки текста запроса в процедуре
//                                                        ПолучитьТекстЗапросаПакетПредложений.
//
Процедура УстановитьПараметрыЗапросаПакетПредложений(ПрикладныеПараметры, ПараметрыСхемыКомпоновки) Экспорт
	
	// _Демо начало примера 
	
	// _Демо конец примера 
	
КонецПроцедуры

// Заполняет соответствие полями, которые должны быть добавлены в отбор настройки каталога.
// Указанные поля будут добавлены к предопределенными полям, заданным в макете 
// "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом".
// Поля в соответствии хранятся с привязкой к набору данных, к которому они относятся.
//
// Параметры:
//   ПоляОтбора - соответствие - сюда добавляются поля отбора.
//		* ИмяНабораДанных - Имя набора данных из макета "СхемаВыгрузкиПакетПредложений".
//		* Структура с полями данного набора.
//			* Ключ - Наименование поля отбора.
//			* Значение - Описание типа значения добавляемого поля.
//
Процедура ЗаполнитьПоляОтбораПакетаПредложений(ПоляОтбора) Экспорт
	
КонецПроцедуры

// Формирует тексты запросов, которые позволят получить таблицы значений, описанные в макете "СхемаВыгрузкиКаталог"
// плана обмена "Обмен с сайтом".
//
// Параметры:
//	ТекстыЗапросов - Структура - тексты запросов:
//    * Номенклатура - поле, в которое нужно поместить текст запроса для заполнения источника данных "Номенклатура"
//                     макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом".
//    * Свойства - поле, в которое нужно поместить текст запроса для заполнения источника данных "Свойства"
//                 макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом".
//    * Файлы - поле, в которое нужно поместить текст запроса для заполнения источника данных "Файлы"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом".
//    * Характеристики - поле, необязательное поле, поле в которое нужно поместить текст запроса для заполнения источника данных "Характеристики"
//                       макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом".
//
Процедура ПолучитьТекстыЗапросовКаталог(ТекстыЗапросов) Экспорт
	
	// _Демо начало примера
	
	ТекстыЗапросов.Номенклатура =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ПометкаУдаления КАК НоменклатураПометкаУдаления,
	|	ВЫБОР
	|		КОГДА &КлассифицироватьПоВидамНоменклатуры
	|			ТОГДА Номенклатура.ВидНоменклатуры
	|		ИНАЧЕ Номенклатура.Родитель
	|	КОНЕЦ КАК НоменклатураРодитель,
	|	Номенклатура.ЭтоГруппа КАК НоменклатураЭтоГруппа,
	|	Номенклатура.Код КАК НоменклатураКод,
	|	Номенклатура.Наименование КАК НоменклатураНаименование,
	|	Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	Номенклатура.Артикул КАК НоменклатураАртикул,
	|	""Товар"" КАК НоменклатураТипНоменклатуры,
	|	Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	|	Номенклатура.Комментарий КАК НоменклатураОписание,
	|	Номенклатура.ФайлКартинки КАК НоменклатураОсновноеИзображение,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ЕдиницаИзмеренияПересчетКоэф,
	|	Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияПересчетЕдиница,
	|	"""" КАК НоменклатураШтрихкод,
	|	&ПроизвольныйКонтрагент КАК НоменклатураПроизводитель,
	|	Номенклатура.СтавкаНДС КАК НоменклатураСтавкаНДСЗначение,
	|	НЕОПРЕДЕЛЕНО КАК НоменклатураФайлОписанияHTML
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	НоменклатураОсновноеИзображение.*,
	|	ЕдиницаИзмерения.*,
	|	НоменклатураПометкаУдаления,
	|	НоменклатураРодитель.*,
	|	НоменклатураЭтоГруппа,
	|	НоменклатураКод,
	|	НоменклатураНаименование,
	|	НоменклатураНаименованиеПолное,
	|	НоменклатураАртикул,
	|	НоменклатураТипНоменклатуры,
	|	НоменклатураВидНоменклатуры,
	|	НоменклатураОписание,
	|	ЕдиницаИзмеренияКод,
	|	ЕдиницаИзмеренияНаименованиеПолное,
	|	ЕдиницаИзмеренияМеждународноеСокращение,
	|	ЕдиницаИзмеренияПересчетКоэф,
	|	ЕдиницаИзмеренияПересчетЕдиница,
	|	НоменклатураШтрихкод,
	|	НоменклатураПроизводитель КАК НоменклатураПроизводитель,
	|	НоменклатураСтавкаНДСЗначение,
	|	НоменклатураФайлОписанияHTML}
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|{ГДЕ
	|	Номенклатура.Ссылка.* КАК Номенклатура}";

	Если ТекстыЗапросов.Свойство("Характеристики") Тогда
		
		ТекстыЗапросов.Характеристики = 
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	ХарактеристикиНоменклатуры.Наименование КАК ХарактеристикаНаименование,
		|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура
		|{ВЫБРАТЬ
		|	Характеристика.*,
		|	ХарактеристикаНаименование,
		|	Номенклатура.*}
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|{ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец.* КАК Номенклатура}";
	КонецЕсли;
	
	
	ТекстыЗапросов.Свойства =
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК СвойствоНоменклатуры,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК ЗначениеСвойства
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	СвойствоНоменклатуры.*,
	|	ЗначениеСвойства.*}
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|{ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка.* КАК Номенклатура,
	|	НоменклатураДополнительныеРеквизиты.Свойство.* КАК СвойствоНоменклатуры}";
	
	
	ТекстыЗапросов.Файлы =
	"ВЫБРАТЬ
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК Номенклатура,
	|	НоменклатураПрисоединенныеФайлы.Ссылка КАК НоменклатураФайл,
	|	ДвоичныеДанныеФайлов.ДвоичныеДанныеФайла КАК НоменклатураФайлДанныеФайла,
	|	"""" КАК НоменклатураФайлТом,
	|	""png"" КАК НоменклатураФайлРасширение,
	|	"""" КАК НоменклатураФайлПутьКФайлу,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВИнформационнойБазе) КАК НоменклатураФайлТипХраненияФайла,
	|	""Изображение_1"" КАК НоменклатураФайлОписание
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	НоменклатураФайл.*,
	|	НоменклатураФайлТом,
	|	НоменклатураФайлРасширение,
	|	НоменклатураФайлПутьКФайлу,
	|	НоменклатураФайлТипХраненияФайла.*,
	|	НоменклатураФайлОписание}
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДвоичныеДанныеФайлов КАК ДвоичныеДанныеФайлов
	|		ПО НоменклатураПрисоединенныеФайлы.Ссылка = ДвоичныеДанныеФайлов.Файл
	|{ГДЕ
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла.* КАК Номенклатура}";
	
	// _Демо конец примера

КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре 
// ПолучитьТекстыЗапросовКаталог или быть особенностью прикладного решения.
//
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ПараметрыКомпоновки - ПараметрСхемыКомпоновкиДанных - параметры схемы компоновки текста запроса в процедуре
//                                                        ПолучитьТекстыЗапросовКаталог.
//
Процедура УстановитьПараметрыЗапросаКаталог(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
	// _Демо начало примера

	_ДемоОбменССайтом.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ПроизвольныйКонтрагент", 
								  _ДемоОбменССайтом.ПроизвольныйКонтрагент());
								  
	_ДемоОбменССайтом.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "КлассифицироватьПоВидамНоменклатуры", 
								  ПрикладныеПараметры.КлассифицироватьПоВидамНоменклатуры);
								  
	// _Демо конец примера
КонецПроцедуры

// Заполняет соответствие полями, которые должны быть добавлены в отбор настройки каталога.
// Указанные поля будут добавлены к предопределенными полям, заданным в макете "СхемаВыгрузкиКаталог" 
// плана обмена "Обмен с сайтом". Поля в соответствии хранятся с привязкой к набору данных, к которому они относятся.
//
// Параметры:
//  ПоляОтбора - ТаблицаЗначений - таблица, в которую добавляются поля отбора:
//    * Наименование - Строка - имя поля.
//    * Синоним - Строка - пользовательское представление.
//    * ТипЗначения - ОписаниеТипов - тип значения поля.
//    * Отбор - Массив - содержит структуры отборов, необходимых при открытии формы выбора поля.
//
Процедура ЗаполнитьПоляОтбораКаталога(ПоляОтбора) Экспорт
	
КонецПроцедуры

// Позволяет внести изменения в компоновщик настроек СКД после загрузки в нее настроек при получении данных для выгрузки.
//
// Параметры:
//  КомпоновщикНастроек  - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек, в который можно внести изменения.
//  ИмяМакета  - Строка - имя макета выполняемой СКД которая выполняется.
//
Процедура КомпоновщикНастроекСхемыФормированияДанныхПослеЗагрузкиНастроек(КомпоновщикНастроек, ИмяМакета) Экспорт
	
	
КонецПроцедуры

// Формирует текст запроса, который позволит получить таблицу значений, описанную в макете "СхемаВыгрузкиЗаказов"
// плана обмена "Обмен с сайтом".
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//
Процедура ПолучитьТекстЗапросаЗаказы(ТекстЗапроса) Экспорт
	
	// _Демо начало примера
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Сведения.Объект КАК ЗаказПокупателя,
	|	Сведения.Значение КАК НомерЗаказаНаСайте,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаЗаказаНаСайте
	|ПОМЕСТИТЬ ВременнаяТаблицаЗаказов
	|ИЗ
	|	РегистрСведений._ДемоДополнительныеСведения КАК Сведения
	|ГДЕ
	|	Сведения.Свойство = &НомерНаСайте
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Сведения.Объект,
	|	"""",
	|	Сведения.Значение
	|ИЗ
	|	РегистрСведений._ДемоДополнительныеСведения КАК Сведения
	|ГДЕ
	|	Сведения.Свойство = &ДатаНаСайте
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ЗаказПокупателя КАК Заказ,
	|	МАКСИМУМ(Т.НомерЗаказаНаСайте) КАК НомерЗаказаНаСайте,
	|	МАКСИМУМ(Т.ДатаЗаказаНаСайте) КАК ДатаЗаказаНаСайте
	|ПОМЕСТИТЬ втЗаказыНаСайте
	|ИЗ
	|	ВременнаяТаблицаЗаказов КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Заказ,
	|	ЕСТЬNULL(втЗаказыНаСайте.НомерЗаказаНаСайте, """") КАК ЗаказНомерНаСайте,
	|	ЕСТЬNULL(втЗаказыНаСайте.ДатаЗаказаНаСайте, """") КАК ЗаказДатаНаСайте,
	|	9 КАК ЗаказКОплатеОстаток,
	|	11 КАК ЗаказКОтгрузкеОстаток,
	|	Товары.Ссылка.Дата КАК ЗаказДата,
	|	Товары.Ссылка.Номер КАК ЗаказНомер,
	|	Товары.Ссылка.Проведен КАК ЗаказПроведен,
	|	Товары.Ссылка.ПометкаУдаления КАК ЗаказПометкаУдаления,
	|	Товары.Ссылка.НомерПоДаннымПокупателя КАК ЗаказНомерОплаты,
	|	Товары.Ссылка.ДатаПоДаннымПокупателя КАК ЗаказДатаОплаты,
	|	Товары.Ссылка.НомерПоДаннымПокупателя КАК ЗаказНомерОтгрузки,
	|	Товары.Ссылка.ДатаПоДаннымПокупателя КАК ЗаказДатаОтгрузки,
	|	Товары.Ссылка.Валюта.Код КАК ЗаказВалютаКод,
	|	Товары.Ссылка.СуммаДокумента КАК ЗаказСуммаДокумента,
	|	""Облагается"" КАК ЗаказНалогообложениеНДС,
	|	ИСТИНА КАК ЗаказСуммаВключаетНДС,
	|	""Состояние"" КАК ЗаказСостояниеЗаказа,
	|	""Открыт"" КАК ЗаказСтатусЗаказа,
	|	ИСТИНА КАК ЗаказЗакрыт,
	|	""Комментарий"" КАК ЗаказКомментарий,
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	Товары.Ссылка.Контрагент КАК Контрагент,
	|	Товары.Ссылка.Контрагент.Наименование КАК КонтрагентНаименование,
	|	Товары.Ссылка.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	Товары.Ссылка.Контрагент.ЮрФизЛицо КАК КонтрагентЮрФизЛицо,
	|	Товары.Ссылка.Контрагент.ИНН КАК КонтрагентИНН,
	|	Товары.Ссылка.Контрагент.КПП КАК КонтрагентКПП,
	|	Товары.Ссылка.Контрагент.КодПоОКПО КАК КонтрагентКодПоОКПО,
	|	1 КАК ЗаказКурс,
	|	Товары.ЕдиницаИзмерения КАК ТоварыЕдиницаИзмерения,
	|	Товары.Количество КАК ТоварыКоличество,
	|	Товары.Номенклатура КАК ТоварыНоменклатура,
	|	Товары.Номенклатура.Артикул КАК ТоварыНоменклатураАртикул,
	|	5 КАК ТоварыПроцентСкидки,
	|	ВЫРАЗИТЬ(Товары.Сумма * 0.05 КАК ЧИСЛО(15, 2)) КАК ТоварыСуммаСкидки,
	|	Товары.Сумма КАК ТоварыСумма,
	|	Товары.Сумма КАК ТоварыВсего,
	|	Товары.Цена КАК ТоварыЦена,
	|	Товары.ЕдиницаИзмерения.Код КАК ТоварыЕдиницаИзмеренияКод,
	|	Товары.ЕдиницаИзмерения.Наименование КАК ТоварыЕдиницаИзмеренияНаименование,
	|	Товары.ЕдиницаИзмерения.НаименованиеПолное КАК ТоварыЕдиницаИзмеренияНаименованиеПолное,
	|	Товары.ЕдиницаИзмерения.МеждународноеСокращение КАК ТоварыЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ТоварыЕдиницаИзмеренияПересчетКоэффициент,
	|	Товары.ЕдиницаИзмерения.Код КАК ТоварыЕдиницаИзмеренияПересчетЕдиницаКод,
	|	Товары.Номенклатура.СтавкаНДС КАК ТоварыСтавкаНДС,
	|	""Товар"" КАК ТоварыТипНоменклатуры,
	|	Товары.Характеристика КАК ТоварыХарактеристика,
	|	ВЫРАЗИТЬ(Товары.Сумма * 0.18 КАК ЧИСЛО(15, 2)) КАК ТоварыСуммаНДС
	|{ВЫБРАТЬ
	|	Заказ.*,
	|	ЗаказНомерНаСайте,
	|	ЗаказДатаНаСайте,
	|	ЗаказКОплатеОстаток,
	|	ЗаказКОтгрузкеОстаток,
	|	ЗаказДата,
	|	ЗаказНомер,
	|	ЗаказПроведен,
	|	ЗаказПометкаУдаления,
	|	ЗаказНомерОплаты,
	|	ЗаказДатаОплаты,
	|	ЗаказНомерОтгрузки,
	|	ЗаказДатаОтгрузки,
	|	ЗаказВалютаКод,
	|	ЗаказСуммаДокумента,
	|	ЗаказНалогообложениеНДС,
	|	ЗаказСуммаВключаетНДС,
	|	ЗаказСостояниеЗаказа,
	|	ЗаказСтатусЗаказа,
	|	ЗаказЗакрыт,
	|	ЗаказКомментарий,
	|	БанковскийСчет.*,
	|	Контрагент.*,
	|	КонтрагентНаименование,
	|	КонтрагентНаименованиеПолное,
	|	КонтрагентЮрФизЛицо.*,
	|	КонтрагентИНН,
	|	КонтрагентКПП,
	|	КонтрагентКодПоОКПО,
	|	ЗаказКурс,
	|	ТоварыЕдиницаИзмерения.*,
	|	ТоварыКоличество,
	|	ТоварыНоменклатура.* КАК ТоварыНоменклатура,
	|	ТоварыНоменклатураАртикул,
	|	ТоварыПроцентСкидки,
	|	ТоварыСуммаСкидки,
	|	ТоварыСумма,
	|	ТоварыВсего,
	|	ТоварыЦена,
	|	ТоварыЕдиницаИзмеренияКод,
	|	ТоварыЕдиницаИзмеренияНаименование,
	|	ТоварыЕдиницаИзмеренияНаименованиеПолное,
	|	ТоварыЕдиницаИзмеренияМеждународноеСокращение,
	|	ТоварыЕдиницаИзмеренияПересчетКоэффициент,
	|	ТоварыЕдиницаИзмеренияПересчетЕдиницаКод,
	|	ТоварыСтавкаНДС.*,
	|	ТоварыТипНоменклатуры,
	|	ТоварыХарактеристика.*,
	|	ТоварыСуммаНДС}
	|ИЗ
	|	Документ._ДемоЗаказПокупателя.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО Товары.Ссылка.Контрагент = БанковскиеСчета.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗаказыНаСайте КАК втЗаказыНаСайте
	|		ПО (втЗаказыНаСайте.Заказ = Товары.Ссылка)
	|ГДЕ
	|	Товары.Ссылка В
	|			(ВЫБРАТЬ
	|				втЗаказыНаСайте.Заказ
	|			ИЗ
	|				втЗаказыНаСайте)";
	// _Демо конец примера
	
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре
// ПолучитьТекстЗапросаЗаказы или быть особенностью прикладного решения.
//
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ПараметрыКомпоновки - ПараметрСхемыКомпоновкиДанных - параметры схемы компоновки текста запроса в процедуре
//                                                        ПолучитьТекстЗапросаЗаказы.
//
Процедура УстановитьПараметрыТекстаЗапросаЗаказы(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
	// _Демо начало примера
	
	НомерЗаказаНаСайте = ПараметрыКомпоновки.Добавить();
	НомерЗаказаНаСайте.Имя = "НомерНаСайте";
	НомерЗаказаНаСайте.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	Если ПрикладныеПараметры.Свойство("НомерНаСайте") Тогда
		НомерЗаказаНаСайте.Значение = ПрикладныеПараметры.НомерНаСайте;
	Иначе
		НомерЗаказаНаСайте.Значение = "";
	КонецЕсли;

	ДатаЗаказаНаСайте = ПараметрыКомпоновки.Добавить();
	ДатаЗаказаНаСайте.Имя = "ДатаНаСайте";
	ДатаЗаказаНаСайте.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	Если ПрикладныеПараметры.Свойство("ДатаНаСайте") Тогда
		ДатаЗаказаНаСайте.Значение = ПрикладныеПараметры.ДатаНаСайте;
	Иначе
		ДатаЗаказаНаСайте.Значение = Дата("00010101");
	КонецЕсли;
	
	// _Демо конец примера
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиКаталог" плана обмена "Обмен с сайтом".
//
// Параметры:
//  УдаляемыеПоля - Массив - наименованием полей, которые должны быть удалены из отбора.
//
Процедура ЗаполнитьУдаляемыеПоляОтбораКаталог(УдаляемыеПоля) Экспорт
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом".
// 
// Параметры:
//  УдаляемыеПоля - Массив - наименованием полей, которые должны быть удалены из отбора.
//
Процедура ЗаполнитьУдаляемыеПоляОтбораПакетПредложений(УдаляемыеПоля) Экспорт
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом".
//
// Параметры:
//  УдаляемыеПоля - Массив - наименованием полей, которые должны быть удалены из отбора.
//
Процедура ЗаполнитьУдаляемыеПоляОтбораОбновлениеПакетаПредложений(УдаляемыеПоля) Экспорт
	
КонецПроцедуры

// В данной процедуре возможно изменить параметры обмена перед началом обмена
//
// Параметры:
//  ПараметрыОбмена  - Структура - текущие параметры обмена, имеет следующие свойства:
//    * УзелОбмена - ПланОбмена.ОбменССайтом - план обмена, для которого будет выполнен обмен.
//    * НастройкиПодключения - структура настроек для подключения к сайту, содержит следующие свойства:
//        * Пользователь - Строка - имя пользователя для подключения к сайту.
//        * АдресСайта - Строка - адрес сайта.
//        * Пароль - Строка - пароль для подключения.
//    * ВыгружатьИзменения - Булево - если Истина, то будут выгружаться только измененные объекты.
//    * ОтборГруппыКатегорииНоменклатуры  - ПеречислениеСсылка.ВидыОтборовНоменклатуры - режим отбора номенклатуры
//                                                                                       (по группам или категориям).
//    * РазмерПорции - Число - количество товаров, данные о которых будут выгружены на сайт в одной порции данных.
//    * КоличествоПовторов - Число - количество попыток выгрузки данных на сайт в случае сбоя в обмене.
//    * ВладелецКаталога - ОпределяемыйТип.Организация - организация, от имени которой будет публиковаться каталог товаров
//    * ОбменЗаказами - Булево - определяет, загружать ли с сайта заказы.
//    * ОбменТоварами - Булево - определяет, выгружать ли на сайт данные, связанные с товарами.
//    * ВыгружатьТовары - Булево - определяет, выгружать ли на сайт каталог товаров.
//    * ВыгружатьЦеныОстатки - Булево - определяет, выгружать ли на сайт данные по ценам.
//    * ВыгружатьОбновленияЦенИОстатков - Булево - определяет, выгружать ли на сайт информацию об изменении цен и остатков товаров.
//    * КаталогВыгрузки - Строка - каталог на диске, в который будут сохранены файлы обмена.
//    * ВыгружатьНаСайт - Булево - если Истина, то выгрузка будет производиться непосредственно на сайт, а не в каталог выгрузки.
//    * ВыгружатьКартинки - Булево - определяет, выполнять ли выгрузку изображений номенклатуры.
//    * РазрешенныеТипыКартинок - Массив - содержит допустимые расширения файлов картинок.
//    * НаименованиеНалога - Строка - наименование налога, применяемого к товару.
//    * ИспользоватьХарактеристики - Булево - определяет, используются ли характеристики.
//    * РежимЗапускаОбмена - Строка - строка, поясняющая был ли обмен запущен интерактивно
//                                    или через регл. задание.
//    * ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                        подсистемы в прикладное решение.
//    * ФайлЗагрузки - Строка - путь к файлу XML, из которого будут загружаться заказы.
//    * СтруктураИзменений - Структура - имеет следующие свойства:
//        * Заказы - Массив - массив ссылок на заказы, подлежащие выгрузке.
//        * Товары - Массив - массив ссылок на товары, подлежащие выгрузке.
//  УзелОбмена  - ПланОбмена.ОбменССайтом - план обмена, для которого будет выполнен обмен.
//
Процедура ИзменитьПараметрыОбмена(ПараметрыОбмена, УзелОбмена) Экспорт
	
	КлассифицироватьПоВидамНоменклатуры = Ложь;
	Если ПараметрыОбмена.ВидОтбораПоНоменклатуре = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры Тогда
		КлассифицироватьПоВидамНоменклатуры = Истина;
	КонецЕсли;
	
	ПараметрыОбмена.ПрикладныеПараметры.Вставить("КлассифицироватьПоВидамНоменклатуры", КлассифицироватьПоВидамНоменклатуры);
	
КонецПроцедуры

// Процедура записывает в БП информацию о номера и дате заказа на сайте.
//
// Параметры:
//  ТаблицаЗаказов - ТаблицаЗначений - информация о заказах, загруженных с сайта:
//    * Заказ - Ссылка - ссылка на документ Заказ покупателя;
//    * НомерЗаказа - Строка - номер заказа на сайте;
//    * ДатаЗаказа - Дата - дата заказа на сайте;
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//
Процедура ЗаписатьДатуНомерЗаказовССайта(ТаблицаЗаказов, ПрикладныеПараметры) Экспорт
	
	// _Демо начало примера
	Для Каждого ТекСтрока Из ТаблицаЗаказов Цикл
		
		Если Не ЗначениеЗаполнено(ПрикладныеПараметры.НомерНаСайте) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПрикладныеПараметры.ДатаНаСайте) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьНомер				= РегистрыСведений._ДемоДополнительныеСведения.СоздатьМенеджерЗаписи();
		ЗаписьНомер.Объект		= ТекСтрока.Заказ;
		ЗаписьНомер.Свойство	= ПрикладныеПараметры.НомерНаСайте;
		ЗаписьНомер.Значение	= ТекСтрока.НомерЗаказа;
		ЗаписьНомер.Записать();
		
		ЗаписьДата				= РегистрыСведений._ДемоДополнительныеСведения.СоздатьМенеджерЗаписи();
		ЗаписьДата.Объект		= ТекСтрока.Заказ;
		ЗаписьДата.Свойство		= ПрикладныеПараметры.ДатаНаСайте;
		ЗаписьДата.Значение		= ТекСтрока.ДатаЗаказа;
		ЗаписьДата.Записать();
		
	КонецЦикла;
	// _Демо конец примера
	
КонецПроцедуры

#КонецОбласти

// Заполняет информацию о складах.
// 
// Параметры:
//	СписокТочекСамовывоза - СписокЗначений - точки самовывоза, указанные в узле обмена.
//	СписокСкладов - СписокЗначений - склады полученные в результате выполнения запроса (при выгрузке пакета предложений).
//	ИнформацияОТочкахСамовывоза - ТаблицаЗначений - таблица, в которой будет храниться информация о точках самовывоза и складах.
//    * Склад - Ссылка, ссылка на элемент справочника (склады или точки самовывоза).
//    * СкладНаименование - наименование склада.
//    * СкладАдрес - Адресная информация о складе - Структура СкладАдрес.
//    * СкладКонтактнаяИнформация - Контактная информация о складе  -структура "СкладКонтактнаяИнформация".
//	СкладАдрес - Структура - структура, в которой необходимо представить адресную информацию о складе:
//    * ПочтовыйИндекс, Страна, Регион, Район, НаселенныйПункт, Город,Улица, Дом, Корпус, Квартира.
//	СкладКонтактнаяИнформация - Структура - структура, в которой необходимо представить контактную информацию о складе:
//    * ТелефонРабочий, Почта, КоординатыНаКарте, Прочее.
//
Процедура ЗаполнитьИнформациюОСкладахИТочкахСамовывоза(СписокТочекСамовывоза, СписокСкладов,
	ИнформацияОТочкахСамовывоза, СкладАдрес, СкладКонтактнаяИнформация) Экспорт
	
	// _Демо начало примера
	
	МассивАдресов = Новый Массив;
	
	СкладАдрес = Новый Структура("ПочтовыйИндекс, Страна, Регион, Район, НаселенныйПункт, Город,Улица,
																								|Дом,
																								|Корпус, 
																								|Квартира");
	СкладАдрес.ПочтовыйИндекс = "211005";
	СкладАдрес.Страна = "Россия";
	СкладАдрес.Регион = "г.Москва";
	СкладАдрес.Улица = "Складочная";
	СкладАдрес.Дом = "5";
	СкладАдрес.Корпус = "1";
	
	МассивАдресов.Добавить(СкладАдрес);
	
	СкладАдрес = Новый Структура("ПочтовыйИндекс, Страна, Регион, Район, НаселенныйПункт, Город,Улица,
																								|Дом,
																								|Корпус,
																								|Квартира");
	СкладАдрес.ПочтовыйИндекс = "211543";
	СкладАдрес.Страна = "Россия";
	СкладАдрес.Регион = "г.Пермь";
	СкладАдрес.Улица = "Ленина";
	СкладАдрес.Дом = "7";
	СкладАдрес.Корпус = "8";
	МассивАдресов.Добавить(СкладАдрес);
	
	СкладАдрес = Новый Структура("ПочтовыйИндекс, Страна, Регион, Район, НаселенныйПункт, Город,Улица,
																								|Дом,
																								|Корпус,
																								|Квартира");
	СкладАдрес.ПочтовыйИндекс = "451543";
	СкладАдрес.Страна = "Россия";
	СкладАдрес.Регион = "г.Сочи";
	СкладАдрес.Улица = "Олимпийская";
	СкладАдрес.Дом = "55";
	СкладАдрес.Корпус = "61";
	МассивАдресов.Добавить(СкладАдрес);
	
	
	МассивКИ = Новый Массив;
	
	СкладКонтактнаяИнформация = Новый Структура("ТелефонРабочий, Почта, КоординатыНаКарте, Прочее");
	СкладКонтактнаяИнформация.ТелефонРабочий = "5520589";
	СкладКонтактнаяИнформация.Почта = "skald@supermail.ru";
	СкладКонтактнаяИнформация.КоординатыНаКарте = "55.75222, 37.61714";
	СкладКонтактнаяИнформация.Прочее = НСтр("ru = '20 шагов на лево, поворот вниз'");
	МассивКИ.Добавить(СкладКонтактнаяИнформация);
	
	СкладКонтактнаяИнформация = Новый Структура("ТелефонРабочий, Почта, КоординатыНаКарте, Прочее");
	СкладКонтактнаяИнформация.ТелефонРабочий = "5689542";
	СкладКонтактнаяИнформация.Почта = "skald@Skladmail.ru";
	СкладКонтактнаяИнформация.КоординатыНаКарте = "59.77222, 30.61414";
	СкладКонтактнаяИнформация.Прочее = НСтр("ru = '20 шагов на лево, поворот внутрь'");
	МассивКИ.Добавить(СкладКонтактнаяИнформация);

	СкладКонтактнаяИнформация = Новый Структура("ТелефонРабочий, Почта, КоординатыНаКарте, Прочее");
	СкладКонтактнаяИнформация.ТелефонРабочий = "577772";
	СкладКонтактнаяИнформация.Почта = "umnica@bender.ru";
	СкладКонтактнаяИнформация.КоординатыНаКарте = "49.77222, 45.61414";
	СкладКонтактнаяИнформация.Прочее = НСтр("ru = '20 шагов на лево, 20 шагов направо'");
	МассивКИ.Добавить(СкладКонтактнаяИнформация);

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	_ДемоСклады.Ссылка КАК Склад,
	|	_ДемоСклады.Наименование КАК СкладНаименование
	|ИЗ
	|	Справочник._ДемоСклады КАК _ДемоСклады
	|ГДЕ
	|	_ДемоСклады.Ссылка В(&СписокСкладов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	_ДемоСклады.Ссылка,
	|	_ДемоСклады.Наименование
	|ИЗ
	|	Справочник._ДемоСклады КАК _ДемоСклады
	|ГДЕ
	|	_ДемоСклады.Ссылка В(&СписокТочекСамовывоза)";
	
	Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
	Запрос.УстановитьПараметр("СписокТочекСамовывоза", СписокТочекСамовывоза);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ИндексСклада = 0;
	Пока Выборка.Следующий() Цикл
		
		Остаток = ИндексСклада - (3 * (Цел(ИндексСклада/3)));
		
		НоваяСтрока = ИнформацияОТочкахСамовывоза.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.СкладАдрес = МассивАдресов[Остаток];
		НоваяСтрока.СкладКонтактнаяИнформация = МассивКИ[Остаток];
		
		ИндексСклада = ИндексСклада + 1;
	КонецЦикла;
	
	// _Демо конец примера
	
КонецПроцедуры

// В зависимости от значения функциональной опции "Использовать статусы заказов" устанавливается
// видимость табличной части "Соответствия заказов".
//
// Параметры:
//  Видимость - Булево - признак видимости табличной части.
//
Процедура УстановитьВидимостьТабличнойЧастиСоответствиеЗаказовФормыУзлаПланаОбмена(Видимость) Экспорт
	
	// _Демо начало примера
	
	Видимость = Истина;
	
	// _Демо конец примера
	
КонецПроцедуры

// В зависимости от типа регистрируемых данных определяет данные, которые необходимо зарегистрировать в плане обмена.
//
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект - регистрируемый объект данных, например, НоменклатураОбъект, ЗаказОбъект.
//  МассивУзловТовары - Массив - массив узлов плана обмена "Обмен с сайтом" в которых необходимо регистрировать объект
//                               в том случае если он является Номенклатурой.
//  МассивУзловЗаказы - Массив - массив узлов плана обмена "Обмен с сайтом" в которых необходимо регистрировать объект
//                               в том случае если он является Заказом.
//  Замещение - Булево - замещение данных регистрации.
//
Процедура ЗарегистрироватьИзмененияВУзлах(Объект, МассивУзловТовары, МассивУзловЗаказы, Замещение = Ложь) Экспорт
	
	// _Демо начало примера
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей._ДемоТоварыНаСкладах")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей._ДемоЦеныНоменклатуры") Тогда
		
		Если Замещение Тогда
			
			ОбъектМетаданных = Объект.Метаданные();
			
			ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
			
			Если ВРег(ИмяБазовогоТипа) = ВРег("РегистрыСведений") Тогда
				
				СтарыйНаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			ИначеЕсли ВРег(ИмяБазовогоТипа) = ВРег("РегистрыНакопления") Тогда
				
				СтарыйНаборЗаписей = РегистрыНакопления[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
			Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
				
				Если ЗначениеОтбора.Использование = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
				СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
				СтрокаОтбора.Использование = Истина;
				
			КонецЦикла;
			
			СтарыйНаборЗаписей.Прочитать();
			
			Для каждого Запись Из СтарыйНаборЗаписей Цикл
			
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого Запись Из Объект Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			
		КонецЦикла;

	
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Номенклатура") Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.НоменклатураПрисоединенныеФайлы") Тогда
		
		Если НЕ ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.ВладелецФайла);

		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
		
		Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Владелец);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект._ДемоЗаказПокупателя") Тогда 
		
		Для Каждого УзелОбмена Из МассивУзловЗаказы Цикл
			
			СтруктураПараметровССайта = Неопределено; 
			РеквизитыЗаказаНаСайте(Объект.Ссылка, УзелОбмена, СтруктураПараметровССайта);
			
			Если НЕ СтруктураПараметровССайта = НеОпределено Тогда
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Объект.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	// _Демо конец примера
	
КонецПроцедуры

// Определяет статус контрагента по значению перечисления.
//
// Параметры:
//  ДанныеКонтрагентаЮрФизЛицо - ПеречислениеСсылка - определяет юридический статус контрагента.
//                               В зависимости от статуса контрагента при выгрузке на сайт
//                               будут по разному заполняется данные о контрагенте.
//  ЭтоЮрЛицо - Булево - если это юридическое лицо заполняется ИНН, КПП, если это физическое лицо, то наименование.
//
Процедура ОпределитьЭтоЮрЛицо(ДанныеКонтрагентаЮрФизЛицо, ЭтоЮрЛицо) Экспорт
	
	// _Демо начало примера
	ЭтоЮрЛицо = Ложь;
	// _Демо конец примера
	
КонецПроцедуры

// К ИД номенклатуры добавляет ИД характеристики, если она задана.
//
// Параметры:
//	Номенклатура - Ссылка - например, СправочникСсылка.Номенклатура.
//	Характеристика - Ссылка - например, СправочникСсылка.ХарактеристикиНоменклатуры.
//  Ид - Строка - идентификатор.
//
Процедура ДополнитьИдНоменклатурыХарактеристикой(Номенклатура, Характеристика, Ид) Экспорт
	
	// _Демо начало примера
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")
		И ТипЗнч(Характеристика) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")
		И (НЕ Номенклатура.ЭтоГруппа)
		И ЗначениеЗаполнено(Характеристика) Тогда
		
		Ид = Ид + "#" + Строка(Характеристика.УникальныйИдентификатор());
		
	КонецЕсли;
	// _Демо конец примера
	
КонецПроцедуры

// Получает заказы, загруженные с сайта.
// 
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ТаблицаНомераИДатыЗаказов - ТаблицаЗначений - таблица содержащая номера и даты заказов, загруженных с сайта;
//    * НомерЗаказа - строка - номер заказа;
//    * ДатаЗаказа - строка - дата заказа.
//  Результат - ТаблицаЗначений - информация о заказах;
//    * ЗаказПокупателя - ссылка на документ Заказ.
//    * НомерЗаказаНаСайте - номер заказа.
//    * НеОбновлятьЗаказ - признак того, что Заказ не должен перезаписываться. 
// 
Процедура ПолучитьРанееЗагруженныеДокументы(ПрикладныеПараметры, ТаблицаНомераИДатыЗаказов, Результат) Экспорт
	
	// _Демо начало примера
		
	НомерНаСайте = ПрикладныеПараметры.НомерНаСайте;
	МассивНомеров = ТаблицаНомераИДатыЗаказов.ВыгрузитьКолонку("НомерЗаказа");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивНомеров", МассивНомеров);
	Запрос.УстановитьПараметр("НомерНаСайте", НомерНаСайте);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Объект КАК ЗаказПокупателя,
	|	Т.Значение КАК НомерЗаказаНаСайте
	|ПОМЕСТИТЬ втЗаказыССайта
	|ИЗ
	|	РегистрСведений._ДемоДополнительныеСведения КАК Т
	|ГДЕ
	|	Т.Объект ССЫЛКА Документ._ДемоЗаказПокупателя
	|	И Т.Свойство = &НомерНаСайте
	|	И Т.Значение В(&МассивНомеров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК Заказ,
	|	ИСТИНА КАК ЗаказОтменен
	|ПОМЕСТИТЬ втОтмененныеЗаказы
	|ИЗ
	|	РегистрСведений._ДемоДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ДополнительныеСведения.Свойство.Наименование = ""Отменен""
	|				ТОГДА НЕ ДополнительныеСведения.Значение = ""false""
	|		КОНЕЦ
	|	И ДополнительныеСведения.Объект ССЫЛКА Документ._ДемоЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаказыССайта.ЗаказПокупателя КАК ЗаказПокупателя,
	|	втЗаказыССайта.НомерЗаказаНаСайте КАК НомерЗаказаНаСайте,
	|	ЕСТЬNULL(втОтмененныеЗаказы.ЗаказОтменен, ВЫБОР
	|			КОГДА втЗаказыССайта.ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление._ДемоСтатусыЗаказов.Отменен)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК НеОбновлятьЗаказ
	|ИЗ
	|	втЗаказыССайта КАК втЗаказыССайта
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОтмененныеЗаказы КАК втОтмененныеЗаказы
	|		ПО втЗаказыССайта.ЗаказПокупателя = втОтмененныеЗаказы.Заказ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	// _Демо конец примера
	
КонецПроцедуры

// Создает новый документ "Заказ покупателя".
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - выходной параметр, заполняется созданным объектом документа Заказ.
//
Процедура СоздатьНовыйДокументЗаказ(ДокументОбъект) Экспорт
	
	// _Демо начало примера
	ДокументОбъект = Документы._ДемоЗаказПокупателя.СоздатьДокумент();
	// _Демо конец примера

КонецПроцедуры

// Заполняет документ заказ данными с сайта.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект - объект документа Заказ покупателя.
//  РеквизитыЗаказа - Структура - содержит значения реквизитов заказа, загруженных с сайта:
//     * Ид - Идентификатор заказа, очень часто тоже что и номер.
//     * Дата				- дата создания заказа на сайте.
//     * Номер				- номер заказа на сайте.
//     * ДатаОтгрузки		- дата отгрузки товара по заказу.
//     * ВалютаДокументаКод	- трехзначный идентификатор валюты.
//     * ВидЦенНаименование	- наименование вида цены.
//     * СуммаВключаетНДС	- признак включения НДС.
//     * НаименованиеСкидки	- наименование скидки.
//     * ПроцентСкидки		- процент скидки.
//     * СуммаСкидки		- сумма скидки по заказу.
//     * СкладНаименование 	- наименование склада, точки самовывоза.
//     * ПодразделениеНаименование - наименование подразделения.
//     * Контрагент			- ссылка на контрагента, который уже был идентифицирован в базе.
//     * ТочкаСамовывоза	- ссылка на элемент справочника, который в прикладном решении является справочником точек самовывоза или Неопределено.
//     * Товары				- табличная часть документа.
//     * Комментарий		- текстовый комментарий.
//  СвойстваЗаказа - Соответствие - содержит строковое представления свойств (ключ) и значений (значение) заказа.
//  ПрикладныеПараметры - Структура - содержит параметры прикладного решения, добавленные на форму узла плана обмена.
//  ОписаниеОшибки - Строка - текстовое представление ошибки.
//  Успешно - Булево - признак заполнения документа.
//
Процедура ЗаполнитьЗаказ(ДокументОбъект, РеквизитыЗаказа, СвойстваЗаказа, ПрикладныеПараметры, ОписаниеОшибки, Успешно) Экспорт
	
	// _Демо начало примера
	Валюта = Неопределено;
	_ДемоОбменССайтом.ОбработатьВалютуXML(Валюта, РеквизитыЗаказа.ВалютаДокументаКод);
	
	ДокументОбъект.Дата 			= РеквизитыЗаказа.Дата;
	ДокументОбъект.Валюта			= Валюта;
	ДокументОбъект.Организация		= ПрикладныеПараметры.Организация;
	ДокументОбъект.Контрагент		= РеквизитыЗаказа.Контрагент;
	ДокументОбъект.Комментарий		= ""+РеквизитыЗаказа.Комментарий
				+ ?(ЗначениеЗаполнено(РеквизитыЗаказа.ТочкаСамовывоза), РеквизитыЗаказа.ТочкаСамовывоза.Наименование,"");
	
	
	ТаблицаНоменклатура = Неопределено;
	
	_ДемоОбменССайтом.ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект, РеквизитыЗаказа.Товары, ПрикладныеПараметры);
	
	СтатусЗаказа = СвойстваЗаказа.Получить("Статус заказа");
	Если Не СтатусЗаказа = Неопределено Тогда
		
		
		ТаблицаСтатусов = ПрикладныеПараметры.СоответствиеСтатусовЗаказов;
		ЗначениеСтатуса = ТаблицаСтатусов.Найти(СтатусЗаказа, "СтатусЗаказаНаСайте");
		
		Если Не ЗначениеСтатуса = Неопределено Тогда
			ДокументОбъект.Статус = ЗначениеСтатуса.СтатусЗаказаВБазе;
		КонецЕсли;
		
	КонецЕсли;
	
	Успешно = Истина;
	// _Демо конец примера

КонецПроцедуры

// Поиск контрагента по настройкам плана обмена.
//
// Параметры:
//	СтруктураСвойстваЗаказа - Структура - содержит реквизиты заказа, загруженные с сайта. В данной структуре необходимо
//                                        заполнить поле "Контрагент".
//  ДанныеКонтрагента - Структура - содержит реквизита контрагента, загруженная с заказа, по данным реквизитам будет
//                                  происходить поиск существующего контрагента или создание нового:
//    * ЮрЛицо - Тип Булево. Признак наличия статуса Юр. лицо у контрагента.
//    * ОфициальноеНаименование - Тип строка.Официальное Наименование контрагента Юр. лица.
//    * ПолноеНаименование - Тип строка. Полное наименование контрагента Юр. лица.
//    * Наименование - Тип строка. Наименование контрагента.
//    * ФИО - ФИО контрагента, если он Физ. лицо.
//    * ОКПО - код ОКПО
//    * ИНН - код ИНН
//    * КПП - код КПП
//    * РасчетныеСчета - Массив - элементами массива является структура, в которой описаны свойства
//                                расчетного счета (необязательное поле):
//        ** НомерСчета - Строка - Номер банковского счета контрагента
//        ** ДанныеБанка - Структура - Данные банка расчетного счета:
//             *** Наименование - Строка
//             *** БИК - Строка
//             *** SWIFT - Строка
//             *** КоррСчет - Строка
//             *** Адрес - Строка
//             *** Город - Строка
//    * ИнформацияПоКонтрагенту - ТаблицаЗначений - содержит строковое представление и значение
//                                                  контактной информации о контрагенте:
//        ** Вид - Вид контактной информации.
//        ** Значение - значение контактной информации.
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ОписаниеОшибки - Строка - текстовое представление ошибки.
//
//	Пример: 
//   Заполнение таблицы ИнформацияПоКонтрагенту:
//			Вид						Значение
//			"Наименование"			Администратор
//			"Полное наименование"	Администратор
//			"Юр./Физ. лицо"			Физ. лицо
//			"Юридический адрес"		Ул. Ленина
//			"Почта"					email@example.com
//			"Контактные лица"		Администратор
//
Процедура ИдентифицироватьКонтрагента(СтруктураСвойстваЗаказа, ДанныеКонтрагента, ПрикладныеПараметры, ОписаниеОшибки) Экспорт
	
	// _Демо начало примера
	Наименование	= ДанныеКонтрагента.Наименование;
	ЮрЛицо			= ДанныеКонтрагента.ЮрЛицо;
	ИНН				= ДанныеКонтрагента.ИНН;
	КПП				= ДанныеКонтрагента.КПП;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты";
	
	Если ПустаяСтрока(Наименование) Тогда
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, 
		НСтр("ru = 'Наименование контрагента должно быть заполнено.'"));
		
		Возврат ;
		
	КонецЕсли;
	
	ТекстСообщенияНайденоНесколькоКонтрагентов = "";
	
	Если ПрикладныеПараметры.СпособИдентификацииКонтрагентов 
			= Перечисления._ДемоСпособыИдентификацииКонтрагентов.Наименование Тогда
		
		ТекстСообщенияНайденоНесколькоКонтрагентов = " " + НСтр("ru = 'по наименованию:'")+ " " + Наименование;
		
		Запрос.Текст = Запрос.Текст + " ГДЕ Контрагенты.Наименование = &Наименование ";
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
	ИначеЕсли ПрикладныеПараметры.СпособИдентификацииКонтрагентов 
			= Перечисления._ДемоСпособыИдентификацииКонтрагентов.ИННКПП Тогда
		
		Если ЮрЛицо Тогда
			
			Если ПустаяСтрока(ИНН) Тогда
				
				ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, 
				НСтр("ru = 'ИНН контрагента должен быть заполнен.'"));
				
				Возврат ;
				
			КонецЕсли;
			
			ТекстСообщенияНайденоНесколькоКонтрагентов = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'по ИНН: %1, КПП: %2'"),
				ИНН, КПП);
			
			Запрос.Текст = Запрос.Текст + " ГДЕ Контрагенты.ИНН = &ИНН И Контрагенты.КПП = &КПП ";
			
			Запрос.УстановитьПараметр("ИНН", ИНН);
			Запрос.УстановитьПараметр("КПП", КПП);
			
		Иначе		// у физ лица ИНН не бывает
			
			ТекстСообщенияНайденоНесколькоКонтрагентов = НСтр("ru = 'по наименованию:'")+ " " + Наименование;
			Запрос.Текст = Запрос.Текст + " ГДЕ Контрагенты.Наименование = &Наименование ";
			Запрос.УстановитьПараметр("Наименование", Наименование);
			
			
		КонецЕсли;
		
	КонецЕсли;
	
	КонтрагентСсылка = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		КонтрагентСсылка = _ДемоОбменССайтом.СоздатьКонтрагента( ДанныеКонтрагента, ПрикладныеПараметры, ОписаниеОшибки);
		
	Иначе
		
		Контрагенты = РезультатЗапроса.Выгрузить();
		КонтрагентСсылка = Контрагенты[0].Контрагент;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, 
			НСтр("ru = 'Не удалось найти или создать контрагента'"));
		
		Возврат ;
		
	КонецЕсли;
	
	
	СтруктураСвойстваЗаказа.Контрагент = КонтрагентСсылка;
	
	// _Демо конец примера
	
КонецПроцедуры

// Ищет номенклатуру по ИД, если не находит - ищет по артикулу и наименованию, если не находит - создает новую.
//
// Параметры:
//   Номенклатура - Ссылка - Ссылка на найденную или новую номенклатуру.
//   ДанныеНоменклатуры - Структура - Структура, содержащая информацию о номенклатуре, загруженной с сайта,
//     по данным которой необходимо провести поиск существующей номенклатуры или создать новую.
//     * Ид - Строка - внутренний идентификатор номенклатуры.
//     * АртикулНоменклатуры - Строка - Артикул номенклатуры.
//     * НаименованиеНоменклатуры - Строка - Наименование номенклатуры.
//     * ЕдиницаИзмерения - Справочник.ЕдиницыИзмерения - ссылка на единицу измерения товара.
//     * ЭтоУслуга - Булево - признак услуги.
//     * СтавкаНДС - Перечисление.СтавкиНДС - ставка НДС номенклатуры.
//   ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//   ОписаниеОшибки - Строка - текстовое представление ошибки.
//
Процедура НайтиСоздатьНоменклатуру(Номенклатура, ДанныеНоменклатуры, ПрикладныеПараметры, ОписаниеОшибки) Экспорт
	
	// _Демо начало примера
	ИдНоменклатуры = ДанныеНоменклатуры.Ид;
	
	Попытка 
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдНоменклатуры));
		
		Если Не Номенклатура = Справочники.Номенклатура.ПустаяСсылка()
			 И Номенклатура.ПолучитьОбъект() <> Неопределено  Тогда
			Возврат;
		КонецЕсли;
		
	Исключение
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки,
		НСтр("ru = 'Номенклатура не найдена по уникальному идентификатору:'")+ " " + ИдНоменклатуры);
		
	КонецПопытки;
	
	АртикулНоменклатуры			= ДанныеНоменклатуры.АртикулНоменклатуры;
	НаименованиеНоменклатуры	= ДанныеНоменклатуры.НаименованиеНоменклатуры;
	Номенклатура = _ДемоОбменССайтом.НайтиНоменклатуруПоАртикулуНаименованию(АртикулНоменклатуры, НаименованиеНоменклатуры);
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;

	
	Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
	
	Номенклатура.Родитель		= ПрикладныеПараметры.ГруппаДляНовойНоменклатуры;
	Номенклатура.Артикул		= ДанныеНоменклатуры.АртикулНоменклатуры;
	Номенклатура.Наименование	= ДанныеНоменклатуры.НаименованиеНоменклатуры;
	
	СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	_ДемоОбменССайтом.ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС(ДанныеНоменклатуры.СтавкаНДС, СтавкаНДС);
	Номенклатура.СтавкаНДС = СтавкаНДС;
	
	ЕдиницаИзмерения = Неопределено;
	_ДемоОбменССайтом.НайтиСоздатьЕдиницуИзмерения(ЕдиницаИзмерения,ДанныеНоменклатуры.ЕдиницаИзмерения);
	
	Номенклатура.ЕдиницаИзмерения = ЕдиницаИзмерения;
	Номенклатура.Комментарий = НСтр("ru = 'Создан автоматически при загрузке с сайта'");
	
	Номенклатура.Записать();
	
	Номенклатура = Номенклатура.Ссылка;
	
	// _Демо конец примера
	
КонецПроцедуры

// Поиск единицы измерения товара по коду.
//
// Параметры:
//  КодУпаковки - Строка - код упаковки товара.
//  Упаковка - СправочникСсылка - ссылка на упаковку.
//
Процедура НайтиСоздатьУпаковку(КодУпаковки, Упаковка) Экспорт
	
	// _Демо начало примера
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК Упаковка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", КодУпаковки);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Упаковка = Выборка.Упаковка;
		
	КонецЕсли;
	
	// _Демо конец примера
	
КонецПроцедуры

// Создает новый элемент справочника являющегося в прикладном решении точками самовывоза, например, Склады, Магазины.
//
// Параметры:
//  ДанныеТочки - Структура - параметры точки:
//    * Ид - Строка - идентификатор точки самовывоза.
//    * Адрес - Структура - структура с полями "ТипАдреса" и "ЗначениеАдреса".
//    * Контакты - Структура - структура с полями "ТипКонтакта" и "ЗначениеКонтакта".
//    * Наименование - Строка - наименование точки самовывоза.
//  ТочкаСамовывоза - СправочникСсылка - ссылка на элемент справочника,который в прикладном решении является точкой самовывоза.
//
Процедура СоздатьТочкуСамовывоза(ДанныеТочки, ТочкаСамовывоза) Экспорт
	
	// _Демо начало примера
	ТочкаСамовывоза = Справочники._ДемоСклады.СоздатьЭлемент();
	ТочкаСамовывоза.Наименование = ДанныеТочки.Наименование;
	ТочкаСамовывоза.Записать();
	ТочкаСамовывоза = ТочкаСамовывоза.Ссылка;
	// _Демо конец примера
	
КонецПроцедуры

// Вычисляет значение ставки НДС по переданному элементу справочника или перечисления.
//
// Параметры:
//   СтавкаНДС - ПеречислениеСсылка, СправочникСсылка - ставка НДС, выраженная элементом объекта метаданных прикладного решения.
//   ЗначениеСтавкиНДС - Число - Значение ставки НДС выраженное числом.
//
Процедура ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(СтавкаНДС, ЗначениеСтавкиНДС) Экспорт
	
	// _Демо начало примера
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		ЗначениеСтавкиНДС = 18;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		ЗначениеСтавкиНДС = 18;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		ЗначениеСтавкиНДС = 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		ЗначениеСтавкиНДС = 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		ЗначениеСтавкиНДС = 0;
	КонецЕсли;
	// _Демо конец примера
	
КонецПроцедуры

// Записывает в регистр сведений дополнительные сведения о заказе
//
// Параметры:
//   ОбновленыСвойстваЗаказа - Булево - признак успешного выполнения процедуры.
//   ЗаказПокупателя - ДокументСсылка - ссылка на документ ЗаказПокупателя.
//   СвойстваЗаказа - Соответствие - содержит строковое представления свойств (ключ) и значений (значение) заказа.
//   ОписаниеОшибки - Строка - текстовое представление ошибки.
//
Процедура ОбновитьСоздатьДополнительныеСведенияЗаказа(ОбновленыСвойстваЗаказа,
														ЗаказПокупателя,
														СвойстваЗаказа,
														ОписаниеОшибки) Экспорт
	
	// _Демо начало примера
	Если СвойстваЗаказа.Количество() = 0 Тогда
		ОбновленыСвойстваЗаказа = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСвойств = Новый ТаблицаЗначений;
	
	_ДемоОбменССайтом.ПолучитьЗначенияСвойств(ТаблицаСвойств, ЗаказПокупателя);
	
	ТаблицаСвойств.Колонки.Добавить("СвойствоСтрокой");
	
	
	Для Каждого СтрокаСвойства Из ТаблицаСвойств Цикл
		СтрокаСвойства.СвойствоСтрокой = Строка(СтрокаСвойства.Свойство);
	КонецЦикла;
	
	МассивСоздатьОбновить = Новый Массив;
	
	Для Каждого СвойствоЗаказа Из СвойстваЗаказа Цикл
		
		СтруктураПоиска = Новый Структура("СвойствоСтрокой, Значение", СвойствоЗаказа.Ключ, СвойствоЗаказа.Значение);
		
		Найдено = ТаблицаСвойств.НайтиСтроки(СтруктураПоиска);
		Если Найдено.Количество() = 0 Тогда
			
			МассивСоздатьОбновить.Добавить(СвойствоЗаказа);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСоздатьОбновить.Количество() = 0 Тогда
		
		ОбновленыСвойстваЗаказа = Ложь;
		Возврат ;
	КонецЕсли;
	
	ЗапросПВХ = Новый Запрос(
		"ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка,
		|	ДополнительныеРеквизитыИСведения.ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик._ДемоДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
		|	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления
		|	И ДополнительныеРеквизитыИСведения.Наименование = &Наименование");
		
			
	ЗапросНаборы = Новый Запрос(
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство
		|ИЗ
		|	Справочник._ДемоНаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = ЗНАЧЕНИЕ(Справочник._ДемоНаборыДополнительныхРеквизитовИСведений.Документ_ДемоЗаказПокупателя)
		|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство = &Свойство");
	
	Для Каждого СвойствоЗаказа Из МассивСоздатьОбновить Цикл
		
		СвойствоСтрокой = СвойствоЗаказа.Ключ;
		Значение = СвойствоЗаказа.Значение;
		
		ЗапросПВХ.УстановитьПараметр("Наименование", СвойствоСтрокой);
		
		Свойство = Неопределено;
		
		Выборка = ЗапросПВХ.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ТипЗначения = Новый ОписаниеТипов("Строка") Тогда
				
				Свойство = Выборка.Ссылка;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Свойство = Неопределено Тогда
			
			СвойствоОбъект = ПланыВидовХарактеристик._ДемоДополнительныеРеквизитыИСведения.СоздатьЭлемент();
			СвойствоОбъект.Комментарий = НСтр("ru = 'Создано автоматически при загрузке заказа с сайта'");
			СвойствоОбъект.Наименование = СвойствоСтрокой;
			СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Строка");
			СвойствоОбъект.ЭтоДополнительноеСведение = Истина;
			СвойствоОбъект.Записать();
			Свойство = СвойствоОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗапросНаборы.УстановитьПараметр("Свойство", Свойство);
		
		Если ЗапросНаборы.Выполнить().Пустой() Тогда
			
			НаборыДополнительныхРеквизитовИСведений = Справочники._ДемоНаборыДополнительныхРеквизитовИСведений;
			ЗаписьНабора = НаборыДополнительныхРеквизитовИСведений.Документ_ДемоЗаказПокупателя.ПолучитьОбъект();
			НовСвойство = ЗаписьНабора.ДополнительныеСведения.Добавить();
			НовСвойство.Свойство = Свойство;
			ЗаписьНабора.Записать();
			
		КонецЕсли;
		
		НоваяЗапись = РегистрыСведений._ДемоДополнительныеСведения.СоздатьМенеджерЗаписи();
		НоваяЗапись.Объект = ЗаказПокупателя;
		НоваяЗапись.Значение = Значение;
		НоваяЗапись.Свойство = Свойство;
		НоваяЗапись.Записать();
		
	КонецЦикла;
	// _Демо конец примера
	
КонецПроцедуры

// В зависимости от настроек прикладного решения установка флага использования характеристик.
//
// Параметры:
//  ИспользоватьХарактеристики - Булево - установка признака использования характеристик.
//
// Пример:
//  ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики").
//
Процедура УстановитьПризнакИспользоватьХарактеристики(ИспользоватьХарактеристики) Экспорт
	
	// _Демо начало примера
	ИспользоватьХарактеристики = Истина;
	// _Демо конец примера
	
КонецПроцедуры

// Меняет статус заказа на "Отменен".
// Параметры:
//   ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//   ДокументСсылка - Ссылка - ссылка на документ Заказ, у которого нужно поменять статус.
Процедура ОтменитьЗаказ(ПрикладныеПараметры, ДокументСсылка) Экспорт
	
	// _Демо начало примера
	ОбъектЗаказ = ДокументСсылка.ПолучитьОбъект();
	ОбъектЗаказ.Статус = Перечисления._ДемоСтатусыЗаказов.Отменен;
	ОбъектЗаказ.Записать();
	// _Демо конец примера
	
КонецПроцедуры

// Проверяет была ли оплата по заказу.
//
// Параметры: 
//   ЗаказОплачен - Булево - признак того, что заказ был оплачен, влияет на статус оплаты заказа на сайте.
//   СтатусЗаказа - ПеречислениеСсылка - статус заказа в прикладном решении.
//   ДанныеДокументаКОплатеОстаток - Число - не оплаченный остаток денег по заказу.
//
Процедура ОпределитьСтатусОплатыЗаказа(ЗаказОплачен, СтатусЗаказа, 
										ДанныеДокументаКОплатеОстаток) Экспорт
	
КонецПроцедуры

// Проверяет текущее состояние заказа.
//
// Параметры:
//   ЗаказВРаботе - Булево - Признак того, что заказ был "обработан" в прикладном решении (т.е. поменял свой статус после загрузки с сайта).
//                           Данный признак влияет на статус заказа на сайте.
//   ДанныеДокументаСостояниеЗаказа - ПеречислениеСсылка, СправочникСсылка - статус заказа, который он может принимать в прикладном решении.
Процедура ОпределитьСтатусСостоянияЗаказаЗаказВРаботе(ЗаказВРаботе, ДанныеДокументаСостояниеЗаказа) Экспорт
	
КонецПроцедуры

// Определяет была ли отгрузка товара по заказу.
//
// Параметры:
//   ЗаказОтгружен - Булево - признак того, что товар по заказу был отгружен. Влияет на статус отгрузки заказа на сайте.
//   ДанныеДокументаСтатусЗаказа - ПеречислениеСсылка, СправочникСсылка - статус, который может иметь заказ в прикладном решении.
//   ДанныеДокументаКОтгрузкеОстаток - Число - неотгруженный остаток по заказу (заказано было 7, а отгрузили 5).
Процедура ОпределитьСтатусОтгрузкиЗаказа(ЗаказОтгружен, ДанныеДокументаСтатусЗаказа,
											ДанныеДокументаКОтгрузкеОстаток) Экспорт
											
	// _Демо начало примера
	ЗаказОтгружен = Истина;
	// _Демо конец примера
	
КонецПроцедуры

// Определение нужно ли считать НДС.
//
// Параметры:
//  СчитатьНДС - Булево - признак о необходимости считать НДС по заказу.
//  ВыборкаДокументовНалогообложениеНДС - ПеречислениеСсылка, СправочникСсылка - ссылка на объект.
//
Процедура ОпределитьНеобходимостьНДСВЗаказе(СчитатьНДС, ВыборкаДокументовНалогообложениеНДС) Экспорт
	
	
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеДокументов - Соответствие - определяет соответствие служебных имен, используемых в библиотеке и
//                                          и реальных имен документов, используемых в прикладном решении. 
//                                          Обязательно должно содержать ключ "ЗаказПокупателя".
//
Процедура ПолучитьСоответствиеДокументов(СоответствиеДокументов) Экспорт
	
	// _Демо начало примера
	СоответствиеДокументов.Вставить("ЗаказПокупателя","_ДемоЗаказПокупателя");
	// _Демо конец примера
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - определяет соответствие служебных имен, используемых в библиотеке и
//                                          и реальных имен справочников, используемых в прикладном решении. 
//                                          Обязательно должно содержать ключи "Номенклатура", "ТочкиСамовывоза",
//                                          "ХарактеристикиНоменклатуры", "Организации", 
//                                          "НоменклатураПрисоединенныеФайлы", "ВидыЦен", "Склады", "ВидыНоменклатуры".
//
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	// _Демо начало примера
	СоответствиеСправочников.Вставить("Номенклатура", "Номенклатура");
	
	СоответствиеСправочников.Вставить("ВидыНоменклатуры", "ВидыНоменклатуры");
	
	СоответствиеСправочников.Вставить("ХарактеристикиНоменклатуры",
													"ХарактеристикиНоменклатуры");
	СоответствиеСправочников.Вставить("НаборыДополнительныхРеквизитовИСведений",
										"_ДемоНаборыДополнительныхРеквизитовИСведений");
										
	СоответствиеСправочников.Вставить("ВидыЦен", "_ДемоВидыЦен");
	СоответствиеСправочников.Вставить("НоменклатураПрисоединенныеФайлы",
										"НоменклатураПрисоединенныеФайлы");
	СоответствиеСправочников.Вставить("Склады", "_ДемоСклады");
	СоответствиеСправочников.Вставить("Контрагенты", "Контрагенты");
	
	СоответствиеСправочников.Вставить("ТочкиСамовывоза", "_ДемоСклады");
	
	СоответствиеСправочников.Вставить("Организации", "Организации");
	// _Демо конец примера
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения, в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеПВХ - Соответствие - определяет соответствие служебных имен, используемых в библиотеке и
//                                   и реальных имен планов видов характеристик, используемых в прикладном решении.
//                                   Обязательно должно содержать ключ "ДополнительныеРеквизитыИСведения".
//
Процедура ПолучитьСоответствиеПВХ(СоответствиеПВХ) Экспорт
	
	// _Демо начало примера
	СоответствиеПВХ.Вставить("ДополнительныеРеквизитыИСведения", "_ДемоДополнительныеРеквизитыИСведения");
	// _Демо конец примера
	
КонецПроцедуры

// Заполняет соответствие форм библиотеки и прикладного решения.
// Параметры:
//   СоответствиеФорм - Соответствие - используется для переопределения форм, вызываемых библиотекой.
//                                     Обязательно должно содержать ключ "ФормаВыбораТочекСамовывоза".
Процедура ПолучитьСоответствиеФорм(СоответствиеФорм) Экспорт
	
	// _Демо начало примера
	СоответствиеФорм.Вставить("ФормаВыбораТочекСамовывоза","Справочник._ДемоСклады.ФормаВыбора");
	// _Демо конец примера
	
КонецПроцедуры

// формирует прокси по настройкам прокси (передаваемому параметру).
//
// Параметры:
//  НастройкаПроксиСервера - Соответствие - настройка прокси-сервера:
//    * ИспользоватьПрокси - Булево - использовать ли прокси-сервер.
//    * НеИспользоватьПроксиДляЛокальныхАдресов - Булево - использовать ли прокси-сервер для локальных адресов.
//    * ИспользоватьСистемныеНастройки - Булево - использовать ли системные настройки прокси-сервера.
//    * Сервер       - Строка - адрес прокси-сервера.
//    * Порт         - Число - порт прокси-сервера.
//    * Пользователь - Строка - имя пользователя для авторизации на прокси-сервере.
//    * Пароль       - Строка - пароль пользователя.
//
Процедура ПолучитьНастройкиПроксиСервера(НастройкаПроксиСервера) Экспорт
	
	// _Демо начало примера
	НастройкаПроксиСервера.Вставить("ИспользоватьПрокси", Ложь);
	НастройкаПроксиСервера.Вставить("ИспользоватьСистемныеНастройки", Истина);
	НастройкаПроксиСервера.Вставить("НеИспользоватьПроксиДляЛокальныхАдресов", Ложь);
	НастройкаПроксиСервера.Вставить("Сервер", "");
	НастройкаПроксиСервера.Вставить("Порт", "");
	НастройкаПроксиСервера.Вставить("Пользователь", "");
	НастройкаПроксиСервера.Вставить("Пароль", "");
	// _Демо конец примера
	
КонецПроцедуры

// Заполняет номер и дату заказа на сайте.
//
// Параметры:
//	ДокСсылка - Ссылка - ссылка на документ Заказ.
//	УзелОбмена - Структура - параметры прикладного решения, размещенные в форме узла плана обмена.
//  ДанныеССайта - структура - заполняется в процедуре.
//     * НомерЗаказаНаСайте - Строка - номер заказа на сайте.
//     * ДатаЗаказаНаСайте - Дата - дата заказа на сайте.
//
Процедура РеквизитыЗаказаНаСайте(ДокСсылка, УзелОбмена, ДанныеССайта) Экспорт
	
	// _Демо начало примера

	СвойствоДатаНаСайте = Неопределено;
	СвойствоНомерНаСайте = Неопределено;
	
	СохраненныеПараметры = УзелОбмена.ПараметрыПрикладногоРешения.Получить();
	ПрикладныеПараметры = СохраненныеПараметры.ПараметрыПрикладногоРешения;

	Если ПрикладныеПараметры.Свойство("ДатаНаСайте") Тогда
		СвойствоДатаНаСайте = ПрикладныеПараметры.ДатаНаСайте;
	КонецЕсли;
	
	Если ПрикладныеПараметры.Свойство("НомерНаСайте") Тогда
		СвойствоНомерНаСайте = ПрикладныеПараметры.НомерНаСайте;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сведения.Значение КАК ДатаНаСайте,
	|	"""" КАК НомерНаСайте
	|ИЗ
	|	РегистрСведений._ДемоДополнительныеСведения КАК Сведения
	|ГДЕ
	|	Сведения.Объект = &ОбъектБД
	|	И Сведения.Свойство = &СвойствоДатаНаСайте
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	"""",
	|	СведенияНомер.Значение
	|ИЗ
	|	РегистрСведений._ДемоДополнительныеСведения КАК СведенияНомер
	|ГДЕ
	|	СведенияНомер.Объект = &ОбъектБД
	|	И СведенияНомер.Свойство = &СвойствоНомерНаСайте";
	
	Запрос.УстановитьПараметр("ОбъектБД", ДокСсылка);
	Запрос.УстановитьПараметр("СвойствоДатаНаСайте", СвойствоДатаНаСайте);
	Запрос.УстановитьПараметр("СвойствоНомерНаСайте", СвойствоНомерНаСайте);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ДанныеССайта = Неопределено;
	Иначе
		
		ДанныеССайта = Новый Структура;
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ДанныеССайта = Новый Структура;
		ДанныеССайта.Вставить("НомерЗаказаНаСайте",Выборка.НомерНаСайте);
		ДанныеССайта.Вставить("ДатаЗаказаНаСайте", Выборка.ДатаНаСайте);
		
	КонецЕсли;
	
	// _Демо конец примера

КонецПроцедуры 

// Заполняет массив реквизитов формы, значение которых должно быть сохранено.
//
// Параметры:
//  МассивРеквизитов - Массив - реквизиты для заполнения.
//
Процедура ЗаполнитьПрикладныеРеквизитыФормыУзлаОбменССайтом(МассивРеквизитов) Экспорт
	
	// _Демо начало примера
	
	РеквизитыЗаказов = _ДемоОбменССайтом.РеквизитыОбменаТоварами();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРеквизитов, РеквизитыЗаказов);
	
	РеквизитыЗаказов = _ДемоОбменССайтом.РеквизитыОбменаЗаказами();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРеквизитов, РеквизитыЗаказов);
	
	// _Демо конец примера
	
КонецПроцедуры

// Добавляет произвольные поля в структуру ПрикладныеПараметры.
//
// Параметры:
//   ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                     подсистемы в прикладное решение.
//	
Процедура ДополнитьПараметрыПрикладногоРешения(ПрикладныеПараметры) Экспорт
	
КонецПроцедуры

// Выполняет логику прикладного решения при обновлении конфигурации.
//
// Параметры:
//  ИмяОбработчика - Строка - представление обработчика обновления, вызвавшего процедуру.
//
Процедура ОбработчикОбновленияПереопределяемый(ИмяОбработчика) Экспорт
	
	
	
КонецПроцедуры

// В форму узла плана обмена добавляются реквизиты прикладного решения и элементы формы к ним.
// Параметры:
//  Форма - УправляемаяФорма - Форма узла плана обмена "Обмен с сайтом".
//  ТекущийОбъект - ПланОбменаОбъект - Объект плана обмена "Обмен с сайтом".
//
Процедура ДобавитьРеквизитыФормыУзла(Форма, ТекущийОбъект) Экспорт
	
	// _Демо начало примера
	
	ТипСпособИдентификации = Новый ОписаниеТипов("ПеречислениеСсылка._ДемоСпособыИдентификацииКонтрагентов");
	ТипЕдиницаИзмерения = Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения");
	ТипГруппаНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ТипГруппаКонтрагенты = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ТипОрганизация = Новый ОписаниеТипов("СправочникСсылка.Организации");
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	ТипСведения = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка._ДемоДополнительныеРеквизитыИСведения");
	ТипСоответствиеСтатусов = Новый ОписаниеТипов("ТаблицаЗначений");
	ТипСтатусЗаказаВБазе = Новый ОписаниеТипов("ПеречислениеСсылка._ДемоСтатусыЗаказов");

	
	РеквизитСпособИдентификации = Новый РеквизитФормы("СпособИдентификацииКонтрагентов", ТипСпособИдентификации,,,Истина);
	РеквизитЕдиницаНоменклатуры = Новый РеквизитФормы("ЕдиницаИзмеренияНовойНоменклатуры", ТипЕдиницаИзмерения,,
		НСтр("ru = 'Единица измерения новой номенклатуры'"), Истина);
	РеквизитГруппаНоменклатуры = Новый РеквизитФормы("ГруппаДляНовойНоменклатуры", ТипГруппаНоменклатуры,,
		НСтр("ru = 'Группа для новой номенклатуры'"), Истина);
	РеквизитГруппаКонтрагенты = Новый РеквизитФормы("ГруппаДляНовыхКонтрагентов", ТипГруппаКонтрагенты,,
		НСтр("ru = 'Группа для новых контрагентов'"), Истина);
	
	РеквизитОрганизация = Новый РеквизитФормы("Организация", ТипОрганизация,,НСтр("ru = 'Организация'"),Истина);
	
	РеквизитДатаНаСайте = Новый РеквизитФормы("ДатаНаСайте", ТипСведения,, НСтр("ru = 'Дата заказа на сайте'"), Истина);
	РеквизитНомерНаСайте = Новый РеквизитФормы("НомерНаСайте", ТипСведения,, НСтр("ru = 'Номер заказа на сайте'"), Истина);
	
	// Закладка Обмен заказами.
	
	// Добавление реквизитов на форму.
	
	РеквизитСоответствиеСтатусов = Новый РеквизитФормы("СоответствиеСтатусовЗаказов", ТипСоответствиеСтатусов,,
		НСтр("ru = 'Соответствие статусов заказов'"), Истина);
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитСоответствиеСтатусов);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	РеквизитСтатусЗаказаВБазе = Новый РеквизитФормы("СтатусЗаказаВБазе", ТипСтатусЗаказаВБазе,
		"СоответствиеСтатусовЗаказов", НСтр("ru = 'Статус заказа в базе'"), Истина);
	РеквизитСтатусЗаказаНаСайте = Новый РеквизитФормы("СтатусЗаказаНаСайте", ТипСтрока,
		"СоответствиеСтатусовЗаказов", НСтр("ru = 'Статус заказа на сайте'"), Истина);

	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитСпособИдентификации);
	ДобавляемыеРеквизиты.Добавить(РеквизитЕдиницаНоменклатуры);
	ДобавляемыеРеквизиты.Добавить(РеквизитГруппаНоменклатуры);
	ДобавляемыеРеквизиты.Добавить(РеквизитГруппаКонтрагенты);
	ДобавляемыеРеквизиты.Добавить(РеквизитОрганизация);
	ДобавляемыеРеквизиты.Добавить(РеквизитДатаНаСайте);
	ДобавляемыеРеквизиты.Добавить(РеквизитНомерНаСайте);
	ДобавляемыеРеквизиты.Добавить(РеквизитСтатусЗаказаВБазе);
	ДобавляемыеРеквизиты.Добавить(РеквизитСтатусЗаказаНаСайте);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаСтраницыОбменЗаказами.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	// Группа Параметры поиска контрагентов
	ГруппаПараметрыПоиска = Элементы.Добавить("ГруппаПараметрыПоиска", Тип("ГруппаФормы"), Элементы.ГруппаЗаказыОсновныеНастройки);
	ГруппаПараметрыПоиска.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПараметрыПоиска.ОтображатьЗаголовок = Истина;
	ГруппаПараметрыПоиска.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ЗаголовокГруппы = НСтр("ru = 'Параметры поиска контрагентов'");
	ГруппаПараметрыПоиска.Заголовок = ЗаголовокГруппы;
	ГруппаПараметрыПоиска.Объединенная = Истина;
	
	ЭлементСпособИдентификации = Элементы.Добавить("СпособИдентификацииКонтрагентов", Тип("ПолеФормы"), ГруппаПараметрыПоиска);
	ЭлементСпособИдентификации.ПутьКДанным = "СпособИдентификацииКонтрагентов";
	ЭлементСпособИдентификации.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементСпособИдентификации.Вид = ВидПоляФормы.ПолеПереключателя;
	ЭлементСпособИдентификации.СписокВыбора.Добавить(Перечисления._ДемоСпособыИдентификацииКонтрагентов.Наименование, "Наименование");
	ЭлементСпособИдентификации.СписокВыбора.Добавить(Перечисления._ДемоСпособыИдентификацииКонтрагентов.ИННКПП, "ИНН/КПП");
	
	// Группа Создание новых элементов
	ГруппаНовыеЭлементы = Элементы.Добавить("ГруппаНовыеЭлементы", Тип("ГруппаФормы"), Элементы.ГруппаЗаказыОсновныеНастройки);
	ГруппаНовыеЭлементы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНовыеЭлементы.ОтображатьЗаголовок = Истина;
	ГруппаНовыеЭлементы.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ЗаголовокГруппы = НСтр("ru = 'Параметры новой номенклатуры и контрагентов'");
	ГруппаНовыеЭлементы.Заголовок = ЗаголовокГруппы;
	ГруппаНовыеЭлементы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаНовыеЭлементы.Объединенная = Истина;
	
	ЭлементЕдиницаИзмерения = Элементы.Добавить("ЭлементЕдиницаИзмерения", Тип("ПолеФормы"), ГруппаНовыеЭлементы);
	ЭлементЕдиницаИзмерения.ПутьКДанным = "ЕдиницаИзмеренияНовойНоменклатуры";
	ЭлементЕдиницаИзмерения.Вид = ВидПоляФормы.ПолеВвода;
	
	ЭлементГруппаНоменклатуры = Элементы.Добавить("ГруппаДляНовойНоменклатуры", Тип("ПолеФормы"), ГруппаНовыеЭлементы);
	ЭлементГруппаНоменклатуры.ПутьКДанным = "ГруппаДляНовойНоменклатуры";
	ЭлементГруппаНоменклатуры.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементГруппаНоменклатуры.АвтоОтметкаНезаполненного = Ложь;
	
	ЭлементГруппаКонтрагенты = Элементы.Добавить("ГруппаДляНовыхКонтрагентов", Тип("ПолеФормы"), ГруппаНовыеЭлементы);
	ЭлементГруппаКонтрагенты.ПутьКДанным = "ГруппаДляНовыхКонтрагентов";
	ЭлементГруппаКонтрагенты.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементГруппаКонтрагенты.АвтоОтметкаНезаполненного = Ложь;
	
	// Группа Параметры заказа.
	ГруппаПараметрыЗаказа = Элементы.Добавить("ГруппаПараметрыЗаказа", Тип("ГруппаФормы"), Элементы.ГруппаЗаказыОсновныеНастройки);
	ГруппаПараметрыЗаказа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПараметрыЗаказа.ОтображатьЗаголовок = Истина;
	ГруппаПараметрыЗаказа.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ЗаголовокШаблон = НСтр("ru = 'Параметры создания документов %1'");
	ЗаголовокГруппы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокШаблон, НСтр("ru = 'Заказ клиента'"));
	ГруппаПараметрыЗаказа.Заголовок = ЗаголовокГруппы;
	ГруппаПараметрыЗаказа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаПараметрыЗаказа.Объединенная = Истина;
	
	ЭлементОрганизация = Элементы.Добавить("Организация", Тип("ПолеФормы"), ГруппаПараметрыЗаказа);
	ЭлементОрганизация.ПутьКДанным = "Организация";
	ЭлементОрганизация.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементОрганизация.АвтоОтметкаНезаполненного = Истина;
	
	ЭлементДатаЗаказа = Элементы.Добавить("ДатаЗаказаНаСайте", Тип("ПолеФормы"), ГруппаПараметрыЗаказа);
	ЭлементДатаЗаказа.ПутьКДанным = "ДатаНаСайте";
	ЭлементДатаЗаказа.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементДатаЗаказа.АвтоОтметкаНезаполненного = Истина;
		
	ЭлементНомерЗаказа = Элементы.Добавить("НомерЗаказаНаСайте", Тип("ПолеФормы"), ГруппаПараметрыЗаказа);
	ЭлементНомерЗаказа.ПутьКДанным = "НомерНаСайте";
	ЭлементНомерЗаказа.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементНомерЗаказа.АвтоОтметкаНезаполненного = Истина;
	
	ГруппаСоответствиеСтатусов = Элементы.Добавить("ГруппаСоответствиеСтатусов", Тип("ГруппаФормы"), Элементы.ГруппаЗаказыОсновныеНастройки);
	ГруппаСоответствиеСтатусов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСоответствиеСтатусов.ОтображатьЗаголовок = Ложь;
	ГруппаСоответствиеСтатусов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ЭлементСоответствиеСтатусовЗаказов = Элементы.Добавить("СоответствиеСтатусовЗаказов", Тип("ТаблицаФормы"), ГруппаСоответствиеСтатусов);
	ЭлементСоответствиеСтатусовЗаказов.ПутьКДанным = "СоответствиеСтатусовЗаказов";
	ЭлементСоответствиеСтатусовЗаказов.Отображение = ОтображениеТаблицы.Список;
	ЭлементСоответствиеСтатусовЗаказов.УстановитьДействие("ПередОкончаниемРедактирования", "Подключаемый_ТаблицаФормыПередОкончаниемРедактирования");
	
	ЭлементСтатусЗаказаВБазе = Элементы.Добавить("СтатусЗаказаВБазе", Тип("ПолеФормы"), ЭлементСоответствиеСтатусовЗаказов);
	ЭлементСтатусЗаказаВБазе.ПутьКДанным = "СоответствиеСтатусовЗаказов.СтатусЗаказаВБазе";
	ЭлементСтатусЗаказаВБазе.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементСтатусЗаказаВБазе.АвтоОтметкаНезаполненного = Истина;
	
	ЭлементСтатусЗаказаНаСайте = Элементы.Добавить("СтатусЗаказаНаСайте", Тип("ПолеФормы"), ЭлементСоответствиеСтатусовЗаказов);
	ЭлементСтатусЗаказаНаСайте.ПутьКДанным = "СоответствиеСтатусовЗаказов.СтатусЗаказаНаСайте";
	ЭлементСтатусЗаказаНаСайте.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементСтатусЗаказаНаСайте.АвтоОтметкаНезаполненного = Истина;
	
	// _Демо конец примера

КонецПроцедуры

#Область ПомощникПодключенияЮМИ

// Процедура, вызываемая из одноименного обработчика события формы "Помощник подключения ЮМИ" обработки "Обмен с сайтами".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
// 
Процедура ПриСозданииНаСервереФормаПомощникПодключенияЮМИ(Форма) Экспорт
	
	// _Демо начало примера
	
	// Устанавливается тип значения поля ВидЦены
	ВидыЦенТип = Новый ОписаниеТипов("СправочникСсылка._ДемоВидыЦен");
	Форма.Элементы.ВидЦен.ОграничениеТипа.ПривестиЗначение(ВидыЦенТип);
	Форма.Элементы.ВидЦен.ВыбиратьТип = Ложь;
	Форма.Элементы.ВидЦен.Заголовок = НСтр("ru = 'Вид цены'");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВидыЦен.Ссылка КАК ВидыЦены
	|ИЗ
	|	Справочник._ДемоВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.Выполнить();
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Форма.ВидЦен = Выборка.ВидыЦены;
	Иначе
		Форма.ВидЦен = Справочники._ДемоВидыЦен.ПустаяСсылка();
	КонецЕсли;
	
	// _Демо конец примера
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

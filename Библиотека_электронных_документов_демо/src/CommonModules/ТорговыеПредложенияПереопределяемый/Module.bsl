////////////////////////////////////////////////////////////////////////////////
// Подсистема "Торговые предложения".
// ОбщийМодуль.ТорговыеПредложенияПереопределяемый.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает признак того, что функциональная опция использования видов номенклатуры включена.
// 
// Параметры:
//   ИмяФормы - Строка - имя формы, для которой получаются данные.
//   Результат - Булево - признак того, что функциональная опция включена.
//
Процедура ФункциональнаяОпцияИспользуется(Знач ИмяФормы, Результат) Экспорт
	
	// _Демо начало примера
	
	Результат = Истина;
	
	// _Демо конец примера
	
КонецПроцедуры

// Выдает сообщение пользователю о том, что функциональная опция использования видов номенклатуры отключена.
//
// Параметры:
//  ИмяФормы - Строка - имя формы из которой вызывается сообщение.
//  Используется - Булево - признак того, что функциональная опция включена или нет.
//  Отказ - Булево - признак того, что форму сопоставления номенклатуры открывать не нужно.
//
Процедура СообщитьОНеобходимостиИспользованияФункциональнойОпции(Знач ИмяФормы, Знач Используется, Отказ) Экспорт
	
	// _Демо начало примера

	// _Демо конец примера
	
КонецПроцедуры

// Получение валюты регламентированного учета.
// 
// Параметры:
//  Валюта - СправочникСсылка - валюта регламентированного учета.
//
Процедура ПолучитьВалютуРегламентированногоУчета(Валюта) Экспорт
	
	// _Демо начало примера
	
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// _Демо конец примера
	
КонецПроцедуры

// Создает документ заказ поставщику на основании данных торгового предложения.
//
// Параметры:
//  ДанныеЗаполнения - Структура - данные торгового предложения:
//   * Организация       - СправочникСсылка - организация торгового предложения.
//   * Контрагент        - СправочникСсылка - поставщик торгового предложения.
//   * Валюта            - СправочникСсылка.Валюты - валюта торгового предложения.
//   * СтрокиЗаказа      - ТаблицаЗначений - содержит данные табличной части.
//   * КонтекстИсточника - Структура - набор данных из основания содержащий данные для заполнения шапки документа.
//   * СпособДоставки    - Ссылка - способ доставки прикладного решения.
//   * АдресДоставки     - Строка - представление адреса доставки.
//   * АдресДоставкиЗначенияПолей - Строка - значение адреса доставки в формате XML.
//  ДокументОбъект - ДокументОбъект - возвращается созданный, но не записанный документ.
//
Процедура СоздатьДокументЗаказПоставщикуНаОснованииТорговогоПредложения(Знач ДанныеЗаполнения, ДокументОбъект) Экспорт
	
	// _Демо начало примера
	
	ДокументОбъект = Документы._ДемоЗаказПоставщику.СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеЗаполнения);
	
	Для каждого СтрокаТовары Из ДанныеЗаполнения.СтрокиЗаказа Цикл
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		НоваяСтрока.Характеристика   = СтрокаТовары.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения = СтрокаТовары.ЕдиницаИзмеренияНоменклатуры;
		Если Не ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) И ЗначениеЗаполнено(СтрокаТовары.ЕдиницаИзмеренияКод) Тогда
			НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоКоду(СтрокаТовары.ЕдиницаИзмеренияКод);
			
			// Проверка заполнения обязательного поля.
			Если Не ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Ошибка создания заказа поставщику. Не найдена единица измерения (%1, код %2)'"),
					СтрокаТовары.ЕдиницаИзмерения, СтрокаТовары.ЕдиницаИзмеренияКод);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// _Демо конец примера
	
КонецПроцедуры

// Удаляет созданные заказы поставщику при переходе на шаг назад.
//
// Параметры:
//  ТаблицаДокументы - ТаблицаЗначений - таблица документов для удаления, состав:
//    * Ссылка - ДокументСсылка - ссылка на удаляемый документ.
//  Отказ - Булево - признак результата удаления документов.
//
Процедура УдалитьДокументыЗаказПоставщику(ТаблицаДокументы, Отказ) Экспорт
	
	// _Демо начало примера

	Сообщение = Новый СообщениеПользователю;
	ТекстИмеютсяСсылки = НСтр("ru = 'Имеются ссылки на %1 - %2.'");
	ТекстПомечен       = НСтр("ru = '%1 - помечен на удаление.'");
	ТекстЗаблокирован  = НСтр("ru = '%1 - заблокирован. Пометить на удаление не удалось.'");
	ТекстУдален        = НСтр("ru = '%1 - удален.'");
	
	СсылкиНаУдаление = Новый Массив;
	Для каждого СтрокаТаблицы Из ТаблицаДокументы Цикл
		СсылкиНаУдаление.Добавить(СтрокаТаблицы.Ссылка);
	КонецЦикла;
	
	ТаблицаСсылок = НайтиПоСсылкам(СсылкиНаУдаление);
	
	СсылкиПометокУдаления = Новый Массив;
	ВсегоСтрок = ТаблицаСсылок.Количество();
	Для Счетчик = 1 По ВсегоСтрок Цикл
		Ссылка = ТаблицаСсылок[ВсегоСтрок - Счетчик];
		Индекс = СсылкиНаУдаление.Найти(Ссылка[1]);
		Если Индекс = Неопределено Тогда
			Если СсылкиПометокУдаления.Найти(Ссылка[0]) = Неопределено Тогда
				СсылкиПометокУдаления.Добавить(Ссылка[0]);
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИмеютсяСсылки, СокрЛП(Ссылка[0]), СокрЛП(Ссылка[1]));
				Сообщение.Сообщить();
			КонецЕсли;
			ТаблицаСсылок.Удалить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ОбработкаЗавершена = Ложь;
	Пока Не ОбработкаЗавершена Цикл
		ОбработкаЗавершена = Истина;
		ВсегоСтрок = ТаблицаСсылок.Количество();
		Для Счетчик = 1 По ВсегоСтрок Цикл
			Ссылка = ТаблицаСсылок[ВсегоСтрок - Счетчик];
			Если СсылкиПометокУдаления.Найти(Ссылка[0]) <> Неопределено Тогда
				Если СсылкиПометокУдаления.Найти(Ссылка[1]) = Неопределено Тогда
					СсылкиПометокУдаления.Добавить(Ссылка[1]);
				КонецЕсли;
				ТаблицаСсылок.Удалить(Ссылка);
				ОбработкаЗавершена = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаДокументы.Очистить();
	
	Для каждого ЗначениеМассива Из СсылкиПометокУдаления Цикл
		Индекс = СсылкиНаУдаление.Найти(ЗначениеМассива);
		Если Индекс <> Неопределено Тогда
			СсылкиНаУдаление.Удалить(Индекс);
		КонецЕсли;
		ДокументОбъект = ЗначениеМассива.ПолучитьОбъект();
		Если Не ДокументОбъект.Заблокирован() Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПомечен, СокрЛП(ЗначениеМассива));
		Иначе
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаблокирован, СокрЛП(ЗначениеМассива));
		КонецЕсли;
		Сообщение.Сообщить();
	КонецЦикла;
	
	Для каждого ЗначениеМассива Из СсылкиНаУдаление Цикл
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстУдален, СокрЛП(ЗначениеМассива));
		Сообщение.Сообщить();
	КонецЦикла;
	
	УдалитьОбъекты(СсылкиНаУдаление, Ложь);
	
	// _Демо конец примера
	
КонецПроцедуры

// Получает значения контекста на основании которого будет производиться поиск предложений
// и которые будут переданы в шапку создаваемых заказов.
//
// Параметры:
//  ПараметрКоманды - Массив - ссылки на документы для заполнения таблицы поиска товаров в 1С:Бизнес-сеть.
//  КонтекстИсточника - Структура - свойства источника, используемые для формирования заказов.
//  ТаблицаТовары - ТаблицаЗначений - товары для поиска с реквизитами, состав:
//    * Номенклатура - СправочникСсылка - номенклатура.
//    * Характеристика - СправочникСсылка - характеристика номенклатуры.
//    * Упаковка - СправочникСсылка - упаковка номенклатуры.
//    * Количество - Число - количество.
//    * ЕдиницаИзмерения - СправочникСсылка - единица измерения номенклатуры.
//    * Числитель - Число - числитель упаковки.
//    * Знаменатель - число - знаменатель номенклатуры.
//    * Склад - СправочникСсылка - склад для заказа.
//    * КонтекстСтроки - Произвольный - дополнительные свойства по источнику.
//
Процедура СвойстваКонтекстаДокументовДляПоискаПредложений(Знач ПараметрКоманды, КонтекстИсточника, ТаблицаТовары) Экспорт
	
	// _Демо начало примера

	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		Ссылка = ПараметрКоманды[0];
	Иначе
		Ссылка = ПараметрКоманды;
	КонецЕсли;
	
	ДополнительныеРеквизиты = Новый Структура;
	ДополнительныеРеквизиты.Вставить("Организация");
	ДополнительныеРеквизиты.Вставить("Валюта");
	
	Запрос = Новый Запрос;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка._ДемоЗаказПокупателя") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	_ДемоЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
		|	_ДемоЗаказПокупателяТовары.Характеристика КАК Характеристика,
		|	_ДемоЗаказПокупателяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	_ДемоЗаказПокупателяТовары.Количество КАК Количество
		|ИЗ
		|	Документ._ДемоЗаказПокупателя.Товары КАК _ДемоЗаказПокупателяТовары
		|ГДЕ
		|	_ДемоЗаказПокупателяТовары.Ссылка В(&Ссылки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура";
		КонтекстИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ДополнительныеРеквизиты);
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка._ДемоЗаказПоставщику") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	_ДемоЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
		|	_ДемоЗаказПоставщикуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	_ДемоЗаказПоставщикуТовары.Количество КАК Количество
		|ИЗ
		|	Документ._ДемоЗаказПоставщику.Товары КАК _ДемоЗаказПоставщикуТовары
		|ГДЕ
		|	_ДемоЗаказПоставщикуТовары.Ссылка В(&Ссылки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура";
		КонтекстИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ДополнительныеРеквизиты);
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	1 КАК Количество
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&Ссылки)";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылки", ПараметрКоманды);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Упаковка = Выборка.ЕдиницаИзмерения;
	КонецЦикла;
	
	// _Демо конец примера
	
КонецПроцедуры

// Производит пересчет суммы для заказа товаров.
//
// Параметры:
//  СтрокаТоваров - Структура - реквизиты строки товаров для пересчета суммы при формировании заказов.
//                              См. ФормированиеЗаказов.ОписаниеСтрокиТаблицыТовары(), состав:
//    * ПроцентНДС      - Строка - значение НДС, полученное из сервиса.
//    * СтавкаНДС       - Ссылка - значение ставки НДС.
//    * Цена            - Число - цена товара для заказа.
//    * ЦенаВключаетНДС - Булево - признак включения НДС в цену.
//    * Количество      - Число - количество товара для заказа.
//    * Сумма           - Число - сумма заказа по строке.
//    * СуммаНДС        - Число - сумма НДС строки.
//    * СуммаСНДС       - Число - значение суммы с НДС.
//
Процедура ПересчитатьСуммуПоСтроке(СтрокаТоваров) Экспорт
	
	// _Демо начало примера
	
	ПроцентНДС = 0;
	Если СтрокаТоваров.СтавкаНДС = Перечисления.СтавкиНДС.НДС10
		ИЛИ СтрокаТоваров.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		ПроцентНДС = 0.1;
	ИначеЕсли СтрокаТоваров.СтавкаНДС = Перечисления.СтавкиНДС.НДС18
		ИЛИ СтрокаТоваров.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		ПроцентНДС = 0.18;
	КонецЕсли;
	
	СтрокаТоваров.Сумма = СтрокаТоваров.Количество * СтрокаТоваров.Цена;
	
	Если СтрокаТоваров.ЦенаВключаетНДС Тогда
		СуммаНДС = СтрокаТоваров.Сумма * ПроцентНДС / (ПроцентНДС + 1);
		СтрокаТоваров.СуммаСНДС = СтрокаТоваров.Сумма;
	Иначе
		СуммаНДС = СтрокаТоваров.Сумма * ПроцентНДС;
		СтрокаТоваров.СуммаСНДС = СтрокаТоваров.Сумма + СуммаНДС;
	КонецЕсли;
	
	СтрокаТоваров.СуммаНДС = СуммаНДС;
	
	// _Демо конец примера

КонецПроцедуры

// Устанавливаем условное оформление для единиц измерения номенклатуры.
//
// Параметры:
// 	 Форма - Форма - управляемая форму.
// 	 ИмяПоляВводаЕдиницИзмерения - Строка - наименование элемента формы, содержащего ед. измерения номенклатуры.
// 	 ПутьКПолюОтбора - Строка - полный путь к реквизиту.
//
Процедура УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, Знач ИмяПоляВводаЕдиницИзмерения, Знач ПутьКПолюОтбора) Экспорт
	
	// _Демо начало примера
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаЕдиницИзмерения].Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);	
	// _Демо конец примера
	
КонецПроцедуры

// Устанавливает значение свойства элементов формы, если находит элемент на форме.
//
// Параметры:
//  ЭлементыФормы  - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИменаЭлементов - Массив, Строка, Структура - имена искомых элементов.
//  ИмяСвойства    - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение       - Произвольный - значение, которое будет установлено.
//  УстанавливатьДляПодчиненных - Булево - установить аналогичное свойство для подчиненных элементов искомых элементов.
//
Процедура УстановитьСвойствоЭлементовФормы(ЭлементыФормы, ИменаЭлементов, ИмяСвойства, Значение, УстанавливатьДляПодчиненных = Ложь) Экспорт
	
	// _Демо начало примера
	
	// _Демо конец примера
	
КонецПроцедуры

// Получение доступных типов значений свойств для сопоставления.
// 
// Параметры:
//  ТипыЗначенийСвойств - СписокЗначений - доступные типы значений, например Тип("СправочникСсылка.Производители").
//
Процедура ПолучитьДоступныеТипыЗначенийСвойствДляСопоставления(ТипыЗначенийСвойств) Экспорт
	
	// _Демо начало примера
	
	ТипыЗначенийСвойств.Добавить(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"));
	
	// _Демо конец примера
	
КонецПроцедуры

// Возвращает пустую ссылку реквизита объекта для сопоставления.
// 
// Параметры:
//  Ссылка - ЛюбаяСсылка - пустая ссылка для заполнения сопоставления,
//                         например ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.
//
Процедура ПустаяСсылкаРеквизитаОбъектаДляСопоставления(Ссылка) Экспорт
	
	// _Демо начало примера
	
	Ссылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	
	// _Демо конец примера
	
КонецПроцедуры

// Получение реквизитов номенклатуры поставщика.
//
// Параметры:
//  НоменклатураПоставщиков	- Массив - список ссылок справочника номенклатура поставщика.
//  ТаблицаРеквизитов - ТаблицаЗначений - состав колонок:
//    * НоменклатураПоставщика       - СправочникСсылка - ссылка справочника номенклатура поставщика.
//    * Номенклатура                 - СправочникСсылка - ссылка справочника 
//    * ИспользованиеХарактеристик   - Булево - признак использования характеристик номенклатуры.
//    * Упаковка                     - СправочникСсылка - упаковка номенклатуры.
//    * ХарактеристикаНоменклатуры   - СправочникСсылка - характеристика номенклатуры.
//    * ЕдиницаИзмеренияНоменклатуры - СправочникСсылка - единица измерения номенклатуры.
//
Процедура ПолучитьРеквизитыНоменклатурыПоставщика(Знач НоменклатураПоставщиков, ТаблицаРеквизитов) Экспорт
	
	// _Демо начало примера

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщика,
	|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	|	НоменклатураПоставщиков.Упаковка КАК Упаковка,
	|	НоменклатураПоставщиков.Характеристика КАК ХарактеристикаНоменклатуры,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНоменклатуры
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.Ссылка В(&НоменклатураПоставщиков)";
	
	Запрос.УстановитьПараметр("НоменклатураПоставщиков", НоменклатураПоставщиков);
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	
	// _Демо конец примера
		
КонецПроцедуры

// Заполнение пакета торговых предложений.
//
// Параметры:
//  ТорговоеПредложение	 - СправочникСсылка - ссылка на элемент справочника определяющего торговые предложения,
//                                            например СправочникСсылка.Соглашения.
//  ПакетПредложений	 - Структура - свойства публикуемого торгового предложения.
//                         см. ТорговыеПредложения.ОписаниеПакетаПредложений().
//
Процедура ЗаполнитьПакетПредложений(Знач ТорговоеПредложение, ПакетПредложений) Экспорт
	
	// _Демо начало примера
	
	_ДемоТорговыеПредложения.ЗаполнитьПакетПредложений(ТорговоеПредложение, ПакетПредложений);
	
	// _Демо конец примера
	
КонецПроцедуры

// Заполнение контактной информации по контактному лицу.
//
// Параметры:
//  КонтактноеЛицо    - СправочникСсылка - контактное лицо в информационной базе, например СправочникСсылка.ФизическиеЛица.
//  ЭлектроннаяПочта  - Строка - адрес электронной почты.
//  Телефон           - Строка - номер телефона.
//  УведомлятьПоПочте - Булево - признак необходимости уведомления по электронной почте.
//  Перезаполнять     - Булево - признак необходимости перезаполнения информации.
//
Процедура ЗаполнитьКонтактнуюИнформациюПоКонтактномуЛицу(Знач КонтактноеЛицо, ЭлектроннаяПочта, Телефон, УведомлятьПоПочте, Знач Перезаполнять = Ложь) Экспорт
	
	// _Демо начало примера
	
	// _Демо конец примера
	
КонецПроцедуры

// Заполнение реквизитов номенклатуры в процедуре формирования заказа.
// См. Обработка.ТорговыеПредложения.Форма.ФормированиеЗаказов.
//
// Параметры:
//  Номенклатура - СправочникСсылка - ссылка на справочник номенклатура.
//  Результат	 - Структура - возвращаемые реквизиты ссылки справочника, 
//                             см. ТорговыеПредложения.ОписаниеРеквизитовНоменклатуры():
//    ИспользованиеХарактеристик - Булево - признак использования характеристик номенклатуры.
//    ЕдиницаИзмерения - СправочникСсылка - единица измерения номенклатуры.
//    Упаковка - СправочникСсылка - упаковка номенклатуры.
//    НоменклатураПоставщика - СправочникСсылка - пустая ссылка номенклатура поставщика.
//
Процедура ЗаполнитьРеквизитыНоменклатурыДляФормированияЗаказа(Знач Номенклатура, Результат) Экспорт
	
	// _Демо начало примера
	
	ИспользованиеХарактеристик = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры(ИспользованиеХарактеристик);
	
	Если ИспользованиеХарактеристик Тогда
		
		// Проверка характеристик для номенклатуры.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Номенклатура
		|	И ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Если Запрос.Выполнить().Пустой() Тогда
			ИспользованиеХарактеристик = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.ИспользованиеХарактеристик = ИспользованиеХарактеристик;
	Результат.ЕдиницаИзмерения       = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	Результат.НоменклатураПоставщика = ПредопределенноеЗначение("Справочник.НоменклатураПоставщиков.ПустаяСсылка");
	Результат.Упаковка               = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	
	// _Демо конец примера
	
КонецПроцедуры

// Инициализация динамического списка сопоставления номенклатуры в форме сопоставления номенклатуры.
// Заполняется переопределяемый текст запроса и свойства списка.
// См. форму обработки ТорговыеПредложения.СопоставлениеНоменклатуры.
//
// Параметры:
//  Список - ЭлементФормы - элемент динамического списка в форме.
//
Процедура ИнициализацияСпискаСопоставленияНоменклатуры(Список) Экспорт
	
	// _Демо начало примера
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СправочникВидыНоменклатуры.Ссылка КАК Ссылка,
	|	СправочникВидыНоменклатуры.Наименование КАК Наименование,
	|	СоответствиеКатегорий.ПредставлениеКатегории КАК Категория,
	|	СоответствиеКатегорий.ИдентификаторКатегории КАК ИдентификаторКатегории
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК СправочникВидыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыБизнесСеть КАК СоответствиеКатегорий
	|		ПО СправочникВидыНоменклатуры.Ссылка = СоответствиеКатегорий.ОбъектСопоставления";
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица              = "Справочник.ВидыНоменклатуры";
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	СвойстваСписка.ТекстЗапроса                 = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Список, СвойстваСписка);	
	
	// _Демо конец примера
	
КонецПроцедуры

// Добавление служебных колонок в таблицу товары.
//
// Параметры:
//  Товары - ТаблицаЗначений - исходная таблица с товарами, колонки:
//    Обязательные поля:
//    * Номенклатура   - СправочникСсылка - номенклатурная позиция.
//    * Характеристика - СправочникСсылка - характеристика номенклатуры.
//    * Упаковка       - СправочникСсылка - упаковка номенклатуры.
//    * Количество     - Число - количество.
//    Заполняемые поля:
//    * УпаковкаКод         - Строка - код упаковки.
//    * ЕдиницаИзмеренияКод - Строка - код единицы измерения.
//    * УпаковкаЧислитель   - Число - числитель упаковки номенклатуры.
//    * УпаковкаЗнаменатель - Число - знаменатель упаковки номенклатуры.
//    * Артикул             - Строка - артикул номенклатуры.
//    * Наименование        - Строка - наименование номенклатуры.
//    * Штрихкоды            - Массив - штрихкоды номенклатуры.
//  ПолучатьШтрихКоды - Булево - признак необходимости заполнения штрихкодов номенклатуры.
//                               Для значения Ложь, штрихкоды не заполняются.
//
Процедура ДобавитьСлужебныеКолонкиТовары(Товары, Знач ПолучатьШтрихКоды = Ложь) Экспорт
	
	// _Демо начало примера
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(Товары.Характеристика, НЕОПРЕДЕЛЕНО) КАК Характеристика,
	|	ЕСТЬNULL(Товары.Упаковка, НЕОПРЕДЕЛЕНО) КАК Упаковка,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ Товары.Упаковка.Код
	|	КОНЕЦ КАК УпаковкаКод
	|ИЗ
	|	Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК ЕдиницаИзмерения,
	|	Штрихкоды.Штрихкод КАК Значение
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Владелец
	|			И Товары.Упаковка = Штрихкоды.ЕдиницаИзмерения";
	Запрос.УстановитьПараметр("Товары", Товары);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаСвойства = Результат[1].Выбрать();
	Пока ВыборкаСвойства.Следующий() Цикл
		СтрокаТовара = Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Упаковка",
			ВыборкаСвойства.Номенклатура, ВыборкаСвойства.Характеристика, ВыборкаСвойства.Упаковка));
		Если СтрокаТовара.Количество() Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТовара[0], ВыборкаСвойства,, "Номенклатура, Характеристика, Упаковка");
		КонецЕсли;
	КонецЦикла;
	
	Товары.ЗаполнитьЗначения(Неопределено, "Штрихкоды");
	
	ВыборкаШтрихКоды = Результат[2].Выбрать();
	Пока ВыборкаШтрихКоды.Следующий() Цикл
		СтрокаТовара = Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Упаковка",
			ВыборкаШтрихКоды.Номенклатура, ВыборкаШтрихКоды.Характеристика,	ВыборкаШтрихКоды.ЕдиницаИзмерения));
		Если СтрокаТовара.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТовара[0].Штрихкоды = Неопределено Тогда
			СтрокаТовара[0].Штрихкоды = Новый Массив;
		КонецЕсли;
		СтрокаТовара[0].Штрихкоды.Добавить(ВыборкаШтрихКоды.Значение);
	КонецЦикла;
	
	// _Демо конец примера
	
КонецПроцедуры

// Получение текста запроса соответствия значений реквизитов вида номенклатуры.
// 
// В запросе необходимо вернуть таблицу содержащую количество значений
// реквизита в информационной базе и количество сопоставленных реквизитов.
// Параметры запроса: &РеквизитОбъекта, &ОбъектСопоставления.
// Поля запроса: КоличествоЗначенийРеквизита, КоличествоСопоставленныхРеквизитов.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//
Процедура ПолучитьТекстЗапросаСоответствияЗначенийРеквизитовВидаНоменклатуры(ТекстЗапроса) Экспорт
	
	// _Демо начало примера
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РеквизитыТоваров.Свойство КАК РеквизитОбъекта,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗначенияСвойствОбъектов.Ссылка) КАК КоличествоЗначенийРеквизита,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЗначенийРеквизитовБизнесСеть.Значение) КАК КоличествоСопоставленныхРеквизитов
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК РеквизитыТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО РеквизитыТоваров.Свойство = ЗначенияСвойствОбъектов.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовБизнесСеть КАК СоответствиеРеквизитовБизнесСеть
	|		ПО РеквизитыТоваров.Свойство = СоответствиеРеквизитовБизнесСеть.РеквизитОбъекта
	|			И (СоответствиеРеквизитовБизнесСеть.ОбъектСопоставления = &ОбъектСопоставления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовБизнесСеть КАК СоответствиеЗначенийРеквизитовБизнесСеть
	|		ПО РеквизитыТоваров.Свойство = СоответствиеЗначенийРеквизитовБизнесСеть.РеквизитОбъекта
	|			И (СоответствиеЗначенийРеквизитовБизнесСеть.ОбъектСопоставления = &ОбъектСопоставления)
	|ГДЕ
	|	РеквизитыТоваров.Свойство = &РеквизитОбъекта
	|
	|СГРУППИРОВАТЬ ПО
	|	РеквизитыТоваров.Свойство";
	
	// _Демо конец примера
	
КонецПроцедуры

// Получение сопоставленных значений реквизита вида номенклатуры.
//
// Параметры:
//  ОбъектСопоставления - СправочникСсылка - ссылка на справочник виды номенклатуры.
//  РеквизитОбъекта	    - Строка, СправочникСсылка - реквизит объекта.
//  ТипЗначения	        - ОписаниеТипов - тип значений реквизита.
//  ЗначенияРеквизита   - ТаблицаЗначений - список сопоставленных реквизитов, колонки:
//   * Значение                                - СправочникСсылка, Строка, Число, Булево - сопоставленное значение.
//   * ИдентификаторЗначенияРеквизитаКатегории - Строка - идентификатор сопоставленного значения.
//   * ПредставлениеЗначенияРеквизитаКатегории - Строка - представление сопоставленного значения.
//
Процедура ПолучитьСопоставленныеЗначенияРеквизитаВидаНоменклатуры(Знач ОбъектСопоставления, Знач РеквизитОбъекта, Знач ТипЗначения, ЗначенияРеквизита) Экспорт
	
	// _Демо начало примера
	
	// Вывод в список всех реквизитов в ИБ.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка,
	|	ЗначенияСвойствОбъектов.Владелец КАК Владелец
	|ПОМЕСТИТЬ ЗначенияСвойствОбъектов
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец В(&Владелец)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Ссылка КАК Значение,
	|	СоответствиеЗначенийРеквизитовБизнесСеть.ИдентификаторЗначенияРеквизитаКатегории КАК ИдентификаторЗначенияРеквизитаКатегории,
	|	СоответствиеЗначенийРеквизитовБизнесСеть.ПредставлениеЗначенияРеквизитаКатегории КАК ПредставлениеЗначенияРеквизитаКатегории
	|ИЗ
	|	ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовБизнесСеть КАК СоответствиеЗначенийРеквизитовБизнесСеть
	|		ПО ЗначенияСвойствОбъектов.Ссылка = СоответствиеЗначенийРеквизитовБизнесСеть.Значение
	|			И (СоответствиеЗначенийРеквизитовБизнесСеть.ОбъектСопоставления = &ОбъектСопоставления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Значение";
	
	Если ТипЗнч(РеквизитОбъекта) = Тип("Строка") Тогда
		
		// Модификация запроса для получения значений справочника.
		Тип = ТипЗначения.Типы()[0];
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец", РеквизитОбъекта);
	Запрос.УстановитьПараметр("ОбъектСопоставления", ОбъектСопоставления);
	
	ЗначенияРеквизита = Запрос.Выполнить().Выгрузить();
	
	// _Демо конец примера
	
КонецПроцедуры

// Заполнение реквизитов заказов.
//
// Параметры:
//  ТаблицаЗаказов	 - ТаблицаЗначений - таблица с ссылками и реквизитами для заполнения.
//                     см. ТорговыеПредложения.ФормированиеЗаказов.Заказы.
//
Процедура ЗаполнитьРеквизитыЗаказов(ТаблицаЗаказов) Экспорт

	// _Демо начало примера
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК Ссылка,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.Организация КАК Организация,
	|	ЗаказПоставщику.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказПоставщику.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.Проведен
	|			ТОГДА 1
	|		КОГДА ЗаказПоставщику.ПометкаУдаления
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗначениеКартинки
	|ИЗ
	|	Документ._ДемоЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&СписокДокументов)";
	
	Запрос.УстановитьПараметр("СписокДокументов", ТаблицаЗаказов.ВыгрузитьКолонку("Ссылка"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗаказов.Найти(Выборка.Ссылка, "Ссылка");
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	// _Демо конец примера
	
КонецПроцедуры

// Получение публикуемых реквизитов номенклатуры.
// 
// Параметры:
//  ПубликуемыеРеквизиты - Соответствие - реквизиты справочника Номенклатура, публикуемые для торговых предложений.
//    * Ключ     - Произвольный - значение реквизита сопоставления, см. определяемый тип ДополнительныеРеквизитыБизнесСеть.
//    * Значение - Структура - свойства реквизита:
//      ** Представление    - Строка - наименование для отображения.
//      ** ПутьКДанным      - Строка - текст запроса для получения данных.
//      ** ТипЗначения      - ОписаниеТипов - описание типа данных.
//      ** ПустоеЗначение   - Произвольный - Значение реквизита, при котором, он считается не заполненным.
//
Процедура ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(ПубликуемыеРеквизиты) Экспорт
	
	// _Демо начало примера
	
	ПубликуемыеРеквизиты = Новый Соответствие;
	
	РеквизитАртикул = Новый Структура;
	РеквизитАртикул.Вставить("Представление",    НСтр("ru = 'Артикул'"));
	РеквизитАртикул.Вставить("ПутьКДанным",      "Номенклатура.Артикул");
	РеквизитАртикул.Вставить("ТипЗначения",      Новый ОписаниеТипов("Строка"));
	РеквизитАртикул.Вставить("ПустоеЗначение",
		Перечисления._ДемоРеквизитыСопоставленияНоменклатурыБизнесСеть.ПустаяСсылка());
	ПубликуемыеРеквизиты.Вставить(Перечисления._ДемоРеквизитыСопоставленияНоменклатурыБизнесСеть.Артикул,
		РеквизитАртикул);
	
	// _Демо конец примера
	
КонецПроцедуры

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
//
// Параметры:
//  Форма - УправляемаяФорма - из обработчика события которой происходит вызов процедуры.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	// _Демо начало примера
	
	Если Форма.ИмяФормы = "ФормированиеЗаказов" Тогда
		
		Если Форма.РежимЗапросаЦен Тогда
			// Для режима запроса цен изменение элементов формы.
			Форма.Заголовок = НСтр("ru = 'Запрос цен на товары поставщиков'");
			
			// Переопределяемый текст заголовка формы.
			Форма.Элементы.КраткоеОписание.Заголовок =
				НСтр("ru = '• В программе будут созданы учетные документы для уточнения цен на товары.
				|• Электронные документы запроса цен будут отправлены поставщикам через сервис 1С:Бизнес-сеть.
				|• После получения документов, поставщики могут отправить уточнение цен на товары (Коммерческое предложение).'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// _Демо конец примера
	
КонецПроцедуры

// Обработка выбора формы (переопределяемое события).
// Вызов производится на сервере. См. описание метода ОбработкаВыбора.
//
// Параметры:
//  Форма				 - УправляемаяФорма - форма источник события.
//  ВыбранноеЗначение	 - Произвольный - выбранное событие.
//  ИсточникВыбора		 - Произвольный - форма, где осуществлен выбор.
//
Процедура ОбработатьВыбор(Форма, Знач ВыбранноеЗначение, Знач ИсточникВыбора) Экспорт

	// _Демо начало примера
	
	// _Демо конец примера
	
КонецПроцедуры

// Обработка оповещения формы (переопределяемое событие).
// Вызывается на сервере. См. метод ОбработкаОповещения.
//
// Параметры:
//  ИмяСобытия - Строка - имя оповещения.
//  Параметр   - Произвольный - параметр сообщения.
//  Источник   - УправляемаяФорма - форма источник события.
//
Процедура ОбработатьОповещение(Знач ИмяСобытия, Параметр, Источник) Экспорт

	// _Демо начало примера
	
	// _Демо конец примера
	
КонецПроцедуры

// Получение данных для сопоставления реквизитов и значений реквизитов информационной базы и сервиса.
//
// Параметры:
//  ОбъектСопоставления      - СправочникСсылка - ссылка на справочник виды номенклатуры.
//  СопоставленныеРеквизиты	 - ТаблицаЗначений - сопоставленные реквизиты в ИБ.
//    * РеквизитОбъекта                 - Произвольный - реквизит.
//    * ИдентификаторРеквизитаКатегории - Строка - идентификатор реквизита категории в сервисе.
//    * Представление                   - Строка - представление реквизита.
//  ДополнительныеРеквизиты  - ТаблицаЗначений - дополнительные реквизиты номенклатуры.
//    * РеквизитОбъекта - Произвольный - реквизит.
//    * ТипЗначения     - ОписаниеТипов - тип реквизита.
//  РасчетСоответствий       - ТаблицаЗначений - таблица количества соответствий значений реквизитов.
//    * РеквизитОбъекта                    - Произвольный - реквизит.
//    * КоличествоЗначенийРеквизита        - Число - количество значений реквизита в ИБ.
//    * КоличествоСопоставленныхРеквизитов - Число - количество сопоставленных значений реквизитов.
//
Процедура ПолучитьДанныеСопоставленияРеквизитов(ОбъектСопоставления, СопоставленныеРеквизиты, ДополнительныеРеквизиты, РасчетСоответствий) Экспорт
	
	// _Демо начало примера
	
	// Заполнение списка набора реквизитов.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеРеквизиты.РеквизитОбъекта КАК РеквизитОбъекта,
	|	ДополнительныеРеквизиты.Представление КАК Представление
	|ПОМЕСТИТЬ ДополнительныеРеквизиты
	|ИЗ
	|	&ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыНоменклатуры.Свойство КАК РеквизитОбъекта,
	|	СоответствиеРеквизитовБизнесСеть.ИдентификаторРеквизитаКатегории КАК ИдентификаторРеквизитаКатегории,
	|	РеквизитыНоменклатуры.Свойство.Наименование КАК Представление
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК РеквизитыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовБизнесСеть КАК СоответствиеРеквизитовБизнесСеть
	|		ПО РеквизитыНоменклатуры.Свойство = СоответствиеРеквизитовБизнесСеть.РеквизитОбъекта
	|			И (СоответствиеРеквизитовБизнесСеть.ОбъектСопоставления = &ОбъектСопоставления)
	|ГДЕ
	|	РеквизитыНоменклатуры.Ссылка В
	|			(ВЫБРАТЬ
	|				ВидыНоменклатуры.НаборСвойств
	|			ИЗ
	|				Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ГДЕ
	|				ВидыНоменклатуры.Ссылка = &ВидНоменклатуры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.РеквизитОбъекта,
	|	СоответствиеРеквизитовБизнесСеть.ИдентификаторРеквизитаКатегории,
	|	ВЫРАЗИТЬ(ДополнительныеРеквизиты.Представление КАК СТРОКА(50))
	|ИЗ
	|	ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовБизнесСеть КАК СоответствиеРеквизитовБизнесСеть
	|		ПО (ДополнительныеРеквизиты.РеквизитОбъекта = (ВЫРАЗИТЬ(СоответствиеРеквизитовБизнесСеть.РеквизитОбъекта КАК Перечисление._ДемоРеквизитыСопоставленияНоменклатурыБизнесСеть)))
	|			И (СоответствиеРеквизитовБизнесСеть.ОбъектСопоставления = &ОбъектСопоставления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство КАК РеквизитОбъекта,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗначенияСвойствОбъектов.Ссылка) КАК КоличествоЗначенийРеквизита,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЗначенийРеквизитов.Значение) КАК КоличествоСопоставленныхРеквизитов
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ДополнительныеРеквизиты.Свойство = ЗначенияСвойствОбъектов.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовБизнесСеть КАК СоответствиеРеквизитовБизнесСеть
	|		ПО ДополнительныеРеквизиты.Свойство = СоответствиеРеквизитовБизнесСеть.РеквизитОбъекта
	|			И (СоответствиеРеквизитовБизнесСеть.ОбъектСопоставления = &ОбъектСопоставления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовБизнесСеть КАК СоответствиеЗначенийРеквизитов
	|		ПО ДополнительныеРеквизиты.Свойство = СоответствиеЗначенийРеквизитов.РеквизитОбъекта
	|			И (СоответствиеЗначенийРеквизитов.ОбъектСопоставления = &ОбъектСопоставления)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДополнительныеРеквизиты.Свойство";

	
	СоответствиеРеквизитов = Новый Соответствие;
	ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(СоответствиеРеквизитов);
	Для каждого Реквизит Из СоответствиеРеквизитов Цикл
		НоваяСтрока = ДополнительныеРеквизиты.Добавить();
		НоваяСтрока.РеквизитОбъекта = Реквизит.Ключ;
		НоваяСтрока.ТипЗначения     = Реквизит.Значение.ТипЗначения;
		НоваяСтрока.Представление   = Реквизит.Значение.Представление;
	КонецЦикла;
	
	Если ТипЗнч(ОбъектСопоставления) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		ВидНоменклатуры = ОбъектСопоставления;
	ИначеЕсли ТипЗнч(ОбъектСопоставления) = Тип("СправочникСсылка.Номенклатура") Тогда
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСопоставления, "ВидНоменклатуры");
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидНоменклатуры",         ВидНоменклатуры);
	Запрос.УстановитьПараметр("ОбъектСопоставления",     ОбъектСопоставления);
	Запрос.УстановитьПараметр("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ВыборкаРеквизитыНоменклатуры = ПакетЗапросов[1].Выбрать();
	Пока ВыборкаРеквизитыНоменклатуры.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СопоставленныеРеквизиты.Добавить(), ВыборкаРеквизитыНоменклатуры);
	КонецЦикла;
	
	ВременныйМассив = Новый Массив;
	ВыборкаДополнительныеРеквизиты = ПакетЗапросов[ПакетЗапросов.Количество() - 1].Выбрать();
	Пока ВыборкаДополнительныеРеквизиты.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(РасчетСоответствий.Добавить(), ВыборкаДополнительныеРеквизиты);
	КонецЦикла;
	
	// _Демо конец примера
	
КонецПроцедуры

// Получение свойств торгового предложения.
//
// Параметры:
//  Источник        - СправочникСсылка - источник торгового соглашения, например СправочникСсылка.Соглашения.
//  ЗначенияСвойств - Структура - возвращаемое значение заполнения.
//
Процедура ПолучитьСвойстваТорговогоПредложения(Знач Источник, ЗначенияСвойств) Экспорт

	// _Демо начало примера
	
	ЗаполнитьЗначенияСвойств(ЗначенияСвойств,
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Валюта"));
		
	// _Демо конец примера
		
КонецПроцедуры

// Получение текста запроса публикуемых товаров.
// 
// В запросе необходимо вернуть данные для публикации товаров.
// См. ТорговыеПредложения.ОписаниеПакетаПредложений таблица Товары.
// Обязательный параметр &ТорговыеПредложения (определяемый тип ТорговыеПредложения).
//
// Параметры:
//   ТекстЗапроса - Строка - формируемый текст запроса.
//   ФормироватьСвойства - Булево - признак добавления подзапроса для получения свойств товаров, штрих-кодов.
//   ИспользоватьПараметры - Булево - признак использования параметров запроса &ТорговоеПредложение, &Период.
//
// Пример:
//   ТорговыеПредложенияПереопределяемый.ТекстЗапросаПубликуемыхТоваров(Ложь) =
//     "ВЫБРАТЬ
//     |  Товары.ВидНоменклатуры,
//     |  Товары.Номенклатура,
//     |  Товары.Характеристика,
//     |  Товары.КатегорияНаименование,
//     |  Товары.Упаковка,
//     |  Товары.СрокаПоставки,
//     |  Товары.Цена
//     |ИЗ Справочник.ПрайсЛист.Товары КАК Товары
//     |  ГДЕ Товары.Ссылка = &ТорговыеПредложения"
//
Процедура ПолучитьТекстЗапросаПубликуемыхТоваров(ТекстЗапроса, ФормироватьСвойства = Ложь, ИспользоватьПараметры = Ложь) Экспорт
	
	// _Демо начало примера
	
	ТекстТовары =
	"ВЫБРАТЬ
	|	СостоянияСинхронизации.ТорговоеПредложение КАК ТорговоеПредложение,
	|	СостоянияСинхронизации.ТорговоеПредложение.Организация КАК Организация,
	|	СостоянияСинхронизации.ТорговоеПредложение.Валюта КАК Валюта,
	|	СостоянияСинхронизации.ТорговоеПредложение.Валюта.Код КАК ВалютаКод,
	|	СостоянияСинхронизации.ПубликоватьЦены КАК ПубликоватьЦены,
	|	СостоянияСинхронизации.ПубликоватьСрокиПоставки КАК ПубликоватьСрокиПоставки,
	|	СостоянияСинхронизации.ПубликоватьОстатки КАК ПубликоватьОстатки
	|ПОМЕСТИТЬ ТорговыеПредложения
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизации
	|ГДЕ
	|	НЕ СостоянияСинхронизации.ТорговоеПредложение.ПометкаУдаления
	|	И СостоянияСинхронизации.ТорговоеПредложение = &ТорговоеПредложение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_ДемоСоглашенияСКлиентамиТовары.Номенклатура КАК Номенклатура,
	|	_ДемоСоглашенияСКлиентамиТовары.Номенклатура.Артикул КАК Артикул,
	|	_ДемоСоглашенияСКлиентамиТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	_ДемоСоглашенияСКлиентамиТовары.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	_ДемоСоглашенияСКлиентамиТовары.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	_ДемоСоглашенияСКлиентамиТовары.Номенклатура.ЕдиницаИзмерения.Наименование КАК УпаковкаНаименование,
	|	_ДемоСоглашенияСКлиентамиТовары.Номенклатура.ЕдиницаИзмерения.Код КАК УпаковкаКод,
	|	_ДемоСоглашенияСКлиентамиТовары.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	_ДемоСоглашенияСКлиентамиТовары.Номенклатура.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ИСТИНА В
	|				(ВЫБРАТЬ
	|					ТорговыеПредложения.ПубликоватьЦены КАК ПубликоватьЦены
	|				ИЗ
	|					ТорговыеПредложения КАК ТорговыеПредложения)
	|			ТОГДА _ДемоСоглашенияСКлиентамиТовары.Цена
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Цена,
	|	ТорговыеПредложения.Валюта.Код КАК ВалютаКод,
	|	1 КАК УпаковкаЧислитель,
	|	1 КАК УпаковкаЗнаменатель,
	|	ВЫБОР
	|		КОГДА ТорговыеПредложения.ПубликоватьСрокиПоставки
	|			ТОГДА 0
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СрокПоставки,
	|	_ДемоСоглашенияСКлиентамиТовары.Номенклатура.ФайлКартинки КАК Картинка,
	|	_ДемоСоглашенияСКлиентамиТовары.Номенклатура.ФайлКартинки.Расширение КАК Расширение,
	|	_ДемоСоглашенияСКлиентамиТовары.Номенклатура.ФайлКартинки.ДатаМодификацииУниверсальная КАК ДатаИзмененияКартинки,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ОбъектСопоставления, ЕСТЬNULL(СоответствиеПоВидам.ОбъектСопоставления, ЕСТЬNULL(СоответствиеПоИерархии.ОбъектСопоставления, _ДемоСоглашенияСКлиентамиТовары.Номенклатура.ВидНоменклатуры))) КАК ОбъектСопоставления,
	|	_ДемоСоглашенияСКлиентамиТовары.Характеристика КАК Характеристика,
	|	_ДемоСоглашенияСКлиентамиТовары.Характеристика.Наименование КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ИдентификаторКатегории, ЕСТЬNULL(СоответствиеПоВидам.ИдентификаторКатегории, СоответствиеПоИерархии.ИдентификаторКатегории)) КАК ИдентификаторКатегории,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ПредставлениеКатегории, ЕСТЬNULL(СоответствиеПоВидам.ПредставлениеКатегории, СоответствиеПоИерархии.ПредставлениеКатегории)) КАК КатегорияНаименование,
	|	ТорговыеПредложения.ТорговоеПредложение КАК ТорговоеПредложение,
	|	ТорговыеПредложения.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТорговыеПредложения.ПубликоватьОстатки
	|			ТОГДА 1
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТорговыеПредложения.ПубликоватьОстатки
	|			ТОГДА 1
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Остаток
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Справочник._ДемоСоглашенияСКлиентами.Товары КАК _ДемоСоглашенияСКлиентамиТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТорговыеПредложения КАК ТорговыеПредложения
	|		ПО _ДемоСоглашенияСКлиентамиТовары.Ссылка = ТорговыеПредложения.ТорговоеПредложение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыБизнесСеть КАК СоответствиеПоНоменклатуре
	|		ПО _ДемоСоглашенияСКлиентамиТовары.Номенклатура = СоответствиеПоНоменклатуре.ОбъектСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыБизнесСеть КАК СоответствиеПоВидам
	|		ПО _ДемоСоглашенияСКлиентамиТовары.Номенклатура.ВидНоменклатуры = СоответствиеПоВидам.ОбъектСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыБизнесСеть КАК СоответствиеПоИерархии
	|		ПО _ДемоСоглашенияСКлиентамиТовары.Номенклатура.Родитель = СоответствиеПоИерархии.ОбъектСопоставления
	|ГДЕ
	|	(_ДемоСоглашенияСКлиентамиТовары.Цена <> 0
	|			ИЛИ ЛОЖЬ В
	|				(ВЫБРАТЬ
	|					ТорговыеПредложения.ПубликоватьЦены КАК ПубликоватьЦены
	|				ИЗ
	|					ТорговыеПредложения КАК ТорговыеПредложения))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Артикул КАК Артикул,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.УпаковкаНаименование КАК УпаковкаНаименование,
	|	Товары.УпаковкаКод КАК УпаковкаКод,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.Наименование КАК Наименование,
	|	Товары.Цена КАК Цена,
	|	Товары.ВалютаКод КАК ВалютаКод,
	|	Товары.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	Товары.УпаковкаЧислитель КАК УпаковкаЧислитель,
	|	Товары.УпаковкаЗнаменатель КАК УпаковкаЗнаменатель,
	|	Товары.Картинка КАК Картинка,
	|	Товары.Расширение КАК Расширение,
	|	Товары.ДатаИзмененияКартинки КАК ДатаИзмененияКартинки,
	|	Товары.ОбъектСопоставления КАК ОбъектСопоставления,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
	|	Товары.ТорговоеПредложение КАК ТорговоеПредложение,
	|	Товары.Организация КАК Организация,
	|	Товары.Количество КАК Количество,
	|	Товары.Остаток КАК Остаток
	|ИЗ
	|	Товары КАК Товары";
	
	ТекстСвойства =
	"ВЫБРАТЬ
	|	Товары.ОбъектСопоставления КАК ОбъектСопоставления,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	СоответствиеРеквизитовБизнесСеть.ПредставлениеРеквизитаКатегории КАК Наименование,
	|	СоответствиеРеквизитовБизнесСеть.ИдентификаторРеквизитаКатегории КАК ИдентификаторРеквизитаКатегории,
	|	ДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ДополнительныеРеквизиты.Значение КАК Значение
	|ПОМЕСТИТЬ Свойства
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО (Товары.Номенклатура = ДополнительныеРеквизиты.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовБизнесСеть КАК СоответствиеРеквизитовБизнесСеть
	|		ПО (Товары.ОбъектСопоставления = СоответствиеРеквизитовБизнесСеть.ОбъектСопоставления)
	|			И ДополнительныеРеквизиты.Свойство = СоответствиеРеквизитовБизнесСеть.РеквизитОбъекта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.ОбъектСопоставления,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	СоответствиеРеквизитовБизнесСеть.ПредставлениеРеквизитаКатегории,
	|	СоответствиеРеквизитовБизнесСеть.ИдентификаторРеквизитаКатегории,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	|		ПО Товары.Характеристика = ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовБизнесСеть КАК СоответствиеРеквизитовБизнесСеть
	|		ПО Товары.ОбъектСопоставления = СоответствиеРеквизитовБизнесСеть.ОбъектСопоставления
	|			И (ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство = СоответствиеРеквизитовБизнесСеть.РеквизитОбъекта)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.ОбъектСопоставления,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	СоответствиеРеквизитовБизнесСеть.ПредставлениеРеквизитаКатегории,
	|	СоответствиеРеквизитовБизнесСеть.ИдентификаторРеквизитаКатегории,
	|	&Свойство,
	|	&Значение
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовБизнесСеть КАК СоответствиеРеквизитовБизнесСеть
	|		ПО Товары.ОбъектСопоставления = СоответствиеРеквизитовБизнесСеть.ОбъектСопоставления
	|			И (СоответствиеРеквизитовБизнесСеть.РеквизитОбъекта = &Свойство)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Свойства.Номенклатура КАК Номенклатура,
	|	Свойства.Характеристика КАК Характеристика,
	|	Свойства.Наименование КАК Наименование,
	|	Свойства.ИдентификаторРеквизитаКатегории КАК ИдентификаторРеквизитаКатегории,
	|	Свойства.Значение КАК Значение,
	|	СоответствиеЗначенийРеквизитовБизнесСеть.ИдентификаторЗначенияРеквизитаКатегории КАК ИдентификаторЗначения
	|ИЗ
	|	Свойства КАК Свойства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовБизнесСеть КАК СоответствиеЗначенийРеквизитовБизнесСеть
	|		ПО Свойства.ОбъектСопоставления = СоответствиеЗначенийРеквизитовБизнесСеть.ОбъектСопоставления
	|			И Свойства.Свойство = СоответствиеЗначенийРеквизитовБизнесСеть.РеквизитОбъекта
	|			И Свойства.Значение = СоответствиеЗначенийРеквизитовБизнесСеть.Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Штрихкоды.Штрихкод КАК Значение
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Владелец
	|			И Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения";
	
	// Удаление параметров запроса ТОВАРЫ.
	Если Не ИспользоватьПараметры Тогда
		ТекстТовары = СтрЗаменить(ТекстТовары, "И СостоянияСинхронизации.ТорговоеПредложение = &ТорговоеПредложение", "");
		ТекстТовары = СтрЗаменить(ТекстТовары, "&Период ", ""); // с пробелом.
	КонецЕсли;
	
	ТекстЗапроса = ТекстТовары;
	Если ФормироватьСвойства Тогда
		Разделитель = "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		ТекстЗапроса = ТекстЗапроса + Разделитель
			+ ТекстСвойства;
	Иначе
		
		// Удаление последнего запроса.
		МассивЗапросов = СтрРазделить(ТекстЗапроса, ";");
		МассивЗапросов.Удалить(МассивЗапросов.Количество() - 1);
		
		// Удаление использования временной таблицы ВыборкаНоменклатуры.
		ТекстЗапроса = СтрСоединить(МассивЗапросов, ";");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ Товары", "");
		
	КонецЕсли;
	
	// _Демо конец примера
	
КонецПроцедуры

// Заполнение адресов абонента по зарегистрированным организациям и складам.
//
// Параметры:
//  АдресаАбонента - ТаблицаЗначения - таблица для заполнения, см. ТорговыеПредложения.ОписаниеАдресовАбонента().
//
Процедура ЗаполнитьАдресаАбонента(АдресаАбонента) Экспорт
	
	// _Демо начало примера
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизацииКонтактнаяИнформация.Представление КАК Представление,
	|	ОрганизацииКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	ОрганизацииКонтактнаяИнформация.Вид КАК Вид,
	|	ОрганизацииКонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|		ПО (ОрганизацииКонтактнаяИнформация.Ссылка = ОрганизацииБизнесСеть.Организация)
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	_ДемоСкладыКонтактнаяИнформация.Представление,
	|	_ДемоСкладыКонтактнаяИнформация.ЗначенияПолей,
	|	_ДемоСкладыКонтактнаяИнформация.Вид,
	|	_ДемоСкладыКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник._ДемоСклады.КонтактнаяИнформация КАК _ДемоСкладыКонтактнаяИнформация
	|ГДЕ
	|	_ДемоСкладыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(Выборка.Представление) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаАдреса = АдресаАбонента.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаАдреса, Выборка);
		СтрокаАдреса.Описание = СтрШаблон("%1 (%2)", Выборка.Вид, Выборка.Ссылка);
	КонецЦикла;
	
	АдресаАбонента.Сортировать("Представление");
	
	// _Демо конец примера
	
КонецПроцедуры

// Получение способов доставки для заполнения по умолчанию значений при формировании заказов.
//
// Параметры:
//  СпособыДоставки - СписокЗначений - возможные значения способа доставки.
//                                     Первое значение является значением по умолчанию.
//  ВидДоставки	- Строка - значение вида доставки, варианты "Самовывоз", "Доставка".
//
Процедура ПолучитьСпособыДоставки(СпособыДоставки, ВидДоставки = Неопределено) Экспорт
	
	// _Демо начало примера
	
	СпособыДоставки = Новый СписокЗначений;
	Если ВРег(ВидДоставки) = "САМОВЫВОЗ" Тогда
		СпособыДоставки.Добавить(Перечисления._ДемоСпособыДоставки.Самовывоз);
	ИначеЕсли ВРег(ВидДоставки) = "ДОСТАВКА" Тогда 
		СпособыДоставки.Добавить(Перечисления._ДемоСпособыДоставки.Доставка);
	Иначе
		СпособыДоставки.Добавить(Перечисления._ДемоСпособыДоставки.Самовывоз);
		СпособыДоставки.Добавить(Перечисления._ДемоСпособыДоставки.Доставка);
	КонецЕсли;
	
	// _Демо конец примера
	
КонецПроцедуры

// Получение имени ставки НДС.
//
// Параметры:
//  Ссылка		 - СправочникСсылка, ПеречислениеСсылка - ссылка на значение ставки НДС прикладного решения.
//  ИмяСтавкиНДС - Строка - идентификатор ставки НДС.
//
Процедура ПолучитьИмяСтавкиНДС(Знач Ссылка, ИмяСтавкиНДС) Экспорт
	
	// _Демо начало примера
	
	ОбъектМетаданных = Ссылка.Метаданные();
	ИндексЗначения = Перечисления.СтавкиНДС.Индекс(Ссылка);
	Если ИндексЗначения <> -1 Тогда
		ИмяСтавкиНДС = ОбъектМетаданных.ЗначенияПеречисления[ИндексЗначения].Имя;
	Иначе
		ИмяСтавкиНДС = Неопределено;
	КонецЕсли;
	
	// _Демо конец примера
	
КонецПроцедуры

// Получение значения ставки НДС по идентификатору.
//
// Параметры:
//  ИмяСтавкиНДС - Строка - идентификатор ставки НДС.
//  Ссылка		 - СправочникСсылка, ПеречислениеСсылка - ссылка на значение ставки НДС прикладного решения.
//
Процедура ПолучитьЗначениеСтавкиНДС(Знач ИмяСтавкиНДС, Ссылка) Экспорт
	
	// _Демо начало примера
	
	Если Не ПустаяСтрока(ИмяСтавкиНДС)
		И Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления.Найти(ИмяСтавкиНДС) <> Неопределено Тогда
		Ссылка = Перечисления.СтавкиНДС[ИмяСтавкиНДС];
	Иначе
		Ссылка = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	// _Демо конец примера
	
КонецПроцедуры

// Инициализация динамического списка сопоставления номенклатуры в форме сопоставления номенклатуры.
// Заполняется переопределяемый текст запроса и свойства списка.
// См. форму обработки ТорговыеПредложения.СопоставлениеНоменклатуры.
//
// Параметры:
//  Список - ЭлементФормы - элемент динамического списка в форме.
//
Процедура ИнициализацияСпискаСопоставленияПоИерархии(Список) Экспорт
	
	// _Демо начало примера
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Наименование КАК Наименование,
	|	СоответствиеКатегорий.ПредставлениеКатегории КАК Категория,
	|	СоответствиеКатегорий.ИдентификаторКатегории КАК ИдентификаторКатегории
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыБизнесСеть КАК СоответствиеКатегорий
	|		ПО Номенклатура.Ссылка = СоответствиеКатегорий.ОбъектСопоставления
	|ГДЕ
	|	Номенклатура.ЭтоГруппа";
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица = "Справочник.Номенклатура";
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Список, СвойстваСписка);	
	
	// _Демо конец примера
	
КонецПроцедуры

// Инициализация динамического списка сопоставления номенклатуры в форме сопоставления номенклатуры.
// Заполняется переопределяемый текст запроса и свойства списка.
// См. форму обработки ТорговыеПредложения.СопоставлениеНоменклатуры.
//
// Параметры:
//  Список - ЭлементФормы - элемент динамического списка в форме.
//
Процедура ИнициализацияСпискаСопоставленияПоНоменклатуре(Список) Экспорт
	
	// _Демо начало примера
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ПредставлениеКатегории, ЕСТЬNULL(СоответствиеПоВидам.ПредставлениеКатегории, СоответствиеПоИерархии.ПредставлениеКатегории)) КАК Категория,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ИдентификаторКатегории, ЕСТЬNULL(СоответствиеПоВидам.ИдентификаторКатегории, СоответствиеПоИерархии.ИдентификаторКатегории)) КАК ИдентификаторКатегории,
	|	СоответствиеПоНоменклатуре.ПредставлениеКатегории КАК КатегорияПоНоменклатуре,
	|	СоответствиеПоНоменклатуре.ИдентификаторКатегории КАК ИдентификаторКатегорииПоНоменклатуре,
	|	СоответствиеПоВидам.ПредставлениеКатегории КАК КатегорияПоВидам,
	|	СоответствиеПоВидам.ИдентификаторКатегории КАК ИдентификаторКатегорииПоВидам,
	|	СоответствиеПоИерархии.ПредставлениеКатегории КАК КатегорияПоИерархии,
	|	СоответствиеПоИерархии.ИдентификаторКатегории КАК ИдентификаторКатегорииПоИерархии,
	|	Номенклатура.Родитель КАК Родитель,
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыБизнесСеть КАК СоответствиеПоНоменклатуре
	|		ПО Номенклатура.Ссылка = СоответствиеПоНоменклатуре.ОбъектСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыБизнесСеть КАК СоответствиеПоИерархии
	|		ПО Номенклатура.Родитель = СоответствиеПоИерархии.ОбъектСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыБизнесСеть КАК СоответствиеПоВидам
	|		ПО Номенклатура.ВидНоменклатуры = СоответствиеПоВидам.ОбъектСопоставления";
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица              = "Справочник.Номенклатура";
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	СвойстваСписка.ТекстЗапроса                 = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Список, СвойстваСписка);	
	
	// _Демо конец примера
	
КонецПроцедуры

// Получение доступности функционала запроса цен в прикладном решении.
//
// Параметры:
//  Результат - Булево - признак доступности функционала запроса цен.
//
Процедура ПолучитьДоступностьФункционалаЗапросаЦен(Результат) Экспорт
	
	// _Демо начало примера
	
	Результат = Истина;
	
	// _Демо конец примера
	
КонецПроцедуры

// Заполнение штрихкодов для выгрузки.
//
// Параметры:
//  Организации	 - Массив - список организация, для которых производится выгрузка.
//  РежимПоставщика - Булево - выгружать только данные по продажам.
//  РежимПокупателя - Булево - выгружать только данные по покупкам.
//  Штрихкоды	 - ТаблицаЗначений - данные по штрихкодам, 
//                 см. ТорговыеПредложения.ОбновитьПодсказкиТорговыеПредложения:
//    * Организация - СправочникСсылка - ссылка на организацию.
//    * Штрихкод - Строка - штрихкод товара.
//    * Наименование - Строка - наименование товара.
//    * РежимПоставщика - Булево - признак использования штрихкода в продажах.
//    * РежимПокупателя - Булево - признак использования штрихкода в закупках.
//
Процедура ЗаполнитьШтрихкодыДляВыгрузки(Знач Организации, Знач РежимПоставщика, Знач РежимПокупателя, Штрихкоды) Экспорт
	
	// _Демо начало примера
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&Организации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Организация КАК Организация,
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Владелец.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Штрихкоды.Владелец.Наименование
	|		ИНАЧЕ Штрихкоды.Владелец.НаименованиеПолное
	|	КОНЕЦ + ВЫБОР
	|		КОГДА Штрихкоды.Характеристика.Наименование ЕСТЬ NULL
	|				ИЛИ Штрихкоды.Характеристика.Наименование ПОДОБНО """"
	|			ТОГДА """"
	|		ИНАЧЕ "", "" + Штрихкоды.Характеристика.Наименование
	|	КОНЕЦ + ВЫБОР
	|		КОГДА Штрихкоды.ЕдиницаИзмерения.Наименование ЕСТЬ NULL
	|				ИЛИ Штрихкоды.ЕдиницаИзмерения.Наименование ПОДОБНО """"
	|			ТОГДА """"
	|		ИНАЧЕ "" ("" + Штрихкоды.ЕдиницаИзмерения.Наименование + "")""
	|	КОНЕЦ КАК Наименование,
	|	&РежимПоставщика КАК РежимПоставщика,
	|	&РежимПокупателя КАК РежимПокупателя
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды,
	|	Организации КАК Организации
	|ГДЕ
	|	Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
	|	И НЕ Штрихкоды.Владелец.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Организации",     Организации);
	Запрос.УстановитьПараметр("РежимПоставщика", РежимПоставщика);
	Запрос.УстановитьПараметр("РежимПокупателя", РежимПокупателя);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Штрихкоды.Добавить(), Выборка);
	КонецЦикла;
	
	// _Демо конец примера
	
КонецПроцедуры

// Добавление служебных колонок в таблицу товары.
//
// Параметры:
//  Ссылка - ДокументСсылка - ссылка на документ с товарами.
//  ПолучатьШтрихКоды - Булево - признак необходимости заполнения штрихкодов номенклатуры.
//                               Для значения Ложь, штрихкоды не заполняются.
//  Товары - ТаблицаЗначений - таблица с товарами, см. ТорговыеПредложения.ОписаниеТаблицыТоваровДляПоиска().
//
Процедура ПолучитьТоварыДляПодсказокПоСсылке(Знач Ссылка, Знач ПолучатьШтрихКоды, Товары) Экспорт
	
	// _Демо начало примера
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка._ДемоЗаказПоставщику") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	_ДемоЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
		|	_ДемоЗаказПоставщикуТовары.Характеристика КАК Характеристика,
		|	_ДемоЗаказПоставщикуТовары.ЕдиницаИзмерения КАК Упаковка,
		|	_ДемоЗаказПоставщикуТовары.Количество КАК Количество
		|ИЗ
		|	Документ._ДемоЗаказПоставщику.Товары КАК _ДемоЗаказПоставщикуТовары
		|ГДЕ
		|	_ДемоЗаказПоставщикуТовары.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Товары.Добавить(), Выборка);
		КонецЦикла;
		ДобавитьСлужебныеКолонкиТовары(Товары, ПолучатьШтрихКоды);
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
		|	Номенклатура.ЕдиницаИзмерения КАК Упаковка,
		|	1 КАК Количество
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Товары.Добавить(), Выборка);
		КонецЦикла;
		ДобавитьСлужебныеКолонкиТовары(Товары, ПолучатьШтрихКоды);
		
	КонецЕсли;
	
	// _Демо конец примера
	
КонецПроцедуры

// Выгружать относительные остатки товаров.
// Определяет возможность выгрузки в конфигурации торговых предложений
// с указанием остатков номенклатуры в значениях "мало-много".
//
// Параметры:
//  Результат - Булево - признак наличия функционала.
//
Процедура ВыгружатьОтносительныеОстаткиТоваров(Результат) Экспорт
	
	// _Демо начало примера
	
	// В демонстрационной базе, значение относительных остатков для товаров получается случайным образом.
	Результат = Истина;
	
	// _Демо конец примера
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Обработка переопределяемого метода с возвратом результата.
// Необходимо перенести логику клиент-серверного взаимодействия в модули прикладного решения.
//
// Параметры:
//  ИмяМетода				 - Строка - имя переопределяемого метода.
//  ДополнительныеПараметры	 - Структура - передаваемые параметры.
//  Результат				 - Произвольный - возвращаемое значение исполняемого метода.
// 
Процедура УдалитьОбработатьПереопределяемыйМетод(ИмяМетода, ДополнительныеПараметры, Результат) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// См. ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииИмениПрограммы.
Процедура ПриОпределенииИмениПрограммы(ИмяПрограммы) Экспорт
	
	ИмяПрограммы = "ClientEDOBase";
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	// _Демо начало примера
	Параметры.Вставить("ПоказатьНачалоРаботы", Ложь);
	Возврат;
	// _Демо конец примера
	
	ПоказатьНачалоРаботы = ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
		И НЕ Константы.ЛицензионноеСоглашениеПринято.Получить();
	Параметры.Вставить("ПоказатьНачалоРаботы", ПоказатьНачалоРаботы);
	
КонецПроцедуры

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Процедура ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты) Экспорт
	
	Объекты.Вставить(Метаданные.ПланыОбмена.ОбменУправлениеПредприятиемКлиентЭДО.ПолноеИмя(), "");
	Объекты.Вставить(Метаданные.ПланыОбмена.ОбменУправлениеТорговлей103КлиентЭДО.ПолноеИмя(), "");
	
КонецПроцедуры

// См. ЭлектроннаяПодписьПереопределяемый.ПриЗаполненииРеквизитовОрганизацииВЗаявленииНаСертификат.
Процедура ПриЗаполненииРеквизитовОрганизацииВЗаявленииНаСертификат(Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Параметры.Организация) Тогда
		Параметры.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		Если НЕ ЗначениеЗаполнено(Параметры.Организация) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Сведения = Неопределено; 
	ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(Параметры.Организация, Сведения);
	
	Параметры.ЭтоИндивидуальныйПредприниматель = Сведения.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель
		ИЛИ Сведения.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	
	Параметры.НаименованиеСокращенное = Сведения.ПолноеНаименование;
	Параметры.НаименованиеПолное      = Сведения.ПолноеНаименование;
	Параметры.ИНН                     = Сведения.ИНН;
	Параметры.КПП                     = Сведения.КПП;
	Параметры.ОГРН                    = Сведения.ОГРН;
	Параметры.РасчетныйСчет           = Сведения.НомерСчета;
	Параметры.БИК                     = Сведения.БИК;
	Параметры.КорреспондентскийСчет   = Сведения.КоррСчет;
	Параметры.Телефон                 = Сведения.Телефоны;
	Параметры.ЮридическийАдрес        = Сведения.ЮридическийАдресЗначенияПолей;
	
КонецПроцедуры

// См. ЭлектроннаяПодписьПереопределяемый.ПередНачаломРедактированияСертификатаКлюча.
Процедура ПередНачаломРедактированияСертификатаКлюча(Ссылка, Сертификат, ПараметрыРеквизитов) Экспорт
	
	Свойства = ЭлектроннаяПодписьКлиентСервер.СвойстваСубъектаСертификата(Сертификат);
	Если Не ЗначениеЗаполнено(Свойства.Организация)
		Или Не ЗначениеЗаполнено(Свойства.ИНН) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитОрганизация = ПараметрыРеквизитов.Добавить();
	РеквизитОрганизация.ИмяРеквизита = "Организация";
	РеквизитОрганизация.Видимость = Истина;
	РеквизитОрганизация.ПроверкаЗаполнения = Истина;
	
	ИНН = Свойства.ИНН;
	Если СтрНачинаетсяС(ИНН, "00") Тогда
		ИНН = Сред(ИНН, 3);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РеквизитОрганизация.ЗначениеЗаполнения = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеСвойствамиПереопределяемый.ЗаполнитьНаборыСвойствОбъекта.
Процедура ЗаполнитьНаборыСвойствОбъекта(Объект, ТипСсылки, НаборыСвойств, СтандартнаяОбработка, КлючНазначения) Экспорт
	
	Если ТипСсылки = Тип("СправочникСсылка.Номенклатура") Тогда
		ЗаполнитьНаборСвойствДляНоменклатуры(Объект, ТипСсылки, НаборыСвойств);
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда	
		ЗаполнитьНаборСвойствДляХарактеристики(Объект, ТипСсылки, НаборыСвойств);	
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак, что лицензионное соглашение принято.
//
Процедура УстановитьЛицензионноеСоглашениеПринято() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ЛицензионноеСоглашениеПринято.Установить(Истина);
	
КонецПроцедуры

// Возвращает индекс текущего статуса документа.
//
// Параметры:
//  Объект	 - ДокументОбъект.* - Документ, для которого вычисляется статус.
// 
// Возвращаемое значение:
//  Число - индекс статуса документа.
//
Функция СтатусДокумента(Объект) Экспорт
	
	Если Объект.ПометкаУдаления Тогда
		СтатусДокумента = 3;
	ИначеЕсли Объект.Проведен Тогда
		СтатусДокумента = 1;
	Иначе
		СтатусДокумента = 0;
	КонецЕсли;
	
	Возврат СтатусДокумента;
	
КонецФункции

// Проверка заполнения реквизитов без вывода сообщений пользователю.
//
// Параметры:
//  Объект				 - Документ.Объект.* - Документ, для которого необходимо выполнить проверку заполнения.
//  ПроверяемыеРеквизиты - Массив - Список путей к реквизитам, для которых будет выполнена проверка заполнения.
//  Отказ				 - Булево - Признак отказа от выполнения операции.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, ПроверяемыеРеквизиты, Отказ) Экспорт
	
	Если НЕ Объект.ДополнительныеСвойства.Свойство("ПроверитьЗаполнениеБезВыводаОшибок") Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		ПроверяемыеРеквизиты.Очистить();
		Возврат;
	КонецЕсли;
	
	РеквизитыТабличныхЧастей = Новый Соответствие;
	
	Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
		ПозицияРазделителя = СтрНайти(ПроверяемыйРеквизит, ".");
		Если ПозицияРазделителя > 0 Тогда
			ИмяТабличнойЧасти = Лев(ПроверяемыйРеквизит, ПозицияРазделителя - 1);
			ИмяРеквизита = Сред(ПроверяемыйРеквизит, ПозицияРазделителя + 1);
			МассивРеквизитов = РеквизитыТабличныхЧастей.Получить(ИмяТабличнойЧасти);
			Если МассивРеквизитов = Неопределено Тогда
				МассивРеквизитов = Новый Массив;
				МассивРеквизитов.Добавить(ИмяРеквизита);
				РеквизитыТабличныхЧастей.Вставить(ИмяТабличнойЧасти, МассивРеквизитов);
			Иначе
				МассивРеквизитов.Добавить(ИмяРеквизита);
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект[ПроверяемыйРеквизит]) Тогда
			Отказ = Истина;
			ПроверяемыеРеквизиты.Очистить();
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого РеквизитыТабличнойЧасти Из РеквизитыТабличныхЧастей Цикл
		ТабличнаяЧасть   = Объект[РеквизитыТабличнойЧасти.Ключ];
		МассивРеквизитов = РеквизитыТабличнойЧасти.Значение;
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[ИмяРеквизита]) Тогда
					Отказ = Истина;
					ПроверяемыеРеквизиты.Очистить();
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ПроверяемыеРеквизиты.Очистить();
	
КонецПроцедуры

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
//  ИмяСправочника - Строка - Имя справочника, объект которого надо найти.
//  ИмяРеквизита - Строка - Имя реквизита, по которому будет проведен поиск.
//  ЗначРеквизита - Произвольный - значение реквизита, по которому будет проведен поиск.
//  Результат - СправочникСсылка - Ссылка на найденный объект.
//  Владелец - СправочникСсылка - Ссылка на владельца для поиска в иерархическом справочнике.
//  ТолькоНеПомеченные - Булево - Исключить из поиска помеченные на удаление.
//
Процедура НайтиСсылкуНаОбъектПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначРеквизита, Результат, 
	Владелец = Неопределено,
	ТолькоНеПомеченные = Ложь) Экспорт
	
	Результат = Неопределено;
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита)
		И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИскСправочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК ИскСправочник
	|ГДЕ
	|	ИскСправочник." + ИмяРеквизита + " = &ЗначРеквизита";
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	
	Если ТолькоНеПомеченные Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.ПометкаУдаления = Ложь";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Представление организации в печатных формах.
//
// Параметры:
//  СписокСведений	 - Структура - Данные по организации.
//  Список			 - Строка - Список полей представления.
//  СПрефиксом		 - Булево - Признак наличия префикса.
// 
// Возвращаемое значение:
//  Строка - представление организации.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт

	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли;

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование", "");
	СоответствиеПараметров.Вставить("ИНН",                НСтр("ru = 'ИНН'"));
	СоответствиеПараметров.Вставить("КПП",                НСтр("ru = 'КПП'"));
	СоответствиеПараметров.Вставить("ЮридическийАдрес",   "");
	СоответствиеПараметров.Вставить("ФактическийАдрес",   "");
	СоответствиеПараметров.Вставить("Телефоны",           НСтр("ru = 'тел.:'"));
	СоответствиеПараметров.Вставить("НомерСчета",         НСтр("ru = 'р/с'"));
	СоответствиеПараметров.Вставить("Банк",               НСтр("ru = 'в банке'"));
	СоответствиеПараметров.Вставить("БИК",                НСтр("ru = 'БИК'"));
	СоответствиеПараметров.Вставить("КоррСчет",           НСтр("ru = 'к/с'"));
	СоответствиеПараметров.Вставить("КодПоОКПО",          НСтр("ru = 'Код по ОКПО'"));

	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 По ЧислоПараметров Цикл

		ПозЗапятой = СтрНайти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список       = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 

				Результат = Результат + ?(СПрефиксом = Истина, " " + Префикс + " ", "") + СтрокаДополнения;
			Исключение
				
				ТекстСообщения  = НСтр("ru='Не удалось определить значение параметра организации: %ИмяПараметра%'");
				ТекстСообщения  = СтрЗаменить(ТекстСообщения,"%ИмяПараметра%",ИмяПараметра);
				Сообщение       = Новый СообщениеПользователю();
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Сообщить();
				
			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	Возврат СокрЛП(Результат);

КонецФункции // ОписаниеОрганизации()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНаборСвойствДляНоменклатуры(Объект, ТипСсылки, НаборыСвойств)
	
	Строка = НаборыСвойств.Добавить();
	Строка.Набор = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие;
	Строка.ОбщийНабор = Истина;
	
	Если ТипЗнч(Объект) = ТипСсылки Тогда
		Номенклатура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект, "ЭтоГруппа, ВидНоменклатуры");
	Иначе
		Номенклатура = Объект;
	КонецЕсли;
	
	Если Номенклатура.ЭтоГруппа = Ложь Тогда
		Строка = НаборыСвойств.Добавить();
		Строка.Набор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Номенклатура.ВидНоменклатуры, "НаборСвойств");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаборСвойствДляХарактеристики(Объект, ТипСсылки, НаборыСвойств)
	
	Строка = НаборыСвойств.Добавить();
	Строка.Набор = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие;
	Строка.ОбщийНабор = Истина;
	
	Если ТипЗнч(Объект) = ТипСсылки Тогда
		Характеристика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "Владелец");
	Иначе
		Характеристика = Объект;
	КонецЕсли;
	
	ВидНоменклатуры = Неопределено;
	ТипВладельца = ТипЗнч(Характеристика.Владелец);
	Если ТипВладельца = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		ВидНоменклатуры = Характеристика.Владелец;
	ИначеЕсли ТипВладельца = Тип("СправочникСсылка.Номенклатура") Тогда
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Характеристика.Владелец, "ВидНоменклатуры");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		Строка = НаборыСвойств.Добавить();
		Строка.Набор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "НаборСвойствХарактеристик");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
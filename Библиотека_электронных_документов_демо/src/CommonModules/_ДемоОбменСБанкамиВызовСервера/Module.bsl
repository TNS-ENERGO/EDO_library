
////////////////////////////////////////////////////////////////////////////////
// _ДемоОбменСБанкамиВызовСервера: использование подсистемы ОбменСБанками.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает данные выписки банка в текстовом формате
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - сообщение обмена с выпиской банка
//  СсылкаНаХранилище - Строка - адрес временного хранилища, куда будет помещена текстовая выписка банка
//  МассивСчетов - Массив - массив банковских счетов, находящихся в выписке
//  Организация - ОпределяемыйТип.Организация - организация, для которой получена выписка
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - действующая настройка обмена с банком.
//
Процедура ПолучитьДанныеВыпискиБанкаТекстовыйФормат(Знач СообщениеОбмена, СсылкаНаХранилище, МассивСчетов = Неопределено, Организация = Неопределено, НастройкаОбмена = Неопределено) Экспорт
	
	Перем ТекстВыписки;
	
	РеквизитыСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "Организация, НастройкаОбмена, ВидЭД");
	
	Если НЕ РеквизитыСообщения.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка Тогда
		Возврат
	КонецЕсли;
	
	Организация = РеквизитыСообщения.Организация;
	НастройкаОбмена = РеквизитыСообщения.НастройкаОбмена;
	
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(СообщениеОбмена, СсылкаНаХранилище, МассивСчетов);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПередЗаписьюВладельцаЭлектронногоДокумента.
Процедура ПередЗаписьюВладельцаЭлектронногоДокумента(Объект, ИзменилисьКлючевыеРеквизиты, Знач СостояниеЭлектронногоДокумента, ПодлежитОбменуЭД, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(СостояниеЭлектронногоДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	ИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	КлючевыеРеквизиты = Новый Структура;

	Если ИмяОбъекта = "Документ._ДемоПлатежныйДокумент" Тогда
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, СчетОрганизации, СчетКонтрагента,
			|ОчередностьПлатежа, НазначениеПлатежа, СуммаДокумента, ВидПлатежа, ПлатежВБюджет, СтатусСоставителя,
			|ПоказательТипа, КодБК, КодОКАТО, ПоказательОснования, ПоказательПериода, ПоказательНомера, ПоказательДаты,
			|ВидПлатежа, Идентификатор, ТипПлатежногоДокумента, УсловиеОплаты, СрокАкцепта, ДатаОтсылкиДокументов");
		КлючевыеРеквизиты.Вставить("Шапка", СтрокаРеквизитовОбъекта);
	КонецЕсли;
	
	ЕстьИзменения = ИзмененыРеквизитыОбъекта(Объект, КлючевыеРеквизиты);
	
	Если ЕстьИзменения Тогда
		ИзменилисьКлючевыеРеквизиты = Истина;
		Если Не Объект.ЭтоНовый() И СостояниеЭлектронногоДокумента <> Перечисления.СостоянияОбменСБанками.НеСформирован
			И СостояниеЭлектронногоДокумента <> Перечисления.СостоянияОбменСБанками.ОшибкаПередачи
			И СостояниеЭлектронногоДокумента <> Перечисления.СостоянияОбменСБанками.Отклонен
			И СостояниеЭлектронногоДокумента <> Перечисления.СостоянияОбменСБанками.ТребуетсяПодтверждение Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИзмененыРеквизитыОбъекта(Знач Объект, Знач Реквизиты)
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	ТаблицаРеквизитов = ТаблицаРеквизитовОбъектов();
	
	ТекущийПорядок = -50;
	Для Каждого Реквизит Из Реквизиты Цикл
		
		СтрокаРеквизитов = ТаблицаРеквизитов.Добавить();
		СтрокаРеквизитов.Порядок  = ТекущийПорядок;
		СтрокаРеквизитов.ИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
		СтрокаРеквизитов.ИмяТабличнойЧасти = ?(Реквизит.Ключ = "Шапка", "", Реквизит.Ключ);
		СтрокаРеквизитов.РеквизитыОбъекта = Реквизит.Значение;
		СтрокаРеквизитов.СтруктураРеквизитовОбъекта = Новый Структура(Реквизит.Значение);
		ТекущийПорядок = ТекущийПорядок + 100;
		
	КонецЦикла;
	
	ТаблицаРеквизитов.Сортировать("Порядок Возр");
	
	Для Каждого СтрокаРеквизитов Из ТаблицаРеквизитов Цикл
		
		ЕстьИзмененияВерсийОбъектов = ОпределитьИзмененияВерсийОбъекта(Объект, СтрокаРеквизитов);
		
		Если ЕстьИзмененияВерсийОбъектов Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ТаблицаРеквизитовОбъектов()
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаРеквизитов.Колонки;
	Колонки.Добавить("Порядок",                    Новый ОписаниеТипов("Число"));
	Колонки.Добавить("ИмяОбъекта",                 Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИмяТабличнойЧасти",          Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("РеквизитыОбъекта",           Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("СтруктураРеквизитовОбъекта", Новый ОписаниеТипов("Структура"));
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

Функция ОпределитьИзмененияВерсийОбъекта(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Если ПустаяСтрока(СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти) Тогда
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = РеквизитыРегистрацииШапкиДоИзменения(Объект,
			СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = РеквизитыРегистрацииШапкиПослеИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
	Иначе
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = РеквизитыРегистрацииТабличнойЧастиДоИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = РеквизитыРегистрацииТабличнойЧастиПослеИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
	КонецЕсли;
	
	Возврат НЕ ТаблицыРеквизитовОбъектовОдинаковые(ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения,
												   ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения,
												   СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
	
КонецФункции

// Проверяет переданные таблицы реквизитов на совпадения.
//
// Параметры:
//  Таблица1 - ТаблицаЗначений - первая таблица проверки, реквизиты, которые надо проверить на совпадение.
//  Таблица2 - ТаблицаЗначений - вторая таблица проверки.
//  РеквизитыОбъекта - Строка - реквизиты, перечисленные через запятую.
//  ДопПараметры - Структура - структура дополнительных параметров, по которым надо проводить сравнение.
//
Функция ТаблицыРеквизитовОбъектовОдинаковые(Таблица1, Таблица2, РеквизитыОбъекта, ДопПараметры = Неопределено)
	
	ДобавитьИтераторТаблице(Таблица1, +1);
	ДобавитьИтераторТаблице(Таблица2, -1);
	
	ТаблицаРезультат = Таблица1.Скопировать();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица2, ТаблицаРезультат);
	
	// Начало
	// Данный фрагмент используется для конфигураций, имеющих один документ для создания платежных поручений и отражения операции в выписке.
	// При получении выписки Сбербанка символ перевода строки заменен на пробел в назначении платежа на стороне банка.
	КоличествоКолонок = ТаблицаРезультат.Колонки.Количество();
	Для Каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
		Для Индекс = 0 По КоличествоКолонок - 1 Цикл
			Если ТипЗнч(СтрокаТаблицы.Получить(Индекс)) = Тип("Строка") Тогда
				СтрокаТаблицы.Установить(Индекс, СтрЗаменить(СтрокаТаблицы.Получить(Индекс), Символ(10), " "));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// Конец
	
	ТаблицаРезультат.Свернуть(РеквизитыОбъекта, "ИтераторТаблицыРеквизитовОбъекта");
	
	КоличествоОдинаковыхСтрок = ТаблицаРезультат.НайтиСтроки(Новый Структура("ИтераторТаблицыРеквизитовОбъекта", 0)).Количество();
	
	КоличествоСтрокТаблицы = ТаблицаРезультат.Количество();
	ПризнакСовпадения = КоличествоОдинаковыхСтрок = КоличествоСтрокТаблицы;
	
	Если НЕ ПризнакСовпадения И ЗначениеЗаполнено(ДопПараметры) Тогда
		Если ДопПараметры.Свойство("ИмяТабличнойЧасти") Тогда
			ИмяТабличнойЧасти = ДопПараметры.ИмяТабличнойЧасти;
		КонецЕсли;
		Если ДопПараметры.Свойство("СтрокаДереваСравнения") Тогда
			СтрокаДереваСравнения = ДопПараметры.СтрокаДереваСравнения;
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Шапка" Тогда
			
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = НСтр("ru ='Реквизиты шапки'");
			Для Каждого ТекСтрокаТаб1 Из Таблица1 Цикл
				Для Каждого ТекКолонка Из Таблица1.Колонки Цикл
					ИмяКолонки = ТекКолонка.Имя;
					Если ИмяКолонки = "ИтераторТаблицыРеквизитовОбъекта" Тогда
						Продолжить;
					КонецЕсли;
					НайденнаяСтрокаТаб2 = Таблица2.Найти( - ТекСтрокаТаб1.ИтераторТаблицыРеквизитовОбъекта,
						"ИтераторТаблицыРеквизитовОбъекта");
					Если НЕ ЗначениеЗаполнено(НайденнаяСтрокаТаб2) 
						ИЛИ	НайденнаяСтрокаТаб2[ИмяКолонки] = ТекСтрокаТаб1[ИмяКолонки] Тогда
						Продолжить;
					КонецЕсли;
					НовСтрокаДереваРеквизита = НовСтрокаДереваМесто.Строки.Добавить();
					НовСтрокаДереваРеквизита.Реквизит  = ИмяКолонки;
					НовСтрокаДереваЗнч            = НовСтрокаДереваРеквизита.Строки.Добавить();
					НовСтрокаДереваЗнч.ЗначениеБД = ТекСтрокаТаб1[ИмяКолонки];
					НовСтрокаДереваЗнч.ЗначениеЭД = НайденнаяСтрокаТаб2[ИмяКолонки];
					
				КонецЦикла;
			КонецЦикла;
		Иначе
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = СтрШаблон(НСтр("ru ='Табличная часть <%1>'"), ИмяТабличнойЧасти);
			НовСтрокаДереваРеквизита = НовСтрокаДереваМесто.Строки.Добавить();
			НовСтрокаДереваРеквизита.Реквизит = "<Изменена>";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПризнакСовпадения;
	
КонецФункции

Процедура ДобавитьИтераторТаблице(Таблица, ЗначениеИтератора)
	
	Таблица.Колонки.Добавить("ИтераторТаблицыРеквизитовОбъекта");
	Таблица.ЗаполнитьЗначения(ЗначениеИтератора, "ИтераторТаблицыРеквизитовОбъекта");
	
КонецПроцедуры

Функция РеквизитыРегистрацииТабличнойЧастиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Объект[СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти].Выгрузить(,
		СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
		
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция РеквизитыРегистрацииТабличнойЧастиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ "+ СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта + " ИЗ "
	+ СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + "." + СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти
	+ " КАК ТекущийОбъектИмяТабличнойЧасти
	|ГДЕ
	|	ТекущийОбъектИмяТабличнойЧасти.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция РеквизитыРегистрацииШапкиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Новый ТаблицаЗначений;
	
	СтруктураРеквизитовРегистрации = СтрокаТаблицыРеквизитовРегистрации.СтруктураРеквизитовОбъекта;
	Для Каждого РеквизитРегистрации Из СтруктураРеквизитовРегистрации Цикл
		ТаблицаРеквизитовРегистрации.Колонки.Добавить(РеквизитРегистрации.Ключ);
	КонецЦикла;
	
	СтрокаТаблицы = ТаблицаРеквизитовРегистрации.Добавить();
	Для Каждого РеквизитРегистрации Из СтруктураРеквизитовРегистрации Цикл
		
		СтрокаТаблицы[РеквизитРегистрации.Ключ] = Объект[РеквизитРегистрации.Ключ];
	КонецЦикла;
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция РеквизитыРегистрацииШапкиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ " + СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта + " ИЗ "
	+ СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + " КАК ТекущийОбъект
	|ГДЕ
	|	ТекущийОбъект.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

#КонецОбласти
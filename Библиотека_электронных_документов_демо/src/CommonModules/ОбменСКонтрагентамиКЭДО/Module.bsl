
#Область ПрограммныйИнтерфейс

///////////////////////////////////////////////////////////////////////////////
// Методы, переопределяющие поведение библиотеки БЭД.

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьАктуальныеВидыЭД.
Процедура ПолучитьАктуальныеВидыЭД(Массив) Экспорт
	
	// Для обмена по форматам ФНС.
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	Массив.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	Массив.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	Массив.Добавить(Перечисления.ВидыЭД.СчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	Массив.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	
	// Для обмена по форматам CML 2.
	Массив.Добавить(Перечисления.ВидыЭД.КаталогТоваров);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику.
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипИсточника);
	
	Если ТипИсточника = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		Реквизиты = "ВидДокумента, ВидОперации, Организация, Контрагент, ДоговорКонтрагента,
			|НомерИсправляемогоКорректировочногоДокумента, ДатаИсправляемогоКорректировочногоДокумента";
		
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
		Иначе
			ЗначенияРеквизитов = Новый Структура(Реквизиты);
			ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Источник);
		КонецЕсли;
		
		Если ЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОпераций.Корректировка
			ИЛИ (ЗначениеЗаполнено(ЗначенияРеквизитов.НомерИсправляемогоКорректировочногоДокумента)
				И ЗначениеЗаполнено(ЗначенияРеквизитов.ДатаИсправляемогоКорректировочногоДокумента)) Тогда
			ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
		ИначеЕсли ФорматCML Тогда
			Если ЗначенияРеквизитов.ВидДокумента = Перечисления.ВидыДокументов.АктВыполненныхРабот Тогда
				ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот;
			ИначеЕсли ЗначенияРеквизитов.ВидДокумента = Перечисления.ВидыДокументов.АктНаПередачуПрав Тогда
				ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
			ИначеЕсли ЗначенияРеквизитов.ВидДокумента = Перечисления.ВидыДокументов.ТоварнаяНакладная Тогда
				ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
			КонецЕсли;
		Иначе
			Если ЗначенияРеквизитов.ВидДокумента = Перечисления.ВидыДокументов.АктВыполненныхРабот Тогда
				ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
			ИначеЕсли ЗначенияРеквизитов.ВидДокумента = Перечисления.ВидыДокументов.АктНаПередачуПрав Тогда
				ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
			ИначеЕсли ЗначенияРеквизитов.ВидДокумента = Перечисления.ВидыДокументов.ТоварнаяНакладная Тогда
				ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЭД.ВидЭД              = ВидЭД;
		ПараметрыЭД.НаправлениеЭД      = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация        = ЗначенияРеквизитов.Организация;
		ПараметрыЭД.Контрагент         = ЗначенияРеквизитов.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		Реквизиты = "ВидДокумента, ВидОперации, Организация, Контрагент, ДоговорКонтрагента,
			|НомерИсправляемогоКорректировочногоДокумента, ДатаИсправляемогоКорректировочногоДокумента";
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
		Иначе
			ЗначенияРеквизитов = Новый Структура(Реквизиты);
			ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Источник);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
			Если ЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОпераций.Корректировка
				ИЛИ (ЗначениеЗаполнено(ЗначенияРеквизитов.НомерИсправляемогоКорректировочногоДокумента)
					И ЗначениеЗаполнено(ЗначенияРеквизитов.ДатаИсправляемогоКорректировочногоДокумента)) Тогда
				ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
			ИначеЕсли ФорматCML Тогда
				Если ЗначенияРеквизитов.ВидДокумента = Перечисления.ВидыДокументов.АктВыполненныхРабот Тогда
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот;
				ИначеЕсли ЗначенияРеквизитов.ВидДокумента = Перечисления.ВидыДокументов.АктНаПередачуПрав Тогда
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
				ИначеЕсли ЗначенияРеквизитов.ВидДокумента = Перечисления.ВидыДокументов.ТоварнаяНакладная Тогда
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
				КонецЕсли;
			Иначе
				Если ЗначенияРеквизитов.ВидДокумента = Перечисления.ВидыДокументов.АктВыполненныхРабот Тогда
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
				ИначеЕсли ЗначенияРеквизитов.ВидДокумента = Перечисления.ВидыДокументов.АктНаПередачуПрав Тогда
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
				ИначеЕсли ЗначенияРеквизитов.ВидДокумента = Перечисления.ВидыДокументов.ТоварнаяНакладная Тогда
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Иначе
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		КонецЕсли;
		
		ПараметрыЭД.Организация        = ЗначенияРеквизитов.Организация;
		ПараметрыЭД.Контрагент         = ЗначенияРеквизитов.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		Реквизиты = "ВидОперации, Организация, Контрагент, ДоговорКонтрагента,
			|НомерИсправляемогоКорректировочногоДокумента, ДатаИсправляемогоКорректировочногоДокумента";
		
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
		Иначе
			ЗначенияРеквизитов = Новый Структура(Реквизиты);
			ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Источник);
		КонецЕсли;
		
		Если ЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОпераций.Корректировка
			ИЛИ (ЗначениеЗаполнено(ЗначенияРеквизитов.НомерИсправляемогоКорректировочногоДокумента)
				И ЗначениеЗаполнено(ЗначенияРеквизитов.ДатаИсправляемогоКорректировочногоДокумента)) Тогда
			ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		
		ПараметрыЭД.ВидЭД              = ВидЭД;
		ПараметрыЭД.НаправлениеЭД      = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация        = ЗначенияРеквизитов.Организация;
		ПараметрыЭД.Контрагент         = ЗначенияРеквизитов.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		Реквизиты = "ВидОперации, Организация, Контрагент, ДоговорКонтрагента";
		
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
		Иначе
			ЗначенияРеквизитов = Новый Структура(Реквизиты);
			ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Источник);
		КонецЕсли;
		
		Если ЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОпераций.Корректировка Тогда
			ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		
		ПараметрыЭД.ВидЭД              = ВидЭД;
		ПараметрыЭД.НаправлениеЭД      = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация        = ЗначенияРеквизитов.Организация;
		ПараметрыЭД.Контрагент         = ЗначенияРеквизитов.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = ЗначенияРеквизитов.ДоговорКонтрагента;
	
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ОпределитьДокументЯвляетсяСчетомФактурой.
Процедура ОпределитьДокументЯвляетсяСчетомФактурой(ДокументСсылка, Результат) Экспорт
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Результат = ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученный");
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков.
Процедура ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца) Экспорт
	
	Владелец = Справочники.НоменклатураПоставщиков.ПустаяСсылка().Владелец;
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяРеквизитаВладельца = "Контрагент";
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьСоответствиеПеречислений.
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("НДС",       "СтавкиНДС");
	СоответствиеПеречислений.Вставить("ЮрФизЛицо", "ЮрФизЛицо");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСоответствиеСтавокНДС.
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
	Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
	Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
	Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
	Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
	Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
	Соответствие.Вставить("НДС исчисляется налоговым агентом", "НДС исчисляется налоговым агентом");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ДополнительнаяАналитикаКонтрагентовСправочникПартнеры.
Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	
	ИспользуетсяСправочникПартнеры = Ложь;
	
	// _Демо начало примера
	_ДемоОбменСКонтрагентами.ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры);
	// _Демо конец примера
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПодготовитьСтруктуруОбъектовКомандЭДО.
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт
	
	СоставКомандЭДО.Исходящие.Добавить("Документ.РеализацияТоваровУслуг");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетФактураВыданный");
	СоставКомандЭДО.Исходящие.Добавить("ЖурналДокументов.ИсходящиеДокументы");
	
	СоставКомандЭДО.Входящие.Добавить("Документ.ПоступлениеТоваровУслуг");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетФактураПолученный");
	СоставКомандЭДО.Входящие.Добавить("ЖурналДокументов.ВходящиеДокументы");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС.
Процедура ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	ТипДокумента = ТипЗнч(СсылкаНаОбъект);
	Если ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ДокументСсылкаСЧФ = СсылкаНаОбъект;
	Иначе
		ДокументСсылкаДОП = СсылкаНаОбъект;
		ДокументСсылкаСЧФ = Документы.СчетФактураВыданный.СчетФактураДокумента(СсылкаНаОбъект);
		Если НЕ ЗначениеЗаполнено(ДокументСсылкаСЧФ) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ВЫБОР
				|		КОГДА РеализацияТоваровУслугТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК СтавкаБезНДС
				|ИЗ
				|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
				|ГДЕ
				|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
				|
				|УПОРЯДОЧИТЬ ПО
				|	СтавкаБезНДС";
			Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() И Выборка.СтавкаБезНДС = 1 Тогда
				СтруктураЭД.Функция = "ДОП";
				ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ);
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС(ДокументСсылкаСЧФ, СтруктураЭД, ДеревоДанных, Отказ);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС.
Процедура ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	СтруктураДанных = Документы.РеализацияТоваровУслуг.ПолучитьДанныеДляЭД(СсылкаНаОбъект);
	ВыборкаШапки = СтруктураДанных.ВыборкаШапки;
	ВыборкаШапки.Следующий();
	
	Если ВыборкаШапки.ВидОперации = Перечисления.ВидыОпераций.Исправление Тогда
		
		// Обработка ошибки с открытием формы по навигационной ссылке.
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект, "НомерИсправления");
		ИмяФормы = "Документ.РеализацияТоваровУслуг.ФормаОбъекта";
		ПараметрыФормы = Новый Структура("Ключ", СсылкаНаОбъект);
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерИсправления", НавигационнаяСсылка, ИмяФормы, ПараметрыФормы);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
			ВыборкаШапки.НомерИсправления, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.Дата");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
			ВыборкаШапки.ДатаИсправления, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерИсходногоДокумента");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента",
			ВыборкаШапки.НомерИсходногоДокумента, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.ДатаИсходногоДокумента");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",
			ВыборкаШапки.ДатаИсходногоДокумента, ПараметрыОбработкиОшибок);
		
	Иначе
		// Обработка ошибки с открытием формы по навигационной ссылке.
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект, "НомерЭД");
		ИмяФормы = "Документ.РеализацияТоваровУслуг.ФормаОбъекта";
		ПараметрыФормы = Новый Структура("Ключ", СсылкаНаОбъект);
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект,
			"Объект.НомерЭД", НавигационнаяСсылка, ИмяФормы, ПараметрыФормы);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", ВыборкаШапки.Номер,
			ПараметрыОбработкиОшибок);
			
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
			"Объект.Дата", НавигационнаяСсылка, ИмяФормы, ПараметрыФормы);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",  ВыборкаШапки.Дата,
			ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаШапки.ИдентификаторГосКонтракта) Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
			"Объект.ИдентификаторГосКонтракта");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ВыборкаШапки.ИдентификаторГосКонтракта,
			ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки",
		ВыборкаШапки.ДокументОснование);
	
	ЗаполнитьДеревоДанныхУПД(СтруктураДанных, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеДляУПДИнформацииПокупателяФНС.
Процедура ЗаполнитьДанныеДляУПДИнформацииПокупателяФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование) = ТИП(Документ.ПоступлениеТоваровУслуг)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок
		|ПОМЕСТИТЬ ВТ_Основание
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
		|ГДЕ
		|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &ВладелецЭД
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Дата КАК Дата,
		|	ПоступлениеТоваровУслуг.ВидДокумента КАК ВидДокумента,
		|	ПоступлениеТоваровУслуг.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ПоступлениеТоваровУслуг.Организация.ИНН КАК ОрганизацияИНН,
		|	ПоступлениеТоваровУслуг.Организация.КПП КАК ОрганизацияКПП
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Основание КАК ВТ_Основание
		|		ПО ПоступлениеТоваровУслуг.Ссылка = ВТ_Основание.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетФактураПолученный.Дата,
		|	СчетФактураПолученный.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	СчетФактураПолученный.Организация.ИНН КАК ОрганизацияИНН,
		|	СчетФактураПолученный.Организация.КПП КАК ОрганизацияКПП
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Основание КАК ВТ_Основание
		|		ПО СчетФактураПолученный.Ссылка = ВТ_Основание.ДокументОснование";
	
	Запрос.УстановитьПараметр("ВладелецЭД", СтруктураЭД.ВладелецЭД);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДатаПолученияТоваров = ТекущаяДатаСеанса();
	СодержаниеОперации   = "-";
	СоставительДокумента = "-";
	Если НЕ РезультатыЗапроса[1].Пустой() Тогда
		
		Выборка = РезультатыЗапроса[1].Выбрать();
		Выборка.Следующий();
		
		ДатаПолученияТоваров = Выборка.Дата;
		
		СоставительДокумента = ?(ЗначениеЗаполнено(Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН, Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН %2'"),
				Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН));
		
		Если Выборка.ВидДокумента = Перечисления.ВидыДокументов.ТоварнаяНакладная
			ИЛИ Выборка.ВидДокумента = Перечисления.ВидыДокументов.ТоварнаяНакладная Тогда
			СодержаниеОперации = НСтр("ru = 'Товары принял без претензий'");
		ИначеЕсли Выборка.ВидДокумента = Перечисления.ВидыДокументов.АктВыполненныхРабот Тогда
			СодержаниеОперации = НСтр("ru = 'Услуги получены, претензий нет.'");
		ИначеЕсли Выборка.ВидДокумента = Перечисления.ВидыДокументов.АктНаПередачуПрав Тогда
			СодержаниеОперации = НСтр("ru = 'Имущественные права получены, претензий нет.'");
		КонецЕсли;
		
	ИначеЕсли НЕ РезультатыЗапроса[2].Пустой() Тогда
		
		Выборка = РезультатыЗапроса[2].Выбрать();
		Выборка.Следующий();
		
		ДатаПолученияТоваров = Выборка.Дата;
		
		СоставительДокумента = ?(ЗначениеЗаполнено(Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН, Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН %2'"),
				Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН));
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СоставительДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияТоваров", ДатаПолученияТоваров);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС.
Процедура ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	СтруктураДанных = Документы.СчетФактураВыданный.ПолучитьДанныеДляЭД(СсылкаНаОбъект);
	ВыборкаШапки = СтруктураДанных.ВыборкаШапки;
	ВыборкаШапки.Следующий();
	
	Если ВыборкаШапки.ВидДокумента = Перечисления.ВидыДокументов.СчетФактураНаАванс Тогда
		СтруктураЭД.Функция = "СЧФ";
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаСчетаФактуры", СсылкаНаОбъект);
	
	Если ВыборкаШапки.ВидОперации = Перечисления.ВидыОпераций.Исправление Тогда
		
		// Обработка ошибки с открытием формы по навигационной ссылке.
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект, "НомерИсправления");
		ИмяФормы = "Документ.РеализацияТоваровУслуг.ФормаОбъекта";
		ПараметрыФормы = Новый Структура("Ключ", СсылкаНаОбъект);
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерИсправления", НавигационнаяСсылка, ИмяФормы, ПараметрыФормы);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
			ВыборкаШапки.НомерИсправления, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.Дата");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
			ВыборкаШапки.ДатаИсправления, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерИсходногоДокумента");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента",
			ВыборкаШапки.НомерИсходногоДокумента, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.ДатаИсходногоДокумента");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",
			ВыборкаШапки.ДатаИсходногоДокумента, ПараметрыОбработкиОшибок);
		
	Иначе
		// Обработка ошибки с открытием формы по навигационной ссылке.
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект, "НомерЭД");
		ИмяФормы = "Документ.РеализацияТоваровУслуг.ФормаОбъекта";
		ПараметрыФормы = Новый Структура("Ключ", СсылкаНаОбъект);
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект,
			"Объект.НомерЭД", НавигационнаяСсылка, ИмяФормы, ПараметрыФормы);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", ВыборкаШапки.Номер,
			ПараметрыОбработкиОшибок);
			
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
			"Объект.Дата", НавигационнаяСсылка, ИмяФормы, ПараметрыФормы);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",  ВыборкаШапки.Дата,
			ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаШапки.ИдентификаторГосКонтракта) Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
			"Объект.ИдентификаторГосКонтракта");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ВыборкаШапки.ИдентификаторГосКонтракта,
			ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	Если ВыборкаШапки.ВидДокумента = Перечисления.ВидыДокументов.СчетФактураНаАванс Тогда
		ВидСчетаФактуры = "Авансовый";
	Иначе
		ВидСчетаФактуры = "Реализация";
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", ВидСчетаФактуры);
	
	МассивОснований = Новый Массив;
	Если СтруктураДанных.Свойство("ВыборкаОснований") Тогда
		
		ВыборкаОснований = СтруктураДанных.ВыборкаОснований;
		Пока ВыборкаОснований.Следующий() Цикл
			МассивОснований.Добавить(ВыборкаОснований.ДокументОснование);
		КонецЦикла;
		
		СтруктураДанныхОснований = Документы[МассивОснований[0].Метаданные().Имя].ПолучитьДанныеДляЭД(МассивОснований);
		Если СтруктураДанныхОснований.ВыборкаШапки.Следующий() Тогда
			ЗаполнитьДеревоДанныхУПД(СтруктураДанныхОснований, СтруктураЭД, ДеревоДанных);
		КонецЕсли;
		
	Иначе
		ЗаполнитьДеревоДанныхУПД(СтруктураДанных, СтруктураЭД, ДеревоДанных);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаШапки.СчетФактураОснование) Тогда
		МассивОснований.Добавить(ВыборкаШапки.СчетФактураОснование);
	КонецЕсли;
	
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		СсылкаНаОбъект, "Объект.СчетФактураОснование");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры",
		МассивОснований, ПараметрыОбработкиОшибок);
	
	Если СтруктураДанных.Свойство("ВыборкаПРД") Тогда
		
		ПлатежныеДокументы = Новый ТаблицаЗначений;
		ПлатежныеДокументы.Колонки.Добавить("НомерСтроки");
		ПлатежныеДокументы.Колонки.Добавить("НомерПРД");
		ПлатежныеДокументы.Колонки.Добавить("ДатаПРД");
		
		ВыборкаПРД = СтруктураДанных.ВыборкаПРД;
		Пока ВыборкаПРД.Следующий() Цикл
			НоваяСтрока = ПлатежныеДокументы.Добавить();
			НоваяСтрока.НомерСтроки = ВыборкаПРД.НомерСтроки;
			НоваяСтрока.НомерПРД    = ВыборкаПРД.НомерПлатежноРасчетногоДокумента;
			НоваяСтрока.ДатаПРД     = ВыборкаПРД.ДатаПлатежноРасчетногоДокумента;
		КонецЦикла;
		
		// Дополним таблицу платежных документов параметрами обработки ошибок.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ПлатежныеДокументы,
			"НомерПРД", СсылкаНаОбъект, "Объект.ПлатежноРасчетныеДокументы.НомерПлатежноРасчетногоДокумента",, "НомерСтроки");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ПлатежныеДокументы,
			"ДатаПРД", СсылкаНаОбъект, "Объект.ПлатежноРасчетныеДокументы.ДатаПлатежноРасчетногоДокумента",, "НомерСтроки");
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежныеДокументы, "ПлатежноРасчетныеДокументы");
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеДляУКДИнформацияПродавцаФНС.
Процедура ЗаполнитьДанныеДляУКДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	ТипДокумента = ТипЗнч(СсылкаНаОбъект);
	Если ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ДокументСсылкаКСЧФ = СсылкаНаОбъект;
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
			|ИЗ
			|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
			|ГДЕ
			|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаКСЧФ);
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДокументСсылкаДИС = Неопределено;
		Если Выборка.Следующий() Тогда
			ДокументСсылкаДИС = Выборка.ДокументОснование;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДокументСсылкаДИС) Тогда
			ШаблонСообщения = НСтр("ru = 'Для %1 универсальный корректировочный документ не применяется.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ДокументСсылкаКСЧФ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	Иначе
		ДокументСсылкаДИС = СсылкаНаОбъект;
		ДокументСсылкаКСЧФ = Документы.СчетФактураВыданный.СчетФактураДокумента(СсылкаНаОбъект);
		Если НЕ ЗначениеЗаполнено(ДокументСсылкаКСЧФ) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДанныеДляКСЧФИнформацияПродавцаФНС(ДокументСсылкаКСЧФ, СтруктураЭД, ДеревоДанных, Отказ);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеДляДИСИнформацияПродавцаФНС.
Процедура ЗаполнитьДанныеДляДИСИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	СтруктураДанных = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляЭД(СсылкаНаОбъект);
	ВыборкаШапки = СтруктураДанных.ВыборкаШапки;
	ВыборкаШапки.Следующий();
	
	Если ВыборкаШапки.ВидОперации = Перечисления.ВидыОпераций.Исправление 
		И ЗначениеЗаполнено(ВыборкаШапки.НомерИсправляемогоКорректировочногоДокумента)
		И ЗначениеЗаполнено(ВыборкаШапки.ДатаИсправляемогоКорректировочногоДокумента) Тогда
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.НомерИсправляемогоКорректировочногоДокумента");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента",
			ВыборкаШапки.НомерИсправляемогоКорректировочногоДокумента, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.ДатаИсправляемогоКорректировочногоДокумента");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",
			ВыборкаШапки.ДатаИсправляемогоКорректировочногоДокумента, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерИсправления");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
			ВыборкаШапки.НомерИсправления, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.ДатаИсправления");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
			ВыборкаШапки.ДатаИсправления, ПараметрыОбработкиОшибок);
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерЭД");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента",
			ВыборкаШапки.Номер, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.Дата");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",
			ВыборкаШапки.Дата, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаШапки.НомерИсходногоДокумента)
		И ЗначениеЗаполнено(ВыборкаШапки.ДатаИсходногоДокумента) Тогда
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерИсходногоДокумента");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"НомерИсходногоДокумента", ВыборкаШапки.НомерИсходногоДокумента, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.ДатаИсходногоДокумента");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДатаИсходногоДокумента", ВыборкаШапки.ДатаИсходногоДокумента, ПараметрыОбработкиОшибок);
		
		Если ЗначениеЗаполнено(ВыборкаШапки.НомерИсправленияИсходногоДокумента)
			И ЗначениеЗаполнено(ВыборкаШапки.ДатаИсправленияИсходногоДокумента) Тогда
			
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				СсылкаНаОбъект, "Объект.НомерИсправленияИсходногоДокумента");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"НомерИсправленияИсходногоДокумента", ВыборкаШапки.НомерИсправленияИсходногоДокумента, ПараметрыОбработкиОшибок);
			
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				СсылкаНаОбъект, "Объект.ДатаИсправленияИсходногоДокумента");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"ДатаИсправленияИсходногоДокумента", ВыборкаШапки.ДатаИсправленияИсходногоДокумента, ПараметрыОбработкиОшибок);
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ВыборкаШапки.ДокументОснование);
	
	ЗаполнитьДеревоДанныхУКД(СтруктураДанных, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеДляУКДИнформацииПокупателяФНС.
Процедура ЗаполнитьДанныеДляУКДИнформацииПокупателяФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	СведенияОПокупателе = Неопределено; 
	ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация, СведенияОПокупателе);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СведенияОПокупателе.ПолноеНаименование);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСогласования", ТекущаяДатаСеанса());
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации",
		НСтр("ru = 'С изменением стоимости согласен'"));
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеДляКСЧФИнформацияПродавцаФНС.
Процедура ЗаполнитьДанныеДляКСЧФИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	СтруктураДанных = Документы.СчетФактураВыданный.ПолучитьДанныеДляЭД(СсылкаНаОбъект);
	ВыборкаШапки = СтруктураДанных.ВыборкаШапки;
	ВыборкаШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаКорректировочногоСчетаФактуры", СсылкаНаОбъект);
	Если ВыборкаШапки.ВидОперации = Перечисления.ВидыОпераций.Исправление 
		И ЗначениеЗаполнено(ВыборкаШапки.НомерИсправляемогоКорректировочногоДокумента)
		И ЗначениеЗаполнено(ВыборкаШапки.ДатаИсправляемогоКорректировочногоДокумента) Тогда
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерИсправляемогоКорректировочногоДокумента");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"НомерДокумента", ВыборкаШапки.НомерИсправляемогоКорректировочногоДокумента, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.ДатаИсправляемогоКорректировочногоДокумента");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДатаДокумента",  ВыборкаШапки.ДатаИсправляемогоКорректировочногоДокумента, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерИсправления");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
			ВыборкаШапки.НомерИсправления, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.ДатаИсправления");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
			ВыборкаШапки.ДатаИсправления, ПараметрыОбработкиОшибок);
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерЭД");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента",
			ВыборкаШапки.Номер, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.Дата");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",
			ВыборкаШапки.Дата, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаШапки.НомерИсходногоДокумента)
		И ЗначениеЗаполнено(ВыборкаШапки.ДатаИсходногоДокумента) Тогда
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерИсходногоДокумента");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"НомерИсходногоДокумента", ВыборкаШапки.НомерИсходногоДокумента, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.ДатаИсходногоДокумента");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДатаИсходногоДокумента",  ВыборкаШапки.ДатаИсходногоДокумента, ПараметрыОбработкиОшибок);
		
		Если ЗначениеЗаполнено(ВыборкаШапки.НомерИсправленияИсходногоДокумента)
			И ЗначениеЗаполнено(ВыборкаШапки.ДатаИсправленияИсходногоДокумента) Тогда
			
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				СсылкаНаОбъект, "Объект.НомерИсправленияИсходногоДокумента");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"НомерИсправленияИсходногоДокумента", ВыборкаШапки.НомерИсправленияИсходногоДокумента, ПараметрыОбработкиОшибок);
			
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				СсылкаНаОбъект, "Объект.ДатаИсправленияИсходногоДокумента");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"ДатаИсправленияИсходногоДокумента", ВыборкаШапки.ДатаИсправленияИсходногоДокумента, ПараметрыОбработкиОшибок);
		КонецЕсли;
		
	КонецЕсли;
	
	МассивОснований = Новый Массив;
	Если СтруктураДанных.Свойство("ВыборкаОснований") Тогда
		
		ВыборкаОснований = СтруктураДанных.ВыборкаОснований;
		Пока ВыборкаОснований.Следующий() Цикл
			МассивОснований.Добавить(ВыборкаОснований.ДокументОснование);
		КонецЦикла;
		
		СтруктураДанныхОснований = Документы[МассивОснований[0].Метаданные().Имя].ПолучитьДанныеДляЭД(МассивОснований);
		Если СтруктураДанныхОснований.ВыборкаШапки.Следующий() Тогда
			ЗаполнитьДеревоДанныхУКД(СтруктураДанныхОснований, СтруктураЭД, ДеревоДанных);
		КонецЕсли;
		
	Иначе
		ЗаполнитьДеревоДанныхУКД(СтруктураДанных, СтруктураЭД, ДеревоДанных);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаШапки.СчетФактураОснование) Тогда
		МассивОснований.Добавить(ВыборкаШапки.СчетФактураОснование);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДокументыОснованияСчетаФактуры", МассивОснований);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоТорг12ПокупательФНС.
Процедура ЗаполнитьДанныеПоТорг12ПокупательФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	ДатаПолученияТовара = ДатаПолученияТовараПриемкиРабот(СтруктураЭД);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, 
		"ДатаПолученияГруза", ДатаПолученияТовара);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоАкт501ЗаказчикФНС.
Процедура ЗаполнитьДанныеПоАкт501ЗаказчикФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	ДатаПриемкиРабот = ДатаПолученияТовараПриемкиРабот(СтруктураЭД);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, 
		"СведенияПоВыполнениюУслуг.ДатаЗаказа", ДатаПриемкиРабот);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоКорректировочномуДокументуПолучатель.
Процедура ЗаполнитьДанныеПоКорректировочномуДокументуПолучатель(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза", ТекущаяДатаСеанса());
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаТоваровПродавец.
Процедура ЗаполнитьДанныеПередачаТоваровПродавец(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	СтруктураДанных = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляЭД(СсылкаНаОбъект);
	ВыборкаШапки = СтруктураДанных.ВыборкаШапки;
	ВыборкаШапки.Следующий();
	
	Если ВыборкаШапки.ВидОперации = Перечисления.ВидыОпераций.Исправление Тогда
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерИсходногоДокумента");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной",
			ВыборкаШапки.НомерИсходногоДокумента, ПараметрыОбработкиОшибок);
			
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.ДатаИсходногоДокумента");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной",
			ВыборкаШапки.ДатаИсходногоДокумента, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерИсправления");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
			ВыборкаШапки.НомерИсправления, ПараметрыОбработкиОшибок);
			
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.Дата");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
			ВыборкаШапки.ДатаИсправления, ПараметрыОбработкиОшибок);
	Иначе
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерЭД");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной",
			ВыборкаШапки.Номер, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.Дата");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной",
			ВыборкаШапки.Дата, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперацииЭД);
		
	// Выводим общие реквизиты шапки
	СведенияОПоставщике = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапки.Организация) Тогда
		ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Организация, СведенияОПоставщике);
		
		Если ПравоДоступа("Чтение", Метаданные.Справочники.БанковскиеСчета)
			И ЗначениеЗаполнено(ВыборкаШапки.БанковскийСчетОрганизации) Тогда
			Справочники.БанковскиеСчета.ЗаполнитьРеквизитыБанковскогоСчета(СведенияОПоставщике, ВыборкаШапки.БанковскийСчетОрганизации);
		КонецЕсли;
		
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Поставщик");
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.Организация");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"Поставщик", СведенияОПоставщике, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	СведенияОПокупателе = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапки.Контрагент) Тогда
		ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Контрагент, СведенияОПокупателе);
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Плательщик");
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.Контрагент");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"Плательщик", СведенияОПокупателе, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаШапки.Грузоотправитель) Тогда
		СведенияОГрузоотправителе = Неопределено; 
		ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Грузоотправитель, СведенияОГрузоотправителе);
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузоотправителе, "Грузоотправитель");
	ИначеЕсли СведенияОПоставщике <> Неопределено Тогда
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Грузоотправитель");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаШапки.Грузополучатель) Тогда
		СведенияОГрузополучателе = Неопределено;
		ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Грузополучатель, СведенияОГрузополучателе);
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузополучателе, "Грузополучатель");
	ИначеЕсли СведенияОПокупателе <> Неопределено Тогда
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Грузополучатель");
	КонецЕсли;
	
	СтруктураДопДанных = Новый Структура;
	
	Если ЗначениеЗаполнено(ВыборкаШапки.Перевозчик) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаШапки.Перевозчик, "НаименованиеПолное, ИНН, КПП, ЮрФизЛицо");
		СведенияОПеревозчике = ЗначенияРеквизитов.НаименованиеПолное + ", " + ЗначенияРеквизитов.ИНН
			+ ?(ЗначенияРеквизитов.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "/" + ЗначенияРеквизитов.КПП, "");
		СтруктураДопДанных.Вставить("СведенияОПеревозчике", СведенияОПеревозчике);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаШапки.НомерТранспортнойНакладной)
		И ЗначениеЗаполнено(ВыборкаШапки.ДатаТранспортнойНакладной) Тогда
		
		ТранспортнаяНакладная = Новый ТаблицаЗначений;
		ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяНомер");
		ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяДата");
		
		НоваяСтрока = ТранспортнаяНакладная.Добавить();
		НоваяСтрока.ТранспортнаяНакладнаяНомер = ВыборкаШапки.НомерТранспортнойНакладной;
		НоваяСтрока.ТранспортнаяНакладнаяДата  = ВыборкаШапки.ДатаТранспортнойНакладной;
		
		// Дополним таблицу транспортных накладных параметрами обработки ошибок.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ТранспортнаяНакладнаяНомер", ВыборкаШапки.Ссылка, "Объект.НомерТранспортнойНакладной");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ТранспортнаяНакладнаяДата", ВыборкаШапки.Ссылка, "Объект.ДатаТранспортнойНакладной");
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТранспортнаяНакладная, "ТранспортнаяНакладная");
		
	КонецЕсли;
	
	// Обработка ошибки с указанием расширенного текста сообщения вместо параметров обработки ошибки.
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
	|	- в документе указана валюта,
	|	- для нее заполнен код по Общероссийскому классификатору валют.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ВыборкаШапки.ВалютаКод, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ВыборкаШапки.ИдентификаторГосКонтракта) Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
			"Объект.ИдентификаторГосКонтракта");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ИдГосКонтракта",
			ВыборкаШапки.ИдентификаторГосКонтракта, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаШапки.ДоговорКонтрагента) Тогда
		
		ОснованияОтгрузки = Новый ТаблицаЗначений;
		ОснованияОтгрузки.Колонки.Добавить("ДоговорКонтрагента");
		ОснованияОтгрузки.Колонки.Добавить("ДокОснованиеНаименование");
		ОснованияОтгрузки.Колонки.Добавить("ДокОснованиеНомер");
		ОснованияОтгрузки.Колонки.Добавить("ДокОснованиеДата");
		
		НоваяСтрока = ОснованияОтгрузки.Добавить();
		НоваяСтрока.ДоговорКонтрагента       = ВыборкаШапки.ДоговорКонтрагента;
		НоваяСтрока.ДокОснованиеНаименование = ВыборкаШапки.НаименованиеДоговора;
		НоваяСтрока.ДокОснованиеНомер        = ВыборкаШапки.НомерДоговора;
		НоваяСтрока.ДокОснованиеДата         = ВыборкаШапки.ДатаДоговора;
		
		// Дополним таблицу оснований параметрами обработки ошибок.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ДокОснованиеНаименование", "ДоговорКонтрагента", "Объект.Наименование");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ДокОснованиеНомер", "ДоговорКонтрагента", "Объект.НомерДоговора");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ДокОснованиеДата", "ДоговорКонтрагента", "Объект.ДатаДоговора");
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованияОтгрузки, "Основание");
		
	Иначе
		
		// Заполнение параметров ошибки для полей, для которых это обязательно при отсутствии данных для них.
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при заполнении основания отгрузки. Возможные причины:
		|	- в документе отгрузки не указан договор
		|	- в в договоре не указана дата'");
		ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДеревоДанных,
			"Основание.НомерСтроки.ДокОснованиеДата",ТекстОшибки);
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования", ВыборкаШапки.ДокументОснование);
	
	Если ЗначениеЗаполнено(ВыборкаШапки.ДатаОтгрузки) Тогда
		ДатаОтпуска = ВыборкаШапки.ДатаОтгрузки;
	Иначе
		ДатаОтпуска = ВыборкаШапки.Дата;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ДатаОтпуска", ДатаОтпуска);
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("Сорт");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
	ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
	ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
	ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
	ТаблицаТоваров.Колонки.Добавить("МассаНетто");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	НомерСтроки = 1;
	ВыборкаТоваров = СтруктураДанных.ВыборкаТоваров;
	Пока ВыборкаТоваров.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		НоваяСтрока.Номенклатура                 = ВыборкаТоваров.Номенклатура;
		НоваяСтрока.НаименованиеНоменклатуры     = ВыборкаТоваров.НоменклатураНаименование;
		НоваяСтрока.НаименованиеХарактеристики   = ВыборкаТоваров.ХарактеристикаНаименование;
		НоваяСтрока.Артикул                      = ВыборкаТоваров.НоменклатураАртикул;
		НоваяСтрока.КодТовара                    = ВыборкаТоваров.НоменклатураКод;
		НоваяСтрока.ЕдиницаИзмеренияНаименование = ВыборкаТоваров.ЕдиницаИзмеренияНаименование;
		НоваяСтрока.ЕдиницаИзмерения             = ВыборкаТоваров.ЕдиницаИзмерения;
		НоваяСтрока.БазоваяЕдиницаКод            = ВыборкаТоваров.ЕдиницаИзмеренияКод;
		НоваяСтрока.МассаНетто                   = ВыборкаТоваров.Количество;
		НоваяСтрока.Цена                         = ?(ВыборкаТоваров.Количество = 0, 0,
			Окр(ВыборкаТоваров.СуммаБезНДС / ВыборкаТоваров.Количество, 2));
			
		Если ВыборкаШапки.ОблагаетсяНДСУПокупателя Тогда
			НоваяСтрока.СуммаБезНДС = ВыборкаТоваров.СуммаСНДС;
			НоваяСтрока.СтавкаНДС   = "НДС исчисляется налоговым агентом";
			НоваяСтрока.СуммаНДС    = 0;
			НоваяСтрока.СуммаСНДС   = 0;
		Иначе
			НоваяСтрока.СуммаБезНДС = ВыборкаТоваров.СуммаБезНДС;
			НоваяСтрока.СтавкаНДС   = ВыборкаТоваров.СтавкаНДС;
			НоваяСтрока.СуммаНДС    = ВыборкаТоваров.СуммаНДС;
			НоваяСтрока.СуммаСНДС   = ВыборкаТоваров.СуммаСНДС;
		КонецЕсли;
		
		ДопДанныеТовара = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДопДанных);
		
		ДопДанныеТовара.Вставить("СтавкаНДС",   ВыборкаТоваров.СтавкаНДС);
		
		Если ЗначениеЗаполнено(ВыборкаТоваров.СуммаАкциза) Тогда
			ДопДанныеТовара.Вставить("СуммаАкциза", ВыборкаТоваров.СуммаАкциза);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаТоваров.НомерГТД) Тогда
			ДопДанныеТовара.Вставить("НомерТД", ВыборкаТоваров.НомерГТД);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаТоваров.СтранаПроисхожденияКод) Тогда
			ДопДанныеТовара.Вставить("КодСтраныПроисхождения", ВыборкаТоваров.СтранаПроисхожденияКод);
		КонецЕсли;
		
		НоваяСтрока.ДопДанныеПодписанные = ДопДанныеТовара;
		
	КонецЦикла;
	
	// Обработка ошибки через механизм сообщений пользователю.
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"КодТовара", "Номенклатура", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"НаименованиеНоменклатуры", "Номенклатура", "Объект.НаименованиеПолное");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"МассаНетто", ВыборкаТоваров.Ссылка, "Объект.Товары.Количество",, "НомерСтроки");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Цена", ВыборкаТоваров.Ссылка, "Объект.Товары.Цена",, "НомерСтроки");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СуммаБезНДС", ВыборкаТоваров.Ссылка, "Объект.Товары.Сумма",, "НомерСтроки");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СуммаНДС", ВыборкаТоваров.Ссылка, "Объект.Товары.СуммаНДС",, "НомерСтроки");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СуммаСНДС", ВыборкаТоваров.Ссылка, "Объект.Товары.Сумма",, "НомерСтроки");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияНаименование", "ЕдиницаИзмерения", "Объект.Наименование");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаКод", "ЕдиницаИзмерения", "Объект.Код");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	// Итоговые показатели по документу.
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить итоговые показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнены колонки ""Сумма"", ""НДС"", ""Количество""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей",
								ТаблицаТоваров.Количество(), ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто",
								ТаблицаТоваров.Итог("МассаНетто"), ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.МассаНетто",
								ТаблицаТоваров.Итог("МассаНетто"), ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаБезНДС",
								ТаблицаТоваров.Итог("СуммаБезНДС"), ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаНДС",
								ТаблицаТоваров.Итог("СуммаНДС"), ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаСНДС",
								ТаблицаТоваров.Итог("СуммаСНДС"), ТекстОшибки);
	
	Если ЗначениеЗаполнено(ВыборкаШапки.СведенияОТранспортировкеИГрузе) Тогда
		СтруктураДопДанных.Вставить("СведенияОТранспортировке", ВыборкаШапки.СведенияОТранспортировкеИГрузе)
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДопДанных) Тогда
		ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДанных, СтруктураДопДанных, Истина);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаРаботИсполнитель.
Процедура ЗаполнитьДанныеПередачаРаботИсполнитель(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	СтруктураДанных = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляЭД(СсылкаНаОбъект);
	ВыборкаШапки = СтруктураДанных.ВыборкаШапки;
	ВыборкаШапки.Следующий();
	
	Если ВыборкаШапки.ВидОперации = Перечисления.ВидыОпераций.Исправление Тогда
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерИсходногоДокумента");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта",
			ВыборкаШапки.НомерИсходногоДокумента, ПараметрыОбработкиОшибок);
			
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.ДатаИсходногоДокумента");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта",
			ВыборкаШапки.ДатаИсходногоДокумента, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерИсправления");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
			ВыборкаШапки.НомерИсправления, ПараметрыОбработкиОшибок);
			
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.Дата");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
			ВыборкаШапки.ДатаИсправления, ПараметрыОбработкиОшибок);
	Иначе
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерЭД");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта", ВыборкаШапки.Номер,
			ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.Дата");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта", ВыборкаШапки.Дата,
			ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперацииЭД);
	
	// Обработка ошибки с указанием расширенного текста сообщения вместо параметров обработки ошибки.
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
	|	- в документе указана валюта,
	|	- для нее заполнен код по Общероссийскому классификатору валют.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ВыборкаШапки.ВалютаКод, ТекстОшибки);
		
	Если ЗначениеЗаполнено(ВыборкаШапки.ДоговорКонтрагента) Тогда
		
		ОснованияОтгрузки = Новый ТаблицаЗначений;
		ОснованияОтгрузки.Колонки.Добавить("ДоговорКонтрагента");
		ОснованияОтгрузки.Колонки.Добавить("ДокОснованиеНаименование");
		ОснованияОтгрузки.Колонки.Добавить("ДокОснованиеНомер");
		ОснованияОтгрузки.Колонки.Добавить("ДокОснованиеДата");
		
		НоваяСтрока = ОснованияОтгрузки.Добавить();
		НоваяСтрока.ДоговорКонтрагента       = ВыборкаШапки.ДоговорКонтрагента;
		НоваяСтрока.ДокОснованиеНаименование = ВыборкаШапки.НаименованиеДоговора;
		НоваяСтрока.ДокОснованиеНомер        = ВыборкаШапки.НомерДоговора;
		НоваяСтрока.ДокОснованиеДата         = ВыборкаШапки.ДатаДоговора;
		
		// Дополним таблицу оснований параметрами обработки ошибок.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ДокОснованиеНаименование", "ДоговорКонтрагента", "Объект.Наименование");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ДокОснованиеНомер", "ДоговорКонтрагента", "Объект.НомерДоговора");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ДокОснованиеДата", "ДоговорКонтрагента", "Объект.ДатаДоговора");
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованияОтгрузки, "Основание");
		
	Иначе
		
		// Заполнение параметров ошибки для полей, для которых это обязательно при отсутствии данных для них.
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при заполнении основания отгрузки. Возможные причины:
		|	- в документе отгрузки не указан договор
		|	- в в договоре не указана дата'");
		ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДеревоДанных,
			"Основание.НомерСтроки.ДокОснованиеДата",ТекстОшибки);
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования", ВыборкаШапки.ДокументОснование);
	
	ТекстЗаголовка = НСтр("ru = 'Мы, нижеподписавшиеся, представитель ИСПОЛНИТЕЛЯ, с одной стороны и представитель ЗАКАЗЧИКА с другой
						|стороны, составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги).'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Заголовок", ТекстЗаголовка);
	
	СведенияОИсполнителе = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапки.Организация) Тогда
		ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Организация, СведенияОИсполнителе);
		Если ПравоДоступа("Чтение", Метаданные.Справочники.БанковскиеСчета)
			И ЗначениеЗаполнено(ВыборкаШапки.БанковскийСчетОрганизации) Тогда
			Справочники.БанковскиеСчета.ЗаполнитьРеквизитыБанковскогоСчета(СведенияОИсполнителе, ВыборкаШапки.БанковскийСчетОрганизации);
		КонецЕсли;
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОИсполнителе, "Исполнитель");
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.Организация");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"Исполнитель", СведенияОИсполнителе, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	СведенияОЗаказчике = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапки.Контрагент) Тогда
		ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Контрагент,  СведенияОЗаказчике);
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОЗаказчике, "Заказчик");
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.Контрагент");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"Заказчик", СведенияОЗаказчике, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	ТаблицаУслуг = Новый ТаблицаЗначений();
	ТаблицаУслуг.Колонки.Добавить("НомерСтроки");
	ТаблицаУслуг.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Цена");
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС");
	ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаСНДС");
	ТаблицаУслуг.Колонки.Добавить("Описание");
	ТаблицаУслуг.Колонки.Добавить("ДокументОснование");
	ТаблицаУслуг.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаУслуг.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	НомерСтроки = 1;
	ВыборкаТоваров = СтруктураДанных.ВыборкаТоваров;
	Пока ВыборкаТоваров.Следующий() Цикл
		
		НоваяСтрока = ТаблицаУслуг.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		НоваяСтрока.ИдТовараУКонтрагента         = Строка(ВыборкаТоваров.Номенклатура.УникальныйИдентификатор());
		НоваяСтрока.Номенклатура                 = ВыборкаТоваров.Номенклатура;
		НоваяСтрока.НаименованиеНоменклатуры     = ВыборкаТоваров.НоменклатураНаименование;
		НоваяСтрока.ЕдиницаИзмерения             = ВыборкаТоваров.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияКод          = ВыборкаТоваров.ЕдиницаИзмеренияКод;
		НоваяСтрока.ЕдиницаИзмеренияНаименование = ВыборкаТоваров.ЕдиницаИзмеренияНаименование;
		НоваяСтрока.Количество                   = ВыборкаТоваров.Количество;
		НоваяСтрока.Цена                       = ?(ВыборкаТоваров.Количество = 0, 0,
			Окр(ВыборкаТоваров.СуммаБезНДС / ВыборкаТоваров.Количество, 2));
		НоваяСтрока.СуммаБезНДС                  = ВыборкаТоваров.СуммаБезНДС;
		НоваяСтрока.СтавкаНДС                    = ВыборкаТоваров.СтавкаНДС;
		НоваяСтрока.СуммаНДС                     = ВыборкаТоваров.СуммаНДС;
		НоваяСтрока.СуммаСНДС                    = ВыборкаТоваров.СуммаСНДС;
		
	КонецЦикла;
	
	// Обработка ошибки через механизм сообщений пользователю.
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг,
		"НаименованиеНоменклатуры", "Номенклатура", "Объект.НаименованиеПолное");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг,
		"Количество", ВыборкаТоваров.Ссылка, "Объект.Товары.Количество",, "НомерСтроки");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг,
		"Цена", ВыборкаТоваров.Ссылка, "Объект.Товары.Цена",, "НомерСтроки");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг,
		"СуммаБезНДС", ВыборкаТоваров.Ссылка, "Объект.Товары.Сумма",, "НомерСтроки");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг,
		"СуммаНДС", ВыборкаТоваров.Ссылка, "Объект.Товары.СуммаНДС",, "НомерСтроки");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг,
		"СуммаСНДС", ВыборкаТоваров.Ссылка, "Объект.Товары.Сумма",, "НомерСтроки");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг,
		"ЕдиницаИзмеренияНаименование", "ЕдиницаИзмерения", "Объект.Наименование");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг,
		"ЕдиницаИзмеренияКод", "ЕдиницаИзмерения", "Объект.Код");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаУслуг, "ТаблицаУслуг");
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить итоговые показатели. Возможные причины:
		|	- не заполнена табличная часть ""Услуги""
		|	- не заполнены колонки ""Сумма"", ""НДС"", ""Количество""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаБезНДСИтого",
		ТаблицаУслуг.Итог("СуммаБезНДС"), ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаНДСИтого",
		ТаблицаУслуг.Итог("СуммаНДС"), ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаСНДСИтого",
		ВыборкаШапки.СуммаДокумента, ТекстОшибки);
	
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		СсылкаНаОбъект, "Объект.ДатаОтгрузки");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаИсполнения",
		ВыборкаШапки.ДатаОтгрузки, ПараметрыОбработкиОшибок);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеРеквизитыОрганизации.
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт

	СведенияОбОрганизации = Неопределено; 
	ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект, СведенияОбОрганизации);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбОрганизации, "Организация", Истина);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования", ТекущаяДатаСеанса());
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Наименование", "Реквизиты "+СсылкаНаОбъект.Наименование);

КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоКаталогуТоваровCML.
Процедура ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных, Отказ) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержитТолькоИзменения", Истина);
	
	СведенияОбОрганизации = Неопределено;
	ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(Организация, СведенияОбОрганизации);
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбОрганизации, "Владелец", Истина);
	
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТоварыКаталога);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТоварыКаталога, "Товары");
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД.
Процедура СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора,
			СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "", НайденныйОбъект = Неопределено) Экспорт
	
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		
		НайденныйОбъект = НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, 
			СсылкаНаВладельца, Записывать, СпособОбработки);
		
	ИначеЕсли (СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура) Тогда
		
		НайденныйОбъект = НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		
		СохранитьДанныеКаталогаТоваров(СтрокаДляЗагрузки, ДеревоРазбора);
		
	ИначеЕсли ВРег(СтрокаДляЗагрузки.ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		
		НайденныйОбъект = НовыйКонтрагент(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца)
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаТоваров.
Процедура НайтиСоздатьДокументПередачаТоваров(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "") Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Если СпособОбработки = "ВозвратТоваровОтПокупателя" Тогда
		ДокументОбъект.ВидДокумента = Перечисления.ВидыДокументов.НакладнаяНаВозврат;
	Иначе
		ДокументОбъект.ВидДокумента = Перечисления.ВидыДокументов.ТоварнаяНакладная;
	КонецЕсли;
	
	ДокументОбъект.НомерЭД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"НомерТоварнойНакладной");
	ДокументОбъект.НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"НомерИсправления");
	Если ЗначениеЗаполнено(ДокументОбъект.НомерИсправления) Тогда
		ВидОперации = Перечисления.ВидыОпераций.Исправление;
		
		ДокументОбъект.ДатаЭД  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаИсправления");
		ДокументОбъект.НомерИсходногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "НомерТоварнойНакладной");
		ДокументОбъект.ДатаИсходногоДокумента  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаТоварнойНакладной");
	Иначе
		ВидОперации = Перечисления.ВидыОпераций.Реализация;
		
		ДокументОбъект.ДатаЭД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаТоварнойНакладной");
	КонецЕсли;
	ДокументОбъект.ВидОперации = ВидОперации;
	
	ЭлектронноеВзаимодействиеКЭДО.НайтиСсылкуНаОбъект("Валюты", ДокументОбъект.Валюта,
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	
	ДокументОбъект.Организация = ОрганизацияПоДаннымЭД(ДеревоДанных, "Плательщик");
	ДокументОбъект.Контрагент  = КонтрагентПоДаннымЭД(ДеревоДанных, "Поставщик");
	
	ДокументОбъект.Грузоотправитель = КонтрагентПоДаннымЭД(ДеревоДанных, "Грузоотправитель");
	ДокументОбъект.Грузополучатель  = КонтрагентПоДаннымЭД(ДеревоДанных, "Грузополучатель");
	
	СведенияОПеревозчике = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДопДанные.Подписанные.СведенияОПеревозчике", Ложь);
	Если ЗначениеЗаполнено(СведенияОПеревозчике) Тогда
		Позиция = СтрНайти(СведенияОПеревозчике, ", ", НаправлениеПоиска.СКонца);
		Если Позиция > 0 Тогда
			СтрокаИННКПП = Сред(СведенияОПеревозчике, Позиция + 2);
			МассивИННКПП = СтрРазделить(СтрокаИННКПП, "/", Ложь);
			Количество = МассивИННКПП.Количество();
			Если Количество > 0 Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	Контрагенты.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	НЕ Контрагенты.ПометкаУдаления
					|	И Контрагенты.ИНН = &ИНН";
				Запрос.УстановитьПараметр("ИНН", МассивИННКПП[0]);
				Если Количество > 1 Тогда
					Запрос.Текст = Запрос.Текст + " И Контрагенты.КПП = &КПП";
					Запрос.УстановитьПараметр("КПП", МассивИННКПП[1]);
				КонецЕсли;
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					ДокументОбъект.Перевозчик = Выборка.Ссылка;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.ИдентификаторГосКонтракта = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ИдГосКонтракта");
	
	ТранспортнаяНакладная = ДеревоДанных.Строки.Найти("ТранспортнаяНакладная", "ПолныйПуть");
	Если ТранспортнаяНакладная <> Неопределено
		И ТранспортнаяНакладная.Строки.Количество() Тогда
		
		ДокументОбъект.НомерТранспортнойНакладной = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ТранспортнаяНакладная.Строки[0], "ТранспортнаяНакладная.НомерСтроки.ТранспортнаяНакладнаяНомер");
		
		ДокументОбъект.ДатаТранспортнойНакладной = ДатаИзСтроки(
			ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ТранспортнаяНакладная.Строки[0],
				"ТранспортнаяНакладная.НомерСтроки.ТранспортнаяНакладнаяДата"));
		
	КонецЕсли;
	
	ДокументыОснования = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования");
	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
		Если ТипЗнч(ДокументыОснования) = Тип("Массив") И ДокументыОснования.Количество() > 0 Тогда
			ДокументОбъект.ДокументОснование = ДокументыОснования[0];
		Иначе
			ДокументОбъект.ДокументОснование = ДокументыОснования;
		КонецЕсли;
	КонецЕсли;
	
	// Поиск и заполнения договора контрагента.
	ОснованияОтгрузки = ДеревоДанных.Строки.Найти("Основание", "ПолныйПуть");
	Если ОснованияОтгрузки <> Неопределено Тогда
		Для Каждого СтрокаОснованиеОтгрузки Из ОснованияОтгрузки.Строки Цикл
			ДоговорНомер = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОснованиеОтгрузки, "Основание.НомерСтроки.ДокОснованиеНомер");
			Если ЗначениеЗаполнено(ДоговорНомер) Тогда
				
				ДоговорДата = ДатаИзСтроки(ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
					СтрокаОснованиеОтгрузки, "Основание.НомерСтроки.ДокОснованиеДата"));
				
				СвойстваДоговора = Новый Структура;
				СвойстваДоговора.Вставить("НомерДоговора", ДоговорНомер);
				СвойстваДоговора.Вставить("ДатаДоговора", ДоговорДата);
				СвойстваДоговора.Вставить("Организация", ДокументОбъект.Организация);
				СвойстваДоговора.Вставить("Владелец", ДокументОбъект.Контрагент);
				
				ДоговорКонтрагента = Неопределено;
				ЭлектронноеВзаимодействиеКЭДО.НайтиСсылкуНаОбъект("ДоговорыКонтрагентов", ДоговорКонтрагента, , СвойстваДоговора);
				ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
				
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	// Поиск и заполнение банковского счета контрагента.
	НомерСчета = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"Поставщик.БанковскийСчет.НомерСчета");
	БИКБанка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"Поставщик.БанковскийСчет.БИК");
	ДокументОбъект.БанковскийСчетКонтрагента = БанковскийСчетКонтрагента(
		ДокументОбъект.Контрагент, БИКБанка, НомерСчета);
	
	ДокументОбъект.СведенияОТранспортировкеИГрузе = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДопДанные.Подписанные.СведенияОТранспортировке", Ложь);
	
	ОблагаетсяНДСУПокупателя = Ложь;
	
	ДокументОбъект.Товары.Очистить();
	
	СведенияОНоменклатуре = ТаблицаСведенийОНоменклатуреПоставщика();
	
	// Сведения таблицы.
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		
		МассаНетто = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.МассаНетто");
		КоличествоМест = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.КоличествоМест");
		НоваяСтрока.Количество = ?(ЗначениеЗаполнено(МассаНетто), МассаНетто, КоличествоМест);
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаТоваров.НомерСтроки.Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаТоваров.НомерСтроки.СуммаБезНДС");
		
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаТоваров.НомерСтроки.СтавкаНДС");
		Если СтавкаНДС = "НДС исчисляется налоговым агентом" Тогда
			НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
			ОблагаетсяНДСУПокупателя = Истина;
		Иначе
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
			НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаТоваров.НомерСтроки.СуммаСНДС");
			НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаТоваров.НомерСтроки.СуммаНДС");
		КонецЕсли;
		
		НоваяСтрока.СуммаАкциза = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.СуммаАкциза", Ложь);
		
		НоваяСтрока.НомерГТД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.НомерТД", Ложь);
		КодСтраны = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.КодСтраныПроисхождения", Ложь);
		Если ЗначениеЗаполнено(КодСтраны) Тогда
			НоваяСтрока.СтранаПроисхождения = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(КодСтраны);
		КонецЕсли;
		
		// Заполним номенклатуру поставщика.
		СтрокаНоменклатуры = СведенияОНоменклатуре.Добавить();
		СтрокаНоменклатуры.НомерСтроки = НоваяСтрока.НомерСтроки;
		СтрокаНоменклатуры.Владелец = ДокументОбъект.Контрагент;
		СтрокаНоменклатуры.Идентификатор = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаТоваров.НомерСтроки.ИдТовараУКонтрагента");
		СтрокаНоменклатуры.Наименование  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаТоваров.НомерСтроки.НаименованиеНоменклатуры");
		СтрокаНоменклатуры.ЕдиницаИзмеренияКод = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаТоваров.НомерСтроки.БазоваяЕдиницаКод");
		СтрокаНоменклатуры.ЕдиницаИзмеренияНаименование = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаТоваров.НомерСтроки.ЕдиницаИзмеренияНаименование");
		
	КонецЦикла;
	
	ЗаполнитьНоменклатуруПоставщика(ДокументОбъект.Товары, СведенияОНоменклатуре);
	
	ДокументОбъект.ОблагаетсяНДСУПокупателя = ОблагаетсяНДСУПокупателя;
	
	Если ОблагаетсяНДСУПокупателя Тогда
		ДокументОбъект.СуммаДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоПоНакладной.СуммаБезНДС");
	Иначе
		ДокументОбъект.СуммаДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоПоНакладной.СуммаСНДС");
	КонецЕсли;
	
	РежимЗаписиПроведение = Истина;
	Если ДокументОбъект.ВидОперации <> Перечисления.ВидыОпераций.Реализация Тогда
		РежимЗаписиПроведение = ЗначениеЗаполнено(ДокументОбъект.ДокументОснование);
	КонецЕсли;
	
	Если Записывать Тогда
		ЗаписатьДокумент(ДокументОбъект, РежимЗаписиПроведение);
		СсылкаНаВладельца = ДокументОбъект.Ссылка;
	Иначе // если функция вызвана из формы "Обработки.ОбменСКонтрагентами.ФормаЗагрузкиПросмотраЭД"
		СсылкаНаВладельца = ДокументОбъект;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаРезультатовРабот.
Процедура НайтиСоздатьДокументПередачаРезультатовРабот(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "") Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ДокументОбъект.ВидДокумента = Перечисления.ВидыДокументов.АктВыполненныхРабот;
	
	ДокументОбъект.НомерЭД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"НомерАкта");
	ДокументОбъект.НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"НомерИсправления");
	Если ЗначениеЗаполнено(ДокументОбъект.НомерИсправления) Тогда
		ВидОперации = Перечисления.ВидыОпераций.Исправление;
		
		ДокументОбъект.ДатаЭД  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаИсправления");
		ДокументОбъект.НомерИсходногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "НомерАкта");
		ДокументОбъект.ДатаИсходногоДокумента  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаАкта");
	Иначе
		ВидОперации = Перечисления.ВидыОпераций.Реализация;
		
		ДокументОбъект.ДатаЭД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаАкта");
	КонецЕсли;
	ДокументОбъект.ВидОперации = ВидОперации;
	
	ЭлектронноеВзаимодействиеКЭДО.НайтиСсылкуНаОбъект("Валюты", ДокументОбъект.Валюта,
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	
	ДокументОбъект.Контрагент  = КонтрагентПоДаннымЭД(ДеревоДанных, "Заказчик");
	ДокументОбъект.Организация = ОрганизацияПоДаннымЭД(ДеревоДанных, "Исполнитель");
	
	// Заполним основание.
	ДокументыОснования = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования");
	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
		Если ТипЗнч(ДокументыОснования) = Тип("Массив") И ДокументыОснования.Количество() > 0 Тогда
			ДокументОбъект.ДокументОснование = ДокументыОснования[0];
		Иначе
			ДокументОбъект.ДокументОснование = ДокументыОснования;
		КонецЕсли;
	КонецЕсли;
	
	// Поиск и заполнения договора контрагента.
	ОснованияОтгрузки = ДеревоДанных.Строки.Найти("Основание", "ПолныйПуть");
	Если ОснованияОтгрузки <> Неопределено Тогда
		Для Каждого СтрокаОснованиеОтгрузки Из ОснованияОтгрузки.Строки Цикл
			ДоговорНомер = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОснованиеОтгрузки, "Основание.НомерСтроки.ДокОснованиеНомер");
			Если ЗначениеЗаполнено(ДоговорНомер) Тогда
				
				ДоговорДата = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
					СтрокаОснованиеОтгрузки, "Основание.НомерСтроки.ДокОснованиеДата");
				
				СвойстваДоговора = Новый Структура;
				СвойстваДоговора.Вставить("НомерДоговора", ДоговорНомер);
				СвойстваДоговора.Вставить("ДатаДоговора", ДоговорДата);
				СвойстваДоговора.Вставить("Организация", ДокументОбъект.Организация);
				СвойстваДоговора.Вставить("Владелец", ДокументОбъект.Контрагент);
				
				ДоговорКонтрагента = Неопределено;
				ЭлектронноеВзаимодействиеКЭДО.НайтиСсылкуНаОбъект("ДоговорыКонтрагентов", ДоговорКонтрагента, , СвойстваДоговора);
				ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
				
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	// Поиск и заполнение банковского счета контрагента.
	НомерСчета = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"Заказчик.БанковскийСчет.НомерСчета");
	БИКБанка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"Заказчик.БанковскийСчет.БИК");
	ДокументОбъект.БанковскийСчетКонтрагента = БанковскийСчетКонтрагента(
		ДокументОбъект.Контрагент, БИКБанка, НомерСчета);
	
	ДокументОбъект.Товары.Очистить();
	
	СведенияОНоменклатуре = ТаблицаСведенийОНоменклатуреПоставщика();
	
	// Сведения таблицы.
	СведенияОбУслугах = ДеревоДанных.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");
	Для Каждого СведенияОбУслуге Из СведенияОбУслугах.Строки Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОбУслуге,
			"ТаблицаУслуг.НомерСтроки.СтавкаНДС");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОбУслуге,
			"ТаблицаУслуг.НомерСтроки.СуммаСНДС");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОбУслуге,
			"ТаблицаУслуг.НомерСтроки.СуммаНДС");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОбУслуге,
			"ТаблицаУслуг.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОбУслуге,
			"ТаблицаУслуг.НомерСтроки.Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОбУслуге,
			"ТаблицаУслуг.НомерСтроки.СуммаБезНДС");
		
		// Заполним номенклатуру поставщика.
		СтрокаНоменклатуры = СведенияОНоменклатуре.Добавить();
		СтрокаНоменклатуры.НомерСтроки = НоваяСтрока.НомерСтроки;
		СтрокаНоменклатуры.Владелец = ДокументОбъект.Контрагент;
		СтрокаНоменклатуры.Идентификатор = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОбУслуге,
			"ТаблицаУслуг.НомерСтроки.ИдТовараУКонтрагента");
		СтрокаНоменклатуры.Наименование  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОбУслуге,
			"ТаблицаУслуг.НомерСтроки.НаименованиеНоменклатуры");
		СтрокаНоменклатуры.ЕдиницаИзмеренияКод = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОбУслуге,
			"ТаблицаУслуг.НомерСтроки.ЕдиницаИзмеренияКод");
		СтрокаНоменклатуры.ЕдиницаИзмеренияНаименование = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОбУслуге,
			"ТаблицаУслуг.НомерСтроки.ЕдиницаИзмеренияНаименование");
		
	КонецЦикла;
	
	ЗаполнитьНоменклатуруПоставщика(ДокументОбъект.Товары, СведенияОНоменклатуре);
	
	ДокументОбъект.СуммаДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ОписаниеУслуги.СуммаСНДСИтого");
	
	РежимЗаписиПроведение = Истина;
	Если ДокументОбъект.ВидОперации <> Перечисления.ВидыОпераций.Реализация Тогда
		РежимЗаписиПроведение = ЗначениеЗаполнено(ДокументОбъект.ДокументОснование);
	КонецЕсли;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	Если Записывать Тогда
		ЗаписатьДокумент(ДокументОбъект, РежимЗаписиПроведение);
		СсылкаНаВладельца = ДокументОбъект.Ссылка;
	Иначе // если функция вызвана из формы "Обработки.ОбменСКонтрагентами.ФормаЗагрузкиПросмотраЭД"
		СсылкаНаВладельца = ДокументОбъект;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйПередаточныйДокумент.
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено,
	Записывать = Истина, СпособОбработки = Неопределено) Экспорт
	
	ПервичныйДокумент = Неопределено;
	СчетФактура = Неопределено;
	
	СпособОбработкиПервичногоДокумента = "";
	СпособОбработкиСчетаФактуры = "";
	
	Если ЗначениеЗаполнено(СпособОбработки) И ТипЗнч(СпособОбработки) = Тип("Структура") Тогда
		
		Если СпособОбработки.Свойство("ПервичныйДокумент") Тогда
			СпособОбработкиПервичногоДокумента = СпособОбработки.ПервичныйДокумент;
		КонецЕсли;
		
		Если СпособОбработки.Свойство("СчетФактура") Тогда
			СпособОбработкиСчетаФактуры = СпособОбработки.СчетФактура;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СсылкиНаВладельцев <> Неопределено Тогда
		Для Каждого Строка Из СсылкиНаВладельцев Цикл
			Если ТипЗнч(Строка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				СчетФактура = Строка;
			Иначе
				ПервичныйДокумент = Строка;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ДокументыУчета = Новый Массив;
	НайтиСоздатьУПДДокументОПередаче(ДеревоДанных, ПервичныйДокумент, Записывать, СпособОбработкиПервичногоДокумента);
	ДокументыУчета.Добавить(ПервичныйДокумент);
	
	// Заполним основание в СФ.
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
	Иначе
		ДокументыОснованияСчетаФактуры = Новый Массив;
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
	
	НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СчетФактура, Записывать, СпособОбработкиСчетаФактуры);
	ДокументыУчета.Добавить(СчетФактура);
	
	СсылкиНаВладельцев = ДокументыУчета;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУПДДокументОПередаче.
Процедура НайтиСоздатьУПДДокументОПередаче(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ДокументОбъект.НомерЭД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	ДокументОбъект.НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	Если ЗначениеЗаполнено(ДокументОбъект.НомерИсправления) Тогда
		ВидОперации = Перечисления.ВидыОпераций.Исправление;
		
		ДокументОбъект.ДатаЭД  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаИсправления");
		ДокументОбъект.НомерИсходногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "НомерДокумента");
		ДокументОбъект.ДатаИсходногоДокумента  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаДокумента");
	Иначе
		ВидОперации = Перечисления.ВидыОпераций.Реализация;
		
		ДокументОбъект.ДатаЭД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаДокумента");
	КонецЕсли;
	ДокументОбъект.ВидОперации = ВидОперации;
	
	ЭлектронноеВзаимодействиеКЭДО.НайтиСсылкуНаОбъект("Валюты", ДокументОбъект.Валюта,
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	
	ДокументОбъект.ИдентификаторГосКонтракта = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта");
	
	ДокументОбъект.Контрагент  = КонтрагентПоДаннымЭД(ДеревоДанных,  "СведенияОПродавце");
	ДокументОбъект.Организация = ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе");
	
	ГрузоотправительОнЖе = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "СведенияОГрузоотправителе.ОнЖе");
	
	Если ГрузоотправительОнЖе = Истина Тогда
		ДокументОбъект.Грузоотправитель = ДокументОбъект.Контрагент;
	Иначе
		ДокументОбъект.Грузоотправитель = КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОГрузоотправителе.Грузоотправитель");
	КонецЕсли;
	
	ДокументОбъект.Грузополучатель  = КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОГрузополучателе");
	ДокументОбъект.Перевозчик       = КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПеревозчике");
	
	ТранспортнаяНакладная = ДеревоДанных.Строки.Найти("ТранспортнаяНакладная", "ПолныйПуть");
	Если ТранспортнаяНакладная <> Неопределено
		И ТранспортнаяНакладная.Строки.Количество() Тогда
		
		ДокументОбъект.НомерТранспортнойНакладной = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ТранспортнаяНакладная.Строки[0], "ТранспортнаяНакладная.НомерСтроки.ТранспортнаяНакладнаяНомер");
		
		ДокументОбъект.ДатаТранспортнойНакладной = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ТранспортнаяНакладная.Строки[0], "ТранспортнаяНакладная.НомерСтроки.ТранспортнаяНакладнаяДата");
		
	КонецЕсли;
	
	ДокументОбъект.СведенияОТранспортировкеИГрузе = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "СведенияОТранспортировке");
	
	// Поиск и заполнение договора контрагента.
	ОснованияОтгрузки = ДеревоДанных.Строки.Найти("ОснованиеОтгрузкиТоваров", "ПолныйПуть");
	Если ОснованияОтгрузки <> Неопределено Тогда
		Для Каждого СтрокаОснованиеОтгрузки Из ОснованияОтгрузки.Строки Цикл
			ДоговорНомер = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОснованиеОтгрузки, "ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументНомер");
			Если ЗначениеЗаполнено(ДоговорНомер) Тогда
				
				ДоговорДата = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
					СтрокаОснованиеОтгрузки, "ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументДата");
				
				СвойстваДоговора = Новый Структура;
				СвойстваДоговора.Вставить("НомерДоговора", ДоговорНомер);
				СвойстваДоговора.Вставить("ДатаДоговора", ДоговорДата);
				СвойстваДоговора.Вставить("Организация", ДокументОбъект.Организация);
				СвойстваДоговора.Вставить("Владелец", ДокументОбъект.Контрагент);
				
				ДоговорКонтрагента = Неопределено;
				ЭлектронноеВзаимодействиеКЭДО.НайтиСсылкуНаОбъект("ДоговорыКонтрагентов", ДоговорКонтрагента, , СвойстваДоговора);
				ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
				
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	// Поиск и заполнение банковского счета контрагента.
	НомерСчета = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОПродавце.БанковскиеРеквизиты.НомерСчета");
	БИКБанка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОПродавце.БанковскиеРеквизиты.БИКБанка");
	ДокументОбъект.БанковскийСчетКонтрагента = БанковскийСчетКонтрагента(
		ДокументОбъект.Контрагент, БИКБанка, НомерСчета);
	
	// Сведения об основании.
	ДокументыОснованияДокументаОтгрузки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки");
	Если ЗначениеЗаполнено(ДокументыОснованияДокументаОтгрузки) Тогда
		ДокументОбъект.ДокументОснование = ДокументыОснованияДокументаОтгрузки[0];
	Иначе
		ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
		Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
			Для Каждого СтрокаСФ Из ДокументыОснованияСчетаФактуры Цикл
				Если ТипЗнч(СтрокаСФ) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					Для Каждого Строка Из СтрокаСФ.ДокументыОснования Цикл
						Если ЗначениеЗаполнено(Строка.ДокументОснование) Тогда
							ДокументОбъект.ДокументОснование = Строка.ДокументОснование;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьТовары = Ложь;
	ЕстьРаботы = Ложь;
	ЕстьПрава  = Ложь;
	
	ОблагаетсяНДСУПокупателя = Ложь;
	
	ДокументОбъект.Товары.Очистить();
	
	СведенияОНоменклатуре = ТаблицаСведенийОНоменклатуреПоставщика();
	
	// Сведения таблицы.
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		Признак = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Признак");
		
		Если Признак = "1" Тогда
			ЕстьТовары = Истина;
		ИначеЕсли Признак = "2" ИЛИ Признак = "3" Тогда
			ЕстьРаботы = Истина;
		ИначеЕсли Признак = "4" Тогда
			ЕстьПрава  = Истина;
		КонецЕсли;
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		
		НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.СуммаАкциза = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СуммаАкциза");
		
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		Если СтавкаНДС = "НДС исчисляется налоговым агентом" Тогда
			НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
			ОблагаетсяНДСУПокупателя = Истина;
		Иначе
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
			НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
			НоваяСтрока.СуммаНДС  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.СуммаНалога");
		КонецЕсли;
		
		СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
		
		Если СведенияОТаможеннойДекларации <> Неопределено
			И СведенияОТаможеннойДекларации.Строки.Количество() Тогда
			
			НоваяСтрока.НомерГТД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
				"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
			
			КодСтраны = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
				"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");
			
			Если ЗначениеЗаполнено(КодСтраны) Тогда
				НоваяСтрока.СтранаПроисхождения = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(КодСтраны);
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполним номенклатуру поставщика.
		СтрокаНоменклатуры = СведенияОНоменклатуре.Добавить();
		СтрокаНоменклатуры.НомерСтроки = НоваяСтрока.НомерСтроки;
		СтрокаНоменклатуры.Владелец = ДокументОбъект.Контрагент;
		СтрокаНоменклатуры.Идентификатор = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.ИдТовараУКонтрагента");
		СтрокаНоменклатуры.Наименование  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.ТоварНаименование");
		СтрокаНоменклатуры.ЕдиницаИзмеренияКод = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод");
		СтрокаНоменклатуры.ЕдиницаИзмеренияНаименование = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияНаименование");
		
	КонецЦикла;
	
	ЗаполнитьНоменклатуруПоставщика(ДокументОбъект.Товары, СведенияОНоменклатуре);
	
	ДокументОбъект.ОблагаетсяНДСУПокупателя = ОблагаетсяНДСУПокупателя;
	
	Если ОблагаетсяНДСУПокупателя Тогда
		ДокументОбъект.СуммаДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога");
	Иначе
		ДокументОбъект.СуммаДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом");
	КонецЕсли;
	
	Если СпособОбработки = "ВозвратТоваровОтПокупателя" Тогда
		ВидДокумента = Перечисления.ВидыДокументов.НакладнаяНаВозврат;
	ИначеЕсли ЕстьТовары Тогда
		ВидДокумента = Перечисления.ВидыДокументов.ТоварнаяНакладная;
	ИначеЕсли ЕстьРаботы Тогда
		ВидДокумента = Перечисления.ВидыДокументов.АктВыполненныхРабот;
	ИначеЕсли ЕстьПрава Тогда
		ВидДокумента = Перечисления.ВидыДокументов.АктНаПередачуПрав;
	Иначе
		ВидДокумента = Перечисления.ВидыДокументов.ТоварнаяНакладная;
	КонецЕсли;
	
	ДокументОбъект.ВидДокумента = ВидДокумента;
	
	РежимЗаписиПроведение = Истина;
	Если ДокументОбъект.ВидОперации <> Перечисления.ВидыОпераций.Реализация Тогда
		РежимЗаписиПроведение = ЗначениеЗаполнено(ДокументОбъект.ДокументОснование);
	КонецЕсли;
	
	Если Записывать Тогда
		ЗаписатьДокумент(ДокументОбъект, РежимЗаписиПроведение);
		СсылкаНаВладельца = ДокументОбъект.Ссылка;
	Иначе // если функция вызвана из формы "Обработки.ОбменСКонтрагентами.ФормаЗагрузкиПросмотраЭД"
		СсылкаНаВладельца = ДокументОбъект;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУПДСчетФактуру.
Процедура НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса;
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ВидСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры");
	Если ВидСчетаФактуры = "Авансовый" Тогда
		ДокументОбъект.ВидДокумента = Перечисления.ВидыДокументов.СчетФактураНаАванс;
	Иначе
		ДокументОбъект.ВидДокумента = Перечисления.ВидыДокументов.СчетФактура;
	КонецЕсли;
	
	ДокументОбъект.НомерЭД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	ДокументОбъект.НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	Если ЗначениеЗаполнено(ДокументОбъект.НомерИсправления) Тогда
		ВидОперации = Перечисления.ВидыОпераций.Исправление;
		
		ДокументОбъект.ДатаЭД  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаИсправления");
		ДокументОбъект.НомерИсходногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "НомерДокумента");
		ДокументОбъект.ДатаИсходногоДокумента  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаДокумента");
	Иначе
		ВидОперации = Перечисления.ВидыОпераций.Реализация;
		
		ДокументОбъект.ДатаЭД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаДокумента");
	КонецЕсли;
	ДокументОбъект.ВидОперации = ВидОперации;
	
	ЭлектронноеВзаимодействиеКЭДО.НайтиСсылкуНаОбъект("Валюты", ДокументОбъект.Валюта,
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	
	ДокументОбъект.ИдентификаторГосКонтракта = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта");
	
	ДокументОбъект.Контрагент  = КонтрагентПоДаннымЭД(ДеревоДанных,  "СведенияОПродавце");
	ДокументОбъект.Организация = ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе");
	
	ОснованияОтгрузки = ДеревоДанных.Строки.Найти("ОснованиеОтгрузкиТоваров", "ПолныйПуть");
	Если ОснованияОтгрузки <> Неопределено Тогда
		Для Каждого СтрокаОснованиеОтгрузки Из ОснованияОтгрузки.Строки Цикл
			ДоговорНомер = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОснованиеОтгрузки, "ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументНомер");
			Если ЗначениеЗаполнено(ДоговорНомер) Тогда
				
				ДоговорДата = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
					СтрокаОснованиеОтгрузки, "ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументДата");
				
				СвойстваДоговора = Новый Структура;
				СвойстваДоговора.Вставить("НомерДоговора", ДоговорНомер);
				СвойстваДоговора.Вставить("ДатаДоговора", ДоговорДата);
				СвойстваДоговора.Вставить("Организация", ДокументОбъект.Организация);
				СвойстваДоговора.Вставить("Владелец", ДокументОбъект.Контрагент);
				
				ДоговорКонтрагента = Неопределено;
				ЭлектронноеВзаимодействиеКЭДО.НайтиСсылкуНаОбъект("ДоговорыКонтрагентов", ДоговорКонтрагента, , СвойстваДоговора);
				ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
				
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	ДокументОбъект.ДокументыОснования.Очистить();
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
		ДокументОбъект.ДокументыОснования.Очистить();
		Для Каждого ДокументОснования Из ДокументыОснованияСчетаФактуры Цикл
			Если ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				ДокументОбъект.СчетФактураОснование = ДокументОснования;
			Иначе
				СтрокаТаблицы = ДокументОбъект.ДокументыОснования.Добавить();
				СтрокаТаблицы.ДокументОснование = ДокументОснования;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОблагаетсяНДСУПокупателя = Ложь;
	
	ДокументОбъект.Товары.Очистить();
	Если ДокументОбъект.ДокументыОснования.Количество() = 0 Тогда
		
		СведенияОНоменклатуре = ТаблицаСведенийОНоменклатуреПоставщика();
		
		// Сведения таблицы.
		СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
		Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
			
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			
			НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Количество");
			НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
			НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
			НоваяСтрока.СуммаАкциза = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.СуммаАкциза");
			
			СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
			Если СтавкаНДС = "НДС исчисляется налоговым агентом" Тогда
				НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
				ОблагаетсяНДСУПокупателя = Истина;
			Иначе
				НоваяСтрока.СтавкаНДС = СтавкаНДС;
				НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
					"СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
				НоваяСтрока.СуммаНДС  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
					"СведенияОТоварах.НомерСтроки.СуммаНалога");
			КонецЕсли;
			
			СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
				"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
			
			Если СведенияОТаможеннойДекларации <> Неопределено
				И СведенияОТаможеннойДекларации.Строки.Количество() Тогда
				
				НоваяСтрока.НомерГТД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
					"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
				
				КодСтраны = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
					"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");
				
				Если ЗначениеЗаполнено(КодСтраны) Тогда
					НоваяСтрока.СтранаПроисхождения = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(КодСтраны);
				КонецЕсли;
				
			КонецЕсли;
			
			// Заполним номенклатуру поставщика.
			СтрокаНоменклатуры = СведенияОНоменклатуре.Добавить();
			СтрокаНоменклатуры.НомерСтроки = НоваяСтрока.НомерСтроки;
			СтрокаНоменклатуры.Владелец = ДокументОбъект.Контрагент;
			СтрокаНоменклатуры.Идентификатор = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ИдТовараУКонтрагента");
			СтрокаНоменклатуры.Наименование  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ТоварНаименование");
			СтрокаНоменклатуры.ЕдиницаИзмеренияКод = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод");
			СтрокаНоменклатуры.ЕдиницаИзмеренияНаименование = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияНаименование");
			
		КонецЦикла;
		
		ЗаполнитьНоменклатуруПоставщика(ДокументОбъект.Товары, СведенияОНоменклатуре);
		
	Иначе
		
		ОблагаетсяНДСУПокупателя = ДеревоДанных.Строки.Найти("НДС исчисляется налоговым агентом", "Значение", Истина) <> Неопределено;
		
	КонецЕсли;
	
	ДокументОбъект.ОблагаетсяНДСУПокупателя = ОблагаетсяНДСУПокупателя;
	
	Если ОблагаетсяНДСУПокупателя Тогда
		ДокументОбъект.СуммаДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога");
	Иначе
		ДокументОбъект.СуммаДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом");
	КонецЕсли;
	
	ДокументОбъект.ПлатежноРасчетныеДокументы.Очистить();
	ПлатежноРасчетныеДокументы = ДеревоДанных.Строки.Найти("ПлатежноРасчетныеДокументы", "ПолныйПуть");
	Если ПлатежноРасчетныеДокументы <> Неопределено Тогда
		Для Каждого СтрокаПРД Из ПлатежноРасчетныеДокументы.Строки Цикл
			НомерПРД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаПРД,
				"ПлатежноРасчетныеДокументы.НомерСтроки.НомерПРД");
			ДатаПРД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаПРД,
				"ПлатежноРасчетныеДокументы.НомерСтроки.ДатаПРД");
			
			Если ЗначениеЗаполнено(НомерПРД) И ЗначениеЗаполнено(ДатаПРД) Тогда
				НоваяСтрока = ДокументОбъект.ПлатежноРасчетныеДокументы.Добавить();
				НоваяСтрока.НомерПлатежноРасчетногоДокумента = НомерПРД;
				НоваяСтрока.ДатаПлатежноРасчетногоДокумента  = ДатаПРД;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РежимЗаписиПроведение = Истина;
	Если ДокументОбъект.ВидОперации <> Перечисления.ВидыОпераций.Реализация Тогда
		РежимЗаписиПроведение = ЗначениеЗаполнено(ДокументОбъект.СчетФактураОснование);
	КонецЕсли;
	
	Если Записывать Тогда
		ЗаписатьДокумент(ДокументОбъект, РежимЗаписиПроведение);
		СсылкаНаВладельца = ДокументОбъект.Ссылка;
	Иначе // если функция вызвана из формы "Обработки.ОбменСКонтрагентами.ФормаЗагрузкиПросмотраЭД"
		СсылкаНаВладельца = ДокументОбъект;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйКорректировочныйДокумент.
Процедура НайтиСоздатьУниверсальныйКорректировочныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено,
	Записывать = Истина, СпособОбработки  = Неопределено) Экспорт
	
	ПервичныйДокумент = Неопределено;
	СчетФактура = Неопределено;
	
	СпособОбработкиПервичногоДокумента = "";
	СпособОбработкиСчетаФактуры = "";
	
	Если ЗначениеЗаполнено(СпособОбработки) И ТипЗнч(СпособОбработки) = Тип("Структура") Тогда
		
		Если СпособОбработки.Свойство("ПервичныйДокумент") Тогда
			СпособОбработкиПервичногоДокумента = СпособОбработки.ПервичныйДокумент;
		КонецЕсли;
		
		Если СпособОбработки.Свойство("СчетФактура") Тогда
			СпособОбработкиСчетаФактуры = СпособОбработки.СчетФактура;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СсылкиНаВладельцев <> Неопределено Тогда
		Для каждого Строка Из СсылкиНаВладельцев Цикл
			Если ТипЗнч(Строка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				СчетФактура = Строка;
			Иначе
				ПервичныйДокумент = Строка;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ДокументыУчета = Новый Массив;
	
	НайтиСоздатьУКДДокументОбИзмененииСтоимости(ДеревоДанных, ПервичныйДокумент, Записывать, СпособОбработкиПервичногоДокумента);
	ДокументыУчета.Добавить(ПервичныйДокумент);
	
	// Заполним основание в СФ
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
	Иначе
		ДокументыОснованияСчетаФактуры = Новый Массив;
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
	
	НайтиСоздатьУКДСчетФактуру(ДеревоДанных, СчетФактура, Записывать, СпособОбработкиСчетаФактуры);
	ДокументыУчета.Добавить(СчетФактура);
	
	СсылкиНаВладельцев = ДокументыУчета;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУКДДокументОбИзмененииСтоимости.
Процедура НайтиСоздатьУКДДокументОбИзмененииСтоимости(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ДокументОбъект.НомерЭД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	ДокументОбъект.НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	Если ЗначениеЗаполнено(ДокументОбъект.НомерИсправления) Тогда
		ВидОперации = Перечисления.ВидыОпераций.Исправление;
		ДокументОбъект.ДатаЭД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
		ДокументОбъект.НомерИсправляемогоКорректировочногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "НомерДокумента");
		ДокументОбъект.ДатаИсправляемогоКорректировочногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаДокумента");
	Иначе
		ВидОперации = Перечисления.ВидыОпераций.Корректировка;
		ДокументОбъект.ДатаЭД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента");
	КонецЕсли;
		
	ДокументОбъект.ВидОперации = ВидОперации;
	
	ДокументОбъект.НомерИсходногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "НомерИсходногоДокумента");
	ДокументОбъект.ДатаИсходногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДатаИсходногоДокумента");
	ДокументОбъект.НомерИсправленияИсходногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "НомерИсправленияИсходногоДокумента");
	ДокументОбъект.ДатаИсправленияИсходногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДатаИсправленияИсходногоДокумента");
	
	ЭлектронноеВзаимодействиеКЭДО.НайтиСсылкуНаОбъект("Валюты", ДокументОбъект.Валюта,
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	
	ДокументОбъект.Организация = ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе");
	ДокументОбъект.Контрагент  = КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце");
	
	ДокументОбъект.ИдентификаторГосКонтракта = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта");
	
	// Поиск и заполнения договора контрагента.
	ОснованиеКорректировки = ДеревоДанных.Строки.Найти("ОснованиеКорректировки", "ПолныйПуть");
	Если ОснованиеКорректировки <> Неопределено Тогда
		Для Каждого СтрокаОснованиеКорректировки Из ОснованиеКорректировки.Строки Цикл
			ДоговорНомер = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОснованиеКорректировки, "ОснованиеКорректировки.НомерСтроки.ДокументНомер");
			Если ЗначениеЗаполнено(ДоговорНомер) Тогда
				
				ДоговорДата = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
					СтрокаОснованиеКорректировки, "ОснованиеКорректировки.НомерСтроки.ДокументДата");
				
				СвойстваДоговора = Новый Структура;
				СвойстваДоговора.Вставить("НомерДоговора", ДоговорНомер);
				СвойстваДоговора.Вставить("ДатаДоговора", ДоговорДата);
				СвойстваДоговора.Вставить("Организация", ДокументОбъект.Организация);
				СвойстваДоговора.Вставить("Владелец", ДокументОбъект.Контрагент);
				
				ДоговорКонтрагента = Неопределено;
				ЭлектронноеВзаимодействиеКЭДО.НайтиСсылкуНаОбъект("ДоговорыКонтрагентов", ДоговорКонтрагента, , СвойстваДоговора);
				ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
				
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	// Поиск и заполнение банковского счета контрагента.
	НомерСчета = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОПродавце.БанковскиеРеквизиты.НомерСчета");
	БИКБанка = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОПродавце.БанковскиеРеквизиты.БИКБанка");
	ДокументОбъект.БанковскийСчетКонтрагента = БанковскийСчетКонтрагента(
		ДокументОбъект.Контрагент, БИКБанка, НомерСчета);
	
	ВидДокумента = Неопределено;
	
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
		Для Каждого СтрокаСФ Из ДокументыОснованияСчетаФактуры Цикл
			Если ТипЗнч(СтрокаСФ) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				Для Каждого Строка Из СтрокаСФ.ДокументыОснования Цикл
					Если ЗначениеЗаполнено(Строка.ДокументОснование) Тогда
						ДокументОбъект.ДокументОснование = Строка.ДокументОснование;
						ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ДокументОснование, "ВидДокумента");
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ДокументОбъект.ДокументОснование = СтрокаСФ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ОблагаетсяНДСУПокупателя = Ложь;
	СуммаДокумента = 0;
	
	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	ЕстьРаботы = Ложь;
	ЕстьПрава  = Ложь;
	
	СведенияОНоменклатуре = ТаблицаСведенийОНоменклатуреПоставщика();
	
	// Сведения таблицы.
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		
		НоваяСтрока.КоличествоДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.КоличествоДоКорректировки");
		НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.ЦенаДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмеренияДоКорректировки");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.СуммаДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаДоКорректировки");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.СуммаАкцизаДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СуммаАкцизаДоКорректировки");
		НоваяСтрока.СуммаАкциза = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.СуммаАкциза");
		
		СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		Если СтавкаНДС = "НДС исчисляется налоговым агентом" Тогда
			НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
			ОблагаетсяНДСУПокупателя = Истина;
		Иначе
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
			НоваяСтрока.СуммаСНДСДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогомДоКорректировки");
			НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
			НоваяСтрока.СуммаНДСДоКорректировки  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.СуммаНалогаДоКорректировки");
			НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.СуммаНалога");
		КонецЕсли;
		
		СуммаДокумента = СуммаДокумента + НоваяСтрока.СуммаСНДС;
		
		// Заполним номенклатуру поставщика.
		СтрокаНоменклатуры = СведенияОНоменклатуре.Добавить();
		СтрокаНоменклатуры.НомерСтроки = НоваяСтрока.НомерСтроки;
		СтрокаНоменклатуры.Владелец = ДокументОбъект.Контрагент;
		СтрокаНоменклатуры.Идентификатор = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.ИдТовараУКонтрагента");
		СтрокаНоменклатуры.Наименование  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.ТоварНаименование");
		СтрокаНоменклатуры.ЕдиницаИзмеренияКод = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод");
		
		Если ВидДокумента = Неопределено И ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ТипНоменклатуры");
			Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
				ЕстьТовары = Истина;
			ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				ЕстьРаботы = Истина;
			ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				ЕстьУслуги = Истина;
			ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Право Тогда
				ЕстьПрава = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ТипыНоменклатуры = Новый Соответствие;
	ТипыНоменклатуры.Вставить(Перечисления.ТипыНоменклатуры.Товар,  Ложь);
	ТипыНоменклатуры.Вставить(Перечисления.ТипыНоменклатуры.Услуга, Ложь);
	ТипыНоменклатуры.Вставить(Перечисления.ТипыНоменклатуры.Работа, Ложь);
	ТипыНоменклатуры.Вставить(Перечисления.ТипыНоменклатуры.Право,  Ложь);
	
	ЗаполнитьНоменклатуруПоставщика(ДокументОбъект.Товары, СведенияОНоменклатуре, ТипыНоменклатуры);
	
	ДокументОбъект.СуммаДокумента = СуммаДокумента;
	
	ДокументОбъект.ОблагаетсяНДСУПокупателя = ОблагаетсяНДСУПокупателя;
	
	Если ВидДокумента = Неопределено Тогда
		Если СпособОбработки = "ВозвратТоваровОтПокупателя" Тогда
			ВидДокумента = Перечисления.ВидыДокументов.НакладнаяНаВозврат;
		ИначеЕсли ТипыНоменклатуры.Получить(Перечисления.ТипыНоменклатуры.Товар) Тогда
			ВидДокумента = Перечисления.ВидыДокументов.ТоварнаяНакладная;
		ИначеЕсли ТипыНоменклатуры.Получить(Перечисления.ТипыНоменклатуры.Услуга)
			ИЛИ ТипыНоменклатуры.Получить(Перечисления.ТипыНоменклатуры.Работа) Тогда
			ВидДокумента = Перечисления.ВидыДокументов.АктВыполненныхРабот;
		ИначеЕсли ТипыНоменклатуры.Получить(Перечисления.ТипыНоменклатуры.Право) Тогда
			ВидДокумента = Перечисления.ВидыДокументов.АктНаПередачуПрав;
		Иначе
			ВидДокумента = Перечисления.ВидыДокументов.ТоварнаяНакладная;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.ВидДокумента = ВидДокумента;
	
	РежимЗаписиПроведение = ЗначениеЗаполнено(ДокументОбъект.ДокументОснование);
	
	Если Записывать Тогда
		ЗаписатьДокумент(ДокументОбъект, РежимЗаписиПроведение);
		СсылкаНаВладельца = ДокументОбъект.Ссылка;
	Иначе // если функция вызвана из формы "Обработки.ОбменСКонтрагентами.ФормаЗагрузкиПросмотраЭД"
		СсылкаНаВладельца = ДокументОбъект;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУКДСчетФактуру.
Процедура НайтиСоздатьУКДСчетФактуру(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ДокументОбъект.ВидДокумента = Перечисления.ВидыДокументов.СчетФактура;
	
	ДокументОбъект.НомерЭД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	ДокументОбъект.НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	Если ЗначениеЗаполнено(ДокументОбъект.НомерИсправления) Тогда
		ВидОперации = Перечисления.ВидыОпераций.Исправление;
		ДокументОбъект.ДатаЭД  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаИсправления");
		ДокументОбъект.НомерИсправляемогоКорректировочногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "НомерДокумента");
		ДокументОбъект.ДатаИсправляемогоКорректировочногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаДокумента");
	Иначе
		ВидОперации = Перечисления.ВидыОпераций.Корректировка;
		ДокументОбъект.ДатаЭД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаДокумента");
	КонецЕсли;
	ДокументОбъект.ВидОперации = ВидОперации;
	
	ДокументОбъект.НомерИсходногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "НомерИсходногоДокумента");
	ДокументОбъект.ДатаИсходногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДатаИсходногоДокумента");
	ДокументОбъект.НомерИсправленияИсходногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "НомерИсправленияИсходногоДокумента");
	ДокументОбъект.ДатаИсправленияИсходногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДатаИсправленияИсходногоДокумента");
	
	ЭлектронноеВзаимодействиеКЭДО.НайтиСсылкуНаОбъект("Валюты", ДокументОбъект.Валюта,
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	
	ДокументОбъект.Контрагент  = КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце");
	ДокументОбъект.Организация = ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе");
	
	ДокументОбъект.ИдентификаторГосКонтракта = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта");
	
	// Поиск и заполнения договора контрагента.
	ОснованиеКорректировки = ДеревоДанных.Строки.Найти("ОснованиеКорректировки", "ПолныйПуть");
	Если ОснованиеКорректировки <> Неопределено Тогда
		Для Каждого СтрокаОснованиеКорректировки Из ОснованиеКорректировки.Строки Цикл
			ДоговорНомер = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОснованиеКорректировки, "ОснованиеКорректировки.НомерСтроки.ДокументНомер");
			Если ЗначениеЗаполнено(ДоговорНомер) Тогда
				
				ДоговорДата = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
					СтрокаОснованиеКорректировки, "ОснованиеКорректировки.НомерСтроки.ДокументДата");
				
				СвойстваДоговора = Новый Структура;
				СвойстваДоговора.Вставить("НомерДоговора", ДоговорНомер);
				СвойстваДоговора.Вставить("ДатаДоговора", ДоговорДата);
				СвойстваДоговора.Вставить("Организация", ДокументОбъект.Организация);
				СвойстваДоговора.Вставить("Владелец", ДокументОбъект.Контрагент);
				
				ДоговорКонтрагента = Неопределено;
				ЭлектронноеВзаимодействиеКЭДО.НайтиСсылкуНаОбъект("ДоговорыКонтрагентов", ДоговорКонтрагента, , СвойстваДоговора);
				ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
				
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	ДокументОбъект.ДокументыОснования.Очистить();
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
		ТаблицаОснований = Документы.СчетФактураПолученный.ПустаяСсылка().ДокументыОснования.ВыгрузитьКолонки();
		Для Каждого ДокументОснования Из ДокументыОснованияСчетаФактуры Цикл
			Если ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				ДокументОбъект.СчетФактураОснование = ДокументОснования;
			Иначе
				СтрокаТаблицы = ДокументОбъект.ДокументыОснования.Добавить();
				СтрокаТаблицы.ДокументОснование = ДокументОснования;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ОблагаетсяНДСУПокупателя = Ложь;
	СуммаДокумента = 0;
	
	Если ДокументОбъект.ДокументыОснования.Количество() = 0 Тогда
		
		СведенияОНоменклатуре = ТаблицаСведенийОНоменклатуреПоставщика();
		
		// Сведения таблицы.
		СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
		Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
			
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			
			НоваяСтрока.КоличествоДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.КоличествоДоКорректировки");
			НоваяСтрока.Количество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.Количество");
			НоваяСтрока.ЦенаДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмеренияДоКорректировки");
			НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
			НоваяСтрока.СуммаДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаДоКорректировки");
			НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
			НоваяСтрока.СуммаАкцизаДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.СуммаАкцизаДоКорректировки");
			НоваяСтрока.СуммаАкциза = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.СуммаАкциза");
			
			СтавкаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
			Если СтавкаНДС = "НДС исчисляется налоговым агентом" Тогда
				НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
				ОблагаетсяНДСУПокупателя = Истина;
			Иначе
				НоваяСтрока.СтавкаНДС = СтавкаНДС;
				НоваяСтрока.СуммаСНДСДоКорректировки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
					"СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогомДоКорректировки");
				НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
					"СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
				НоваяСтрока.СуммаНДСДоКорректировки  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
					"СведенияОТоварах.НомерСтроки.СуммаНалогаДоКорректировки");
				НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
					"СведенияОТоварах.НомерСтроки.СуммаНалога");
			КонецЕсли;
			
			СуммаДокумента = СуммаДокумента + НоваяСтрока.СуммаСНДС;
			
			// Заполним номенклатуру поставщика.
			СтрокаНоменклатуры = СведенияОНоменклатуре.Добавить();
			СтрокаНоменклатуры.НомерСтроки = НоваяСтрока.НомерСтроки;
			СтрокаНоменклатуры.Владелец = ДокументОбъект.Контрагент;
			СтрокаНоменклатуры.Идентификатор = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ИдТовараУКонтрагента");
			СтрокаНоменклатуры.Наименование  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ТоварНаименование");
			СтрокаНоменклатуры.ЕдиницаИзмеренияКод = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод");
			
		КонецЦикла;
		
		ЗаполнитьНоменклатуруПоставщика(ДокументОбъект.Товары, СведенияОНоменклатуре);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(ПоступлениеТоваровУслуг.СуммаДокумента) КАК СуммаДокумента
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
			|ГДЕ
			|	ПоступлениеТоваровУслуг.Ссылка В(&Ссылка)";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СуммаДокумента = Выборка.СуммаДокумента;
		КонецЕсли;
		
		ОблагаетсяНДСУПокупателя = ДеревоДанных.Строки.Найти("НДС исчисляется налоговым агентом", "Значение", Истина) <> Неопределено;
		
	КонецЕсли;
	
	ДокументОбъект.СуммаДокумента = СуммаДокумента;
	
	ДокументОбъект.ОблагаетсяНДСУПокупателя = ОблагаетсяНДСУПокупателя;
	
	РежимЗаписиПроведение = ЗначениеЗаполнено(ДокументОбъект.СчетФактураОснование);
	
	Если Записывать Тогда
		ЗаписатьДокумент(ДокументОбъект, РежимЗаписиПроведение);
		СсылкаНаВладельца = ДокументОбъект.Ссылка;
	Иначе
		СсылкаНаВладельца = ДокументОбъект;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СоздатьОбъектВБД.
Процедура СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора, НовыйЭлемент) Экспорт
	
	Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.НоменклатураПоставщиков" Тогда
		НовыйЭлемент = СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора);
	ИначеЕсли СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.БанковскиеСчета" Тогда
		НовыйЭлемент = СоздатьПерезаполнитьБанковскийСчетКонтрагента(СтрокаОбъекта, ДеревоРазбора);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП.
Процедура СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Ссылка, Организация = Неопределено) Экспорт
	
	Ссылка = Неопределено;
	
	ИмяМетаданных = ЭлектронноеВзаимодействиеКЭДОПовтИсп.ИмяПрикладногоСправочника(ТипОбъекта);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Выборка.Ссылка
	|ИЗ
	|	Справочник." + ИмяМетаданных + " КАК Выборка
	|ГДЕ
	|	НЕ Выборка.ПометкаУдаления И
	|	Выборка.ИНН = &ИНН";
	Если ЗначениеЗаполнено(КПП) И КПП <> "0" Тогда
		ТекстЗапроса = ТекстЗапроса
			+ " И Выборка.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьРеквизитыКонтрагента.
Процедура ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов, КонтрагентСсылка) Экспорт
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
		Контрагент = СтруктураРеквизитов.Контрагент.ПолучитьОбъект();
	Иначе
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	КонецЕсли;
	
	Контрагент.Наименование = СтруктураРеквизитов.Наименование;
	ИНН_КПП        = СтруктураРеквизитов.ИНН_КПП;
	Контрагент.ИНН = Сред(ИНН_КПП, 1, СтрНайти(ИНН_КПП, "/") - 1);
	Контрагент.КПП = Сред(ИНН_КПП, СтрНайти(ИНН_КПП, "/") + 1);
	
	Контрагент.Записать();
	
	КонтрагентСсылка = Контрагент.Ссылка;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьРеквизитыТовара.
Процедура ПолучитьРеквизитыТовара(РеквизитыНоменклатуры, СтруктураВозврата, ИД = Неопределено) Экспорт
	
	// КлиентЭДО начало
	
	ПараметрПоиска = "";
	НоменклатураПоставщика = Неопределено;
	Если РеквизитыНоменклатуры.Свойство("НоменклатураПоставщика", НоменклатураПоставщика) Тогда
		СтруктураВозврата.Номенклатура = НоменклатураПоставщика.Номенклатура;
	Иначе
		СтруктураВозврата.Номенклатура = Неопределено;
	КонецЕсли;
	
	СтруктураВозврата.Характеристика = Неопределено;
	СтруктураВозврата.Упаковка = неопределено;
	
	// КлиентЭДО конец
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьИДКонтрагента.
Процедура ПолучитьИДКонтрагента(Контрагент, ВидКонтрагента, ИдКонтрагента) Экспорт
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат
	КонецЕсли;
	
	Если ВРег(ВидКонтрагента) = ВРег("Организация") Тогда
		ИдКонтрагента = Контрагент.ИНН + "_" + Контрагент.КПП;
	ИначеЕсли ВРег(ВидКонтрагента) = ВРег("Контрагент") Тогда
		ИдКонтрагента = Контрагент.ИНН + "_" + Контрагент.КПП;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ТекстЗапросаСопоставленияНоменклатуры.
Процедура ТекстЗапросаСопоставленияНоменклатуры(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаИнформацияОТоваре.Ид КАК Идентификатор,
		|	ТаблицаИнформацияОТоваре.Артикул КАК АртикулНоменклатурыКонтрагента,
		|	ТаблицаИнформацияОТоваре.Наименование КАК НаименованиеНоменклатурыКонтрагента,
		|	ТаблицаИнформацияОТоваре.БазоваяЕдиницаКод КАК БазоваяЕдиницаКод,
		|	ТаблицаИнформацияОТоваре.Описание КАК Описание
		|ПОМЕСТИТЬ ТаблицаИнформацияОТоваре
		|ИЗ
		|	&ТаблицаИнформацияОТоваре КАК ТаблицаИнформацияОТоваре
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИнформацияОТоваре.Идентификатор,
		|	ТаблицаИнформацияОТоваре.АртикулНоменклатурыКонтрагента,
		|	ТаблицаИнформацияОТоваре.НаименованиеНоменклатурыКонтрагента,
		|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЕдиницаНоменклатурыКонтрагента,
		|	ТаблицаИнформацияОТоваре.Описание,
		|	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщика
		|ИЗ
		|	ТаблицаИнформацияОТоваре КАК ТаблицаИнформацияОТоваре
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|		ПО ТаблицаИнформацияОТоваре.Идентификатор = НоменклатураПоставщиков.Идентификатор
		|			И (НоменклатураПоставщиков.Владелец = &Контрагент
		|И НоменклатураПоставщиков.ПометкаУдаления = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО ТаблицаИнформацияОТоваре.БазоваяЕдиницаКод = ЕдиницыИзмерения.Код
		|ГДЕ
		|(НоменклатураПоставщиков.Номенклатура ЕСТЬ NULL 
		|				ИЛИ НоменклатураПоставщиков.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))";
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаписатьСопоставлениеНоменклатуры.
Процедура ЗаписатьСопоставлениеНоменклатуры(ТаблицаСопоставления, Контрагент, Отказ) Экспорт
	
	Для Каждого Запись Из ТаблицаСопоставления Цикл
		Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
			Если ЗначениеЗаполнено(Запись.Идентификатор) Тогда
				
				Если ЗначениеЗаполнено(Запись.НоменклатураПоставщика) Тогда
					СпрСсылка = Запись.НоменклатураПоставщика;
				Иначе
					СпрСсылка = Справочники.НоменклатураПоставщиков.НайтиПоРеквизиту(
																			"Идентификатор",
																			Запись.Идентификатор,
																			,
																			Справочники.Контрагенты.ПустаяСсылка());
				КонецЕсли;
			Иначе
				СпрСсылка = Справочники.НоменклатураПоставщиков.НайтиПоНаименованию(
												Запись.НаименованиеНоменклатурыКонтрагента,
												,
												,
												Контрагент);
			КонецЕсли;
			Если ЗначениеЗаполнено(СпрСсылка) Тогда
				СпрОбъект = СпрСсылка.ПолучитьОбъект();
			Иначе
				СпрОбъект = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
				СпрОбъект.Артикул = Запись.АртикулНоменклатурыКонтрагента;
				СпрОбъект.Идентификатор = Запись.Идентификатор;
				СпрОбъект.Наименование = Запись.НаименованиеНоменклатурыКонтрагента;
			КонецЕсли;
			СпрОбъект.Номенклатура = Запись.Номенклатура;
			СпрОбъект.Владелец = Контрагент;
			СпрОбъект.Характеристика = Запись.ХарактеристикаНоменклатуры;
			СпрОбъект.Упаковка = Запись.Упаковка;
			Попытка
				СпрОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , , , Отказ);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьПараметрыФормыСопоставленияНоменклатуры.
Процедура ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД, СтруктураПараметров) Экспорт
	
	СтруктураПараметров.Вставить("ИмяФормы", "ОбщаяФорма.СопоставлениеДанныхПоНоменклатуре");
	ПараметрыОткрытияФормы = Новый Структура("ЭлектронныйДокумент, НеОткрыватьФормуПриОтсутствииНеСопоставленнойНоменклатуры",
		СсылкаНаЭД, Истина);
	СтруктураПараметров.Вставить("ПараметрыОткрытияФормы", ПараметрыОткрытияФормы);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьИсточник.
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеЗаполнения) Экспорт
	
	ДанныеФормы.ЗаполнитьТоварыИзВременногоХранилищаСервер(ЗначениеЗаполнения);
	ДанныеФормы.ОбновитьОтображениеДанных();
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьЗначениеПеречисления.
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
	Если Метаданные.Перечисления.Найти(ИмяПеречисления) = Неопределено Тогда
		НайденноеЗначение = ПредставлениеПеречисления;
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если СтрНайти(ВРег(ЭлПеречисления.Синоним), ВРег(ПредставлениеПеречисления)) > 0
			ИЛИ СтрНайти(ВРег(ЭлПеречисления.Имя), ВРег(ПредставлениеПеречисления)) > 0 Тогда
			
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП.
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт
	
	Если ТипЗнч(ИП) = Тип("СправочникСсылка.Организации") Тогда
		РеквизитыСвидетельства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИП,
			"СвидетельствоДатаВыдачи, СвидетельствоСерияНомер");
		Сведения = СтрШаблон(НСтр("ru = 'Свидетельство о регистрации № %1 от %2'"), 
			РеквизитыСвидетельства.СвидетельствоСерияНомер,
			Формат(РеквизитыСвидетельства.СвидетельствоДатаВыдачи, "ДЛФ=D"));
	Иначе
		Сведения = "";
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьКонтактнуюИнформацию.
Процедура ПолучитьКонтактнуюИнформацию(Организация, ТаблицаКонтактов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОрганизацииКонтактнаяИнформация.Вид КАК Вид,
	|	ОрганизацииКонтактнаяИнформация.Представление КАК Значение,
	|	ОрганизацииКонтактнаяИнформация.ЗначенияПолей КАК Комментарий
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка = &Ссылка
	|	И (ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации)
	|			ИЛИ ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)
	|			ИЛИ ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФаксОрганизации))";
	Запрос.УстановитьПараметр("Ссылка", Организация);
	
	ТаблицаКонтактов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.НазваниеРегиона.
Процедура НазваниеРегиона(КодРегиона, НазваниеРегиона) Экспорт
	
	Если ЗначениеЗаполнено(КодРегиона) Тогда
		НазваниеРегиона = АдресныйКлассификатор.НаименованиеРегионаПоКоду(КодРегиона);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.АдресЭлектроннойПочтыКонтрагента.
Процедура АдресЭлектроннойПочтыКонтрагента(Контрагент, АдресЭП) Экспорт
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК АдресЭП
	|ИЗ
	|	Справочник.%ИмяСправочника%.КонтактнаяИнформация КАК КонтактнаяИнформация 
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Владелец
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &ВидEmail";
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		ВидEmail = Справочники.ВидыКонтактнойИнформации["EmailОрганизации"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Организации");
	ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидEmail = Справочники.ВидыКонтактнойИнформации["EmailКонтрагента"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Контрагенты");
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("Тип",      Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ВидEmail", ВидEmail);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		АдресЭП = Выборка.АдресЭП;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьБанковскиеСчета.
Процедура ПолучитьБанковскиеСчета(Организация, Таблица, Банк = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация
	|	И &УсловияОтбораПоБанку";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если ЗначениеЗаполнено(Банк) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияОтбораПоБанку", "БанковскиеСчета.Банк = &Банк");
		Запрос.УстановитьПараметр("Банк", Банк);
		
	Иначе
		
		Запрос.УстановитьПараметр("УсловияОтбораПоБанку", Истина);
		
	КонецЕсли;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьБанковскиеРеквизиты.
Процедура ПолучитьБанковскиеРеквизиты(МассивСчетов, Таблица) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.НомерСчета КАК РасчетныйСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.КоррСчет, """") КАК КорреспондентскийСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Код, """") КАК БИК,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Наименование, """") КАК Банк,
	|	ЕСТЬNULL(БанковскиеСчета.БанкРасчетов.Наименование, """") КАК БанкДляРасчетов,
	|	ЕСТЬNULL(БанковскиеСчета.БанкРасчетов.Код, """") КАК БанкДляРасчетовБИК,
	|	ЕСТЬNULL(БанковскиеСчета.БанкРасчетов.КоррСчет, """") КАК БанкДляРасчетовКоррСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка В(&МассивСчетов)";
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьРеквизитыЭСФ.
Процедура ЗаполнитьРеквизитыЭСФ(ВладелецЭД, ЭД) Экспорт
	
	Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
		
		// Датой выставления покупателю счета-фактуры в электронном виде по телекоммуникационным
		// каналам связи считается дата поступления файла счета-фактуры Оператору ЭДО от продавца,
		// указанная в подтверждении (ПДПЭСФ) этого Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н.
			ЭСФ = ВладелецЭД.ПолучитьОбъект();
			ЭСФ.ОбменДанными.Загрузка = Истина;
			ЭСФ.ДатаВыставления = ЭД.ВладелецФайла.ДатаДокументаОтправителя;
			ЭСФ.Записать();
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
		
		// Датой получения покупателем счета-фактуры в электронном виде по телекоммуникационным
		// каналам связи считается дата направления покупателю Оператором ЭДО файла счета-фактуры продавца,
		// указанная в подтверждении (ПДОЭСФ) Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н.
			ЭСФ = ВладелецЭД.ПолучитьОбъект();
			ЭСФ.ОбменДанными.Загрузка = Истина;
			ЭСФ.ДатаПолучения = ЭД.ВладелецФайла.ДатаДокументаОтправителя;
			ЭСФ.Записать();
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
		
		// Счет-фактура в электронном виде считается выставленным, если продавцу поступило
		// соответствующее подтверждение (ПДПЭСФ) Оператора ЭДО, при наличии у продавца извещения покупателя
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и полученного через Оператора ЭДО.
		// ПРИКАЗ от 25 апреля 2011 г. N 50н.
			ЭСФ = ВладелецЭД.ПолучитьОбъект();
			ЭСФ.ОбменДанными.Загрузка     = Истина;
			ЭСФ.Выставлен = Истина;
			ЭСФ.Записать();
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
		
		// Счет-фактура в электронном виде считается полученным покупателем, если ему поступило
		// соответствующее подтверждение (ПДОЭСФ) Оператора ЭДО, при наличии извещения покупателя
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и подтвержденного (ПДОИПЭСФ)
		// Оператором ЭДО. ПРИКАЗ от 25 апреля 2011 г. N 50н.
			ЭСФ = ВладелецЭД.ПолучитьОбъект();
			ЭСФ.ОбменДанными.Загрузка   = Истина;
			ЭСФ.Получен = Истина;
			ЭСФ.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьАдресСтруктурой.
Процедура ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента = "Контрагент", ВидАдреса = "Юр", ТекстОшибки = "") Экспорт
	
	СтруктураАдреса.Вставить("АдресРФ", Истина);
	СтруктураАдреса.Вставить("КодСтр", "");
	СтруктураАдреса.Вставить("КодСтраны", "");
	СтруктураАдреса.Вставить("Индекс", "");
	СтруктураАдреса.Вставить("КодРегион", "");
	СтруктураАдреса.Вставить("КодРегиона", "");
	СтруктураАдреса.Вставить("Район", "");
	СтруктураАдреса.Вставить("Город", "");
	СтруктураАдреса.Вставить("НаселПункт", "");
	СтруктураАдреса.Вставить("НаселенныйПункт", "");
	СтруктураАдреса.Вставить("Улица", "");
	СтруктураАдреса.Вставить("Дом", "");
	СтруктураАдреса.Вставить("Корпус", "");
	СтруктураАдреса.Вставить("Кварт", "");
	СтруктураАдреса.Вставить("Квартира", "");
	СтруктураАдреса.Вставить("АдрТекст", "");
	СтруктураАдреса.Вставить("АдресТекст", "");
	СтруктураАдреса.Вставить("КодГАР", "");
	
	Если ТипЗнч(СтруктураПараметров.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		ВидКонтактнойИнформации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	Иначе
		ВидКонтактнойИнформации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	КонецЕсли;
	
	Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтруктураПараметров.Ссылка),
		Перечисления.ТипыКонтактнойИнформации.Адрес, 
		ВидКонтактнойИнформации);
	
	Если Адрес.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОбАдресе = РаботаСАдресами.ПредыдущаяСтруктураКонтактнойИнформацииXML(Адрес[0].ЗначенияПолей);
	
	Если СтрСравнить(СведенияОбАдресе.КодСтраны, Справочники.СтраныМира.Россия.Код) = 0 Тогда
		АдресРФ = Истина;
	Иначе
		АдресРФ = Ложь;
	КонецЕсли;
	
	ПредставлениеАдреса = Адрес[0].Представление;
	СтруктураАдреса.АдрТекст   = ПредставлениеАдреса;
	СтруктураАдреса.АдресТекст = ПредставлениеАдреса;
	СтруктураАдреса.АдресРФ    = АдресРФ;
	СтруктураАдреса.КодСтраны  = СведенияОбАдресе.КодСтраны;
	СтруктураАдреса.КодСтр     = СведенияОбАдресе.КодСтраны;
	СтруктураАдреса.КодРегион  = СведенияОбАдресе.КодРегиона;
	СтруктураАдреса.КодРегиона = СведенияОбАдресе.КодРегиона;
	СтруктураАдреса.Индекс     = СведенияОбАдресе.Индекс;
	СтруктураАдреса.Район      = СведенияОбАдресе.Район;
	СтруктураАдреса.Город      = СведенияОбАдресе.Город;
	СтруктураАдреса.НаселПункт = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.НаселенныйПункт = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.Улица      = СведенияОбАдресе.Улица;
	СтруктураАдреса.Дом        = СведенияОбАдресе.Дом;
	СтруктураАдреса.Корпус     = СведенияОбАдресе.Корпус;
	СтруктураАдреса.Кварт      = СведенияОбАдресе.Квартира;
	СтруктураАдреса.Квартира   = СведенияОбАдресе.Квартира;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ФорматСумм.
Процедура ФорматСумм(СуммаКПрописи, Результат, КодВалюты = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Если Не ЗначениеЗаполнено(СуммаКПрописи) Тогда
		Возврат;
	КонецЕсли;

	Валюта = Неопределено;
	ЭлектронноеВзаимодействиеКЭДО.НайтиСсылкуНаОбъект("Валюты", Валюта, КодВалюты);
	
	Сумма = ?(СуммаКПрописи < 0, -СуммаКПрописи, СуммаКПрописи);
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2"
		+ ?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН)
		+ ?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	Результат = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Результат = Результат + " " + СокрП(Валюта);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СуммаПрописью.
Процедура СуммаПрописью(СуммаЧислом, КодВалюты, Результат) Экспорт
	
	Сумма             = ?(СуммаЧислом < 0, -СуммаЧислом, СуммаЧислом);
	ЦелаяЧасть        = Цел(Сумма);
	ФорматСтрока      = "Л=ru_RU;ДП=Ложь";
	ПараметрыПредмета = Новый Структура("ПараметрыПрописиНаРусском", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	
	Результат = ЧислоПрописью(Сумма, ФорматСтрока, ПараметрыПредмета.ПараметрыПрописиНаРусском);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ТекстНДСПоСтавке.
Процедура ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС, Результат) Экспорт
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Результат = НСтр("ru = 'Без налога (НДС)'");
	Иначе
		Результат = ?(ЦенаВключаетНДС, НСтр("ru='В т.ч. НДС (%СтавкаНДС%):'"), НСтр("ru='НДС (%СтавкаНДС%):'"));
		Результат = СтрЗаменить(Результат, "%СтавкаНДС%", СтавкаНДС);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьОтветственногоПоЭД.
Процедура ПолучитьОтветственногоПоЭД(Контрагент, Соглашение, ОтветственныйПоЭД) Экспорт
	
	ОтветственныйПоЭД = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо.
Процедура ЭтоФизЛицо(ДанныеКонтрагента, ПризнакФизЛица) Экспорт
	
	ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеКонтрагента, "ЮрФизЛицо");
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
		ИЛИ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		
		ПризнакФизЛица = Истина;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПриИзмененииПрисоединенногоФайла.
Процедура ПриИзмененииПрисоединенногоФайла(Объект, СтруктураПараметров) Экспорт
	
	Если НЕ СтруктураПараметров.Свойство("Ответственный") Тогда
		СтруктураПараметров.Вставить("Ответственный", Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов.
Процедура ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов(Таблица) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ТипОбъекта");
	Таблица.Колонки.Добавить("Порядок");
	
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта = "НоменклатураПоставщиков";
	НовСтрока.Порядок    = 2;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ТекущееИмяВременногоФайла.
Процедура ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение = "") Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСчетаФактурыПоДокументамОснования.
Процедура ЗаполнитьСчетаФактурыПоДокументамОснования(МассивОснований, МассивСФ, НаправлениеЭД) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СчетФактураДокументыОснования.Ссылка КАК Ссылка
		|ИЗ
		|	&СчетФактураДокументыОснования КАК СчетФактураДокументыОснования
		|ГДЕ
		|	СчетФактураДокументыОснования.ДокументОснование В(&ДокументыОснования)";
	
	Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СчетФактураДокументыОснования",
			"Документ.СчетФактураПолученный.ДокументыОснования");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СчетФактураДокументыОснования",
			"Документ.СчетФактураВыданный.ДокументыОснования");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументыОснования", МассивОснований);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		МассивСФ = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СписокТиповДокументовПоВидуЭД.
Процедура СписокТиповДокументовПоВидуЭД(ВидЭД, СписокВозврата) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12 ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
		СписокВозврата.Добавить(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка(),
			Метаданные.Документы.ПоступлениеТоваровУслуг.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура ИЛИ ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		СписокВозврата.Добавить(Документы.СчетФактураПолученный.ПустаяСсылка(),
			Метаданные.Документы.СчетФактураПолученный.Представление());
		
	ИначеЕсли ВРег(ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		СписокВозврата.Добавить(Справочники.Контрагенты.ПустаяСсылка(),
			Метаданные.Справочники.Контрагенты.Представление());
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл.
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт
	
	ЗаполнитьЗначенияСвойств(СтруктураВозврата,
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "Наименование, ИНН, КПП, ЮрФизЛицо"));
	СтруктураВозврата.НаименованиеПолное = СтруктураВозврата.Наименование;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ИспользоватьОбменЭДМеждуОрганизациями.
Процедура ИспользоватьОбменЭДМеждуОрганизациями(Отказ) Экспорт
	
	Отказ = Истина;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийВидаЭД.
Процедура СписокОперацийВидаЭД(ВидЭД, СписокСпособовОбработки) Экспорт 
	
	Если ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		СписокСпособовОбработки.Добавить("ПоступлениеТоваровУслуг", НСтр("ru = 'Акт выполненных работ'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
		СписокСпособовОбработки.Добавить("ПоступлениеТоваровУслуг", НСтр("ru = 'Акт на передачу прав'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
		
		СписокСпособовОбработки.Добавить("ПоступлениеТоваровУслуг", НСтр("ru = 'Товарная накладная'"), Истина);
		СписокСпособовОбработки.Добавить("ВозвратТоваровОтПокупателя", НСтр("ru = 'Накладная на возврат'"));
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		
		СписокСпособовОбработки.Добавить("ПоступлениеТоваровУслуг", НСтр("ru = 'Акт, накладная (Корректировка)'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
		
		СписокСпособовОбработки.Добавить("ПоступлениеТоваровУслуг", НСтр("ru = 'Товарная накладная'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		СписокСпособовОбработки.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет-фактура полученный (Корректировка)'"),Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		
		СписокСпособовОбработки.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет-фактура полученный'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		
		СписокСпособовОбработки.Добавить("НоменклатураПоставщиков", НСтр("ru = 'Номенклатура поставщиков'"), Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ИмяДокументаПоСпособуОбработки.
Процедура ИмяДокументаПоСпособуОбработки(СпособОбработки, ИмяДокумента) Экспорт 
	
	Если СпособОбработки = "ВозвратТоваровОтПокупателя" Тогда
		ИмяДокумента = "ПоступлениеТоваровУслуг";
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.СоответствиеИсходящихВидовЭДДокументамИБ.
Процедура СоответствиеИсходящихВидовЭДДокументамИБ(СоответствиеВидовЭДДокументамИБ) Экспорт 
	
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ТОРГ12Продавец,         НСтр("ru = 'Товарная накладная'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.АктИсполнитель,         НСтр("ru = 'Акт выполненных работ'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.АктНаПередачуПрав,      НСтр("ru = 'Акт на передачу прав'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СчетФактура,            НСтр("ru = 'Счет-фактура'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель,
		НСтр("ru = 'Акт, накладная (Корректировка)'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.КорректировочныйСчетФактура, НСтр("ru = 'Счет-фактура (Корректировка)'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.КаталогТоваров,         НСтр("ru = 'Справочник Настройка ЭДО'"));
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПриПолученииОписанияОснованияЭлектронногоДокумента.
Процедура ПриПолученииОписанияОснованияЭлектронногоДокумента(ОснованиеОбъект, Описание, СтандартнаяОбработка) Экспорт
	
	ТипОснования = ТипЗнч(ОснованиеОбъект);
	Если ТипОснования = Тип("ДокументОбъект.РеализацияТоваровУслуг") 
		ИЛИ ТипОснования = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Описание.Организация = ОснованиеОбъект.Организация;
		Описание.Контрагент  = ОснованиеОбъект.Контрагент;
		Описание.Дата  = ОснованиеОбъект.Дата;
		Описание.Номер = ОснованиеОбъект.ПредставлениеНомера;
		Описание.СуммаДокумента = ОснованиеОбъект.СуммаДокумента;
		Описание.Вид = СтрШаблон(НСтр("ru = '%1 (%2)'"),
			ОснованиеОбъект.ВидДокумента, ОснованиеОбъект.ВидОперации);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "АдресРФ")
	
	// Подготовим параметры обработки ошибок
	КлючДанных = Неопределено;
	СведенияОбУчастнике.Свойство("Ссылка", КлючДанных);
	
	ПараметрыОбработкиОшибокНаименование = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		КлючДанных, "Объект.НаименованиеПолное");
	ПараметрыОбработкиОшибокИНН = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		КлючДанных, "Объект.ИНН");
	ПараметрыОбработкиОшибокКПП = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		КлючДанных, "Объект.КПП");
			
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
			СведенияОбУчастнике.ПолноеНаименование, ПараметрыОбработкиОшибокНаименование);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
			СведенияОбУчастнике.ИНН, ПараметрыОбработкиОшибокИНН);

		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
			СведенияОбУчастнике.КПП, ПараметрыОбработкиОшибокКПП);
		
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации",
			СведенияОбУчастнике.ПолноеНаименование, ПараметрыОбработкиОшибокНаименование);
		
	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.ИНН",
			СведенияОбУчастнике.ИНН, ПараметрыОбработкиОшибокИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Фамилия",
			СведенияОбУчастнике.Фамилия, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Имя",
			СведенияОбУчастнике.Имя, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Отчество",
			СведенияОбУчастнике.Отчество, ПараметрыОбработкиОшибокНаименование);
		
		Если ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		
			Свидетельство = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Свидетельство №%1 от %2'"),
				СведенияОбУчастнике.СвидетельствоСерияНомер,
				Формат(СведенияОбУчастнике.СвидетельствоДатаВыдачи, "ДЛФ=D"));
			
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				КлючДанных, "Объект.СвидетельствоСерияНомер");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации",
				Свидетельство, ПараметрыОбработкиОшибок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПостфиксПоляАдрес = ?(ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Контрагенты"),
		"Контрагента", "Организации");
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		СведенияОбУчастнике.Ссылка, "КонтактнаяИнформацияПолеЮрАдрес" + ПостфиксПоляАдрес + ".");
	
	ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДеревоДанных, ВидУчастника + ".Адрес",
		ПараметрыОбработкиОшибок);
	Если ЗначениеЗаполнено(СведенияОбУчастнике.ЮридическийАдресЗначенияПолей) Тогда
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(СведенияОбУчастнике.ЮридическийАдресЗначенияПолей);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".Адрес.АдресИнформация.КодСтраны", СведенияОбАдресе.КодСтраны,
			ПараметрыОбработкиОшибок);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			ВидУчастника + ".Адрес.АдресИнформация.АдресТекст", СведенияОбУчастнике.ЮридическийАдрес,
			ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	Телефон = "";
	Если СведенияОбУчастнике.Свойство("Телефоны", Телефон) И ЗначениеЗаполнено(Телефон) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".КонтактныеСведения.Телефон",
			Телефон, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	ЭлектроннаяПочта = "";
	Если СведенияОбУчастнике.Свойство("ЭлектроннаяПочта", ЭлектроннаяПочта) И ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта",
			ЭлектроннаяПочта, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
		ПараметрыОбработкиОшибок = Неопределено;
		Если СведенияОбУчастнике.Свойство("БанковскийСчет") Тогда
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				СведенияОбУчастнике.БанковскийСчетСсылка, "Объект.НомерСчета");
		КонецЕсли;
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".БанковскиеРеквизиты.НомерСчета",
			НомерСчета, ПараметрыОбработкиОшибок);
				
		Банк = ""; БИК = ""; КоррСчет = "";
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			ПараметрыОбработкиОшибок = Неопределено;
			Если СведенияОбУчастнике.Свойство("БанкСсылка") Тогда
				ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
					СведенияОбУчастнике.БанкСсылка, "Объект.Наименование");
			КонецЕсли;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка",
				Банк, ПараметрыОбработкиОшибок);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ПараметрыОбработкиОшибок = Неопределено;
			Если СведенияОбУчастнике.Свойство("БанкСсылка") Тогда
				ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
					СведенияОбУчастнике.БанкСсылка, "Объект.Код");
			КонецЕсли;
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.БИКБанка",
				БИК, ПараметрыОбработкиОшибок);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			ПараметрыОбработкиОшибок = Неопределено;
			Если СведенияОбУчастнике.Свойство("БанкСсылка") Тогда
				ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
					СведенияОбУчастнике.БанкСсылка, "Объект.КоррСчет");
			КонецЕсли;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка",
				КоррСчет, ПараметрыОбработкиОшибок);
		КонецЕсли;
	КонецЕсли;
	
	КодПоОКПО = "";
	Если СведенияОбУчастнике.Свойство("КодПоОКПО", КодПоОКПО) И ЗначениеЗаполнено(КодПоОКПО) Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(КлючДанных,
			"Объект.КодПоОКПО");
					
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".КодОКПО", КодПоОКПО, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаМассива, ОбъектМетаданных)
	
	Для Каждого ТекСтрока Из СтрокаМассива.Строки Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.Метаданные().СтандартныеРеквизиты, ТекСтрока.Реквизит) Тогда
			ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
		ИначеЕсли ОбъектМетаданных.Метаданные().Реквизиты.Найти(ТекСтрока.Реквизит) <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекСтрока.СсылкаНаОбъект) Тогда
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.СсылкаНаОбъект;
			Иначе
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
		// тогда нашли всего лишь индекс строки.
		Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
			НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				Результат = НайденнаяСтрока.СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
	КонецЕсли;
	
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		ТаблицаТоваров = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
		Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
			Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
				СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
					Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
						Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
						Если ЗначениеЗаполнено(Реквизит) Тогда
							ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
						КонецЕсли;
					Иначе
						ЗаполнитьСтрокуТЧ(ТаблицаТоваров, СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
					
					Если ЗначениеЗаполнено(Реквизит) Тогда
						Если СтрокаРеквизита.Реквизит = "Номер" Тогда
							ДанныеЗаполненияШапки.Вставить("НомерЭД", Реквизит);
						ИначеЕсли СтрокаРеквизита.Реквизит = "Дата" Тогда
							ДанныеЗаполненияШапки.Вставить("ДатаЭД", Реквизит);
						Иначе
							ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
						КонецЕсли;
					ИначеЕсли СтрокаРеквизита.Реквизит = "Организация"  Тогда
						ТекстОшибки = ТекстОшибкиЗаполненияОрганизации(СтрокаРеквизита, ДеревоРазбора);
						ВызватьИсключение ТекстОшибки;
					КонецЕсли;
					
				Иначе
					ЗаполнитьСтрокуТЧ(ТаблицаТоваров, СтрокаРеквизита.Строки, ДеревоРазбора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТаблицаТоваров = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
		Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
				Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				
				Если СтрокаРеквизита.Реквизит = "ДокументыОснования" Тогда
					ДанныеЗаполненияШапки.Вставить("ДокументОснование", Реквизит);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Реквизит) Тогда
					Если СтрокаРеквизита.Реквизит = "Номер" Тогда
						ДанныеЗаполненияШапки.Вставить("НомерЭД", Реквизит);
					ИначеЕсли СтрокаРеквизита.Реквизит = "Дата" Тогда
						ДанныеЗаполненияШапки.Вставить("ДатаЭД", Реквизит);
					Иначе
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
					КонецЕсли;
				ИначеЕсли СтрокаРеквизита.Реквизит = "Организация" Тогда
					ТекстОшибки = ТекстОшибкиЗаполненияОрганизации(СтрокаРеквизита, ДеревоРазбора);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
			Иначе
				Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
					ЗаполнитьСтрокуТЧАктаНаПередачуПрав(ТаблицаТоваров, СтрокаРеквизита.Строки, ДеревоРазбора);
				Иначе
					ЗаполнитьСтрокуТЧ(ТаблицаТоваров, СтрокаРеквизита.Строки, ДеревоРазбора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Поиск и заполнения договора контрагента.
	Если ДанныеЗаполненияШапки.Свойство("ДокументСделкиНаименование") Тогда
		ДоговорКонтрагента = Неопределено; 
		КлиентЭДО.НайтиСсылкуНаОбъектПоРеквизиту("ДоговорыКонтрагентов", "Наименование",
		ДанныеЗаполненияШапки.ДокументСделкиНаименование, ДоговорКонтрагента, ДанныеЗаполненияШапки.Контрагент);
		Если ДоговорКонтрагента = Неопределено 
			И ДанныеЗаполненияШапки.Свойство("Контрагент") И ЗначениеЗаполнено(ДанныеЗаполненияШапки.Контрагент)
			И ДанныеЗаполненияШапки.Свойство("Организация") И ЗначениеЗаполнено(ДанныеЗаполненияШапки.Организация) Тогда
			
			НовыйДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			НовыйДоговорКонтрагента.Владелец     = ДанныеЗаполненияШапки.Контрагент;
			НовыйДоговорКонтрагента.Организация  = ДанныеЗаполненияШапки.Организация;
			НовыйДоговорКонтрагента.Наименование = ДанныеЗаполненияШапки.ДокументСделкиНаименование;
			Если ДанныеЗаполненияШапки.Свойство("ДокументСделкиНомер") Тогда
				НовыйДоговорКонтрагента.НомерДоговора = ДанныеЗаполненияШапки.ДокументСделкиНомер;
			КонецЕсли;
			Если ДанныеЗаполненияШапки.Свойство("ДокументСделкиДата") Тогда
				НовыйДоговорКонтрагента.ДатаДоговора = ДанныеЗаполненияШапки.ДокументСделкиДата;
			КонецЕсли;
			Если ДанныеЗаполненияШапки.Свойство("Валюта") Тогда
				НовыйДоговорКонтрагента.ВалютаРасчетов = ДанныеЗаполненияШапки.Валюта;
			КонецЕсли;
			
			НовыйДоговорКонтрагента.ОбменДанными.Загрузка = Истина;
			НовыйДоговорКонтрагента.Записать();
			ДоговорКонтрагента = НовыйДоговорКонтрагента.Ссылка
		КонецЕсли;
		ДанныеЗаполненияШапки.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	КонецЕсли;
	
	// Поиск и заполнения договора контрагента.
	Если ДанныеЗаполненияШапки.Свойство("ДокОснованиеНаименование") Тогда
		ДоговорКонтрагента = Неопределено; 
		КлиентЭДО.НайтиСсылкуНаОбъектПоРеквизиту("ДоговорыКонтрагентов", "Наименование",
			ДанныеЗаполненияШапки.ДокОснованиеНаименование, ДоговорКонтрагента, ДанныеЗаполненияШапки.Контрагент);
		Если ДоговорКонтрагента = Неопределено 
			И ДанныеЗаполненияШапки.Свойство("Контрагент") И ЗначениеЗаполнено(ДанныеЗаполненияШапки.Контрагент)
			И ДанныеЗаполненияШапки.Свойство("Организация") И ЗначениеЗаполнено(ДанныеЗаполненияШапки.Организация) Тогда
			
			НовыйДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			НовыйДоговорКонтрагента.Владелец     = ДанныеЗаполненияШапки.Контрагент;
			НовыйДоговорКонтрагента.Организация  = ДанныеЗаполненияШапки.Организация;
			НовыйДоговорКонтрагента.Наименование = ДанныеЗаполненияШапки.ДокОснованиеНаименование;
			Если ДанныеЗаполненияШапки.Свойство("ДокОснованиеНомер") Тогда
				НовыйДоговорКонтрагента.НомерДоговора = ДанныеЗаполненияШапки.ДокОснованиеНомер;
			КонецЕсли;
			Если ДанныеЗаполненияШапки.Свойство("ДокОснованиеДата") Тогда
				НовыйДоговорКонтрагента.ДатаДоговора = ДанныеЗаполненияШапки.ДокОснованиеДата;
			КонецЕсли;
			Если ДанныеЗаполненияШапки.Свойство("Валюта") Тогда
				НовыйДоговорКонтрагента.ВалютаРасчетов = ДанныеЗаполненияШапки.Валюта;
			КонецЕсли;
			
			НовыйДоговорКонтрагента.ОбменДанными.Загрузка = Истина;
			НовыйДоговорКонтрагента.Записать();
			ДоговорКонтрагента = НовыйДоговорКонтрагента.Ссылка
		КонецЕсли;
		ДанныеЗаполненияШапки.Вставить("ДоговорКонтрагента",     ДоговорКонтрагента);
	КонецЕсли;
	
	// Поиск и заполнения договора контрагента.
	Если ДанныеЗаполненияШапки.Свойство("НаименованиеОснования") Тогда
		ДоговорКонтрагента = Неопределено;
		КлиентЭДО.НайтиСсылкуНаОбъектПоРеквизиту("ДоговорыКонтрагентов", "Наименование",
			ДанныеЗаполненияШапки.НаименованиеОснования, ДоговорКонтрагента, ДанныеЗаполненияШапки.Контрагент);
		Если ДоговорКонтрагента = Неопределено 
			И ДанныеЗаполненияШапки.Свойство("Контрагент") И ЗначениеЗаполнено(ДанныеЗаполненияШапки.Контрагент)
			И ДанныеЗаполненияШапки.Свойство("Организация") И ЗначениеЗаполнено(ДанныеЗаполненияШапки.Организация) Тогда
			
			НовыйДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			НовыйДоговорКонтрагента.Владелец     = ДанныеЗаполненияШапки.Контрагент;
			НовыйДоговорКонтрагента.Организация  = ДанныеЗаполненияШапки.Организация;
			НовыйДоговорКонтрагента.Наименование = ДанныеЗаполненияШапки.НаименованиеОснования;
			Если ДанныеЗаполненияШапки.Свойство("НомерПоДаннымКлиента") Тогда
				НовыйДоговорКонтрагента.НомерДоговора = ДанныеЗаполненияШапки.НомерПоДаннымКлиента;
			КонецЕсли;
			Если ДанныеЗаполненияШапки.Свойство("ДатаПоДаннымКлиента") Тогда
				НовыйДоговорКонтрагента.ДатаДоговора = ДанныеЗаполненияШапки.ДатаПоДаннымКлиента;
			КонецЕсли;
			Если ДанныеЗаполненияШапки.Свойство("Валюта") Тогда
				НовыйДоговорКонтрагента.ВалютаРасчетов = ДанныеЗаполненияШапки.Валюта;
			КонецЕсли;
			
			НовыйДоговорКонтрагента.ОбменДанными.Загрузка = Истина;
			НовыйДоговорКонтрагента.Записать();
			ДоговорКонтрагента = НовыйДоговорКонтрагента.Ссылка
		КонецЕсли;
		ДанныеЗаполненияШапки.Вставить("ДоговорКонтрагента",     ДоговорКонтрагента);
	КонецЕсли;
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТаблицаТоваров);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетФактуры(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
	КонецЕсли;
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				Если СтрокаРеквизита.Реквизит = "Номер" Тогда
					ДанныеЗаполненияШапки.Вставить("НомерЭД", Реквизит);
				ИначеЕсли СтрокаРеквизита.Реквизит = "Дата" Тогда
					ДанныеЗаполненияШапки.Вставить("ДатаЭД", Реквизит);
				Иначе
					ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
				КонецЕсли;
			ИначеЕсли СтрокаРеквизита.Реквизит = "Организация" Тогда
				ТекстОшибки = ТекстОшибкиЗаполненияОрганизации(СтрокаРеквизита, ДеревоРазбора);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
		Иначе
			Если СтрокаРеквизита.Реквизит = "ДокументыОснования" Тогда
				ТаблицаОснований = Документы.СчетФактураПолученный.ПустаяСсылка().ДокументыОснования.ВыгрузитьКолонки();
				Для Каждого Строка Из СтрокаРеквизита.Строки Цикл
					СтрокаТаблицы = ТаблицаОснований.Добавить();
					СтрокаТаблицы.ДокументОснование = Строка.СсылкаНаОбъект;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ДанныеЗаполненияШапки.Вставить("ДокументыОснования", ТаблицаОснований);
	
	ДанныеЗаполненияШапки.Вставить("НомерИсходногоДокумента",
	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсходногоДокумента",
	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
	
	Если ЗначениеЗаполнено(ДанныеЗаполненияШапки.НомерИсходногоДокумента)
		И ЗначениеЗаполнено(ДанныеЗаполненияШапки.ДатаИсходногоДокумента) Тогда
		
		ДанныеЗаполненияШапки.Вставить("НомерИсправленияИсходногоДокумента",
		ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправленияСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("ДатаИсправленияИсходногоДокумента",
		ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаИсправленияСчетаФактуры"));
	КонецЕсли;
	
	ВалКод = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВалКод");
	Валюта = Справочники.Валюты.НайтиПоКоду(ВалКод, Истина);
	ДанныеЗаполненияШапки.Вставить("Валюта",Валюта);
	
	Возврат ДанныеЗаполненияШапки;
	
КонецФункции

Функция ТекстОшибкиЗаполненияОрганизации(СтрокаРеквизита, ДеревоРазбора)
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Не найдена организация по данным электронного документа.'"));
	ИндексСтроки = СтрокаРеквизита.ЗначениеРеквизита;
	СведенияОбОрганизации = ДеревоРазбора.Строки.Найти(ИндексСтроки, "ИндексСтроки", Истина);
	Если СведенияОбОрганизации <> Неопределено Тогда
		СтруктураСведений = Новый Структура("Наименование, ИНН, КПП");
		Для Каждого СтрокаСведений Из СведенияОбОрганизации.Строки Цикл
			Если СтрокаСведений.Реквизит = "ПолноеНаименование" Тогда
				СтруктураСведений.Наименование = СтрокаСведений.ЗначениеРеквизита;
			ИначеЕсли СтрокаСведений.Реквизит = "ИНН" Тогда
				СтруктураСведений.ИНН = СтрокаСведений.ЗначениеРеквизита;
			ИначеЕсли СтрокаСведений.Реквизит = "КПП" Тогда
				СтруктураСведений.КПП = СтрокаСведений.ЗначениеРеквизита;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(СтруктураСведений.Наименование) Тогда
			ПредставлениеОрганизации = СтруктураСведений.Наименование + ", "
				+ ?(ЗначениеЗаполнено(СтруктураСведений.КПП),
					СтрШаблон(НСтр("ru = 'ИНН/КПП %1/%2.'"), СтруктураСведений.ИНН, СтруктураСведений.КПП),
					СтрШаблон(НСтр("ru = 'ИНН %1.'"), СтруктураСведений.ИНН));
			МассивСтрок.Добавить(ПредставлениеОрганизации);
		КонецЕсли;
	КонецЕсли;
	МассивСтрок.Добавить(НСтр("ru = 'Добавьте организацию в справочник и повторите загрузку.'"));
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

Процедура ЗаполнитьСтрокуТЧ(ТЗ, ДанныеЗаполнения, ДеревоРазбора, ЭтоЗаказ = Ложь)
	
	НовСтрока = ТЗ.Добавить();
	
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
		
		Если ИмяРеквизитаВБД = "СуммаСНДС" Тогда
			Если ЭтоЗаказ Тогда
				НовСтрока.Сумма = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ИмяРеквизитаВБД, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение характеристики номенклатуры и упаковки.
		Если ИмяРеквизитаВБД = "НоменклатураПоставщика" Тогда
			Если КолонкаСуществует(ТЗ, "Характеристика") Тогда
				НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
					НовСтрока.Характеристика = НайденноеЗначение.Характеристика;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Реквизит = "ЦенаПродажи" Тогда
			Если КолонкаСуществует(ТЗ, "Цена") Тогда
				НовСтрока.Цена = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Реквизит = "СуммаПродажи" Тогда
			Если КолонкаСуществует(ТЗ, "Сумма") Тогда
				НовСтрока.Сумма = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Реквизит = "Описание" Тогда
			Если КолонкаСуществует(ТЗ, "Содержание") Тогда
				НовСтрока.Содержание = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		Если Не КолонкаСуществует(ТЗ, ИмяРеквизитаВБД) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		
		НовСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
		Если ТекСтрока.Реквизит = "Номенклатура" Тогда
			СтрокаНоменклатура = ДеревоРазбора.Строки.Найти(ТекСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
			НайденнаяСтрока = СтрокаНоменклатура.Строки.Найти("ЕдиницаИзмерения", "Реквизит", Истина);
			Если НайденнаяСтрока <> Неопределено
				И ЗначениеЗаполнено(НайденнаяСтрока.ЗначениеРеквизита) Тогда;
				СтрокаЕдиницаИзмерения = ДеревоРазбора.Строки.Найти(НайденнаяСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
				Если СтрокаЕдиницаИзмерения <> Неопределено Тогда
					Если ЗначениеЗаполнено(СтрокаЕдиницаИзмерения.ЗначениеРеквизита) Тогда
						НовСтрока.ЕдиницаИзмерения = СтрокаЕдиницаИзмерения.ЗначениеРеквизита;
					Иначе
						НовСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ЕдиницаИзмеренияПоКоду(СтрокаЕдиницаИзмерения.ИД);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуТЧАктаНаПередачуПрав(ТЗ, ДанныеЗаполнения, ДеревоРазбора)
	
	НовСтрока = ТЗ.Добавить();
	НДСВСумме = Ложь;
	
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
		Если ТЗ.Колонки.Найти(ИмяРеквизитаВБД) = Неопределено Тогда
			Если ИмяРеквизитаВБД = "НДСУчтеноВСумме" Тогда
				НДСВСумме = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			ИначеЕсли ВРег(ТекСтрока.Реквизит) = "ИД" И ЗначениеЗаполнено(ТекСтрока.ЗначениеРеквизита) Тогда
				НайденноеЗначение = Справочники.НоменклатураПоставщиков.НайтиПоРеквизиту("Идентификатор", ТекСтрока.ЗначениеРеквизита);
				Если ЗначениеЗаполнено(НайденноеЗначение) И ЗначениеЗаполнено(НайденноеЗначение.Характеристика) Тогда
					НовСтрока.Характеристика = НайденноеЗначение.Характеристика;
				КонецЕсли;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ЗначениеРеквизита = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		
		Если ТекСтрока.Реквизит = "ДокументОснование" Тогда
			НовСтрока.ДокументОснование = ЗначениеРеквизита;
			Продолжить;
		КонецЕсли;
		
		НовСтрока[ИмяРеквизитаВБД] = ЗначениеРеквизита;
		Если ТекСтрока.Реквизит = "Номенклатура" Тогда
			СтрокаНоменклатура = ДеревоРазбора.Строки.Найти(ТекСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
			ЗначениеРеквизита = ПолучитьЗначениеРеквизитаДерева(СтрокаНоменклатура, "ЕдиницаИзмерения", Истина, ДеревоРазбора);
			НовСтрока.ЕдиницаИзмерения = ЗначениеРеквизита;
		КонецЕсли;
		
	КонецЦикла;
	
	НовСтрока.СуммаСНДС = НовСтрока.Сумма + ?(НДСВСумме, 0, НовСтрока.СуммаНДС);
	
КонецПроцедуры

Функция КолонкаСуществует(Таблица, ИмяКолонки)
	
	Результат = Не (Таблица.Колонки.Найти(ИмяКолонки) = Неопределено);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение документов

Функция СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(СтрокаОбъекта.СсылкаНаОбъект) Тогда
		НовЭл = СтрокаОбъекта.СсылкаНаОбъект.ПолучитьОбъект();
		СсылкаНаОбъектНоменклатура = СтрокаОбъекта.СсылкаНаОбъект.Номенклатура;
	Иначе
		НовЭл = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
		СсылкаНаОбъектНоменклатура = Неопределено;
	КонецЕсли;
	
	ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаОбъекта, НовЭл);
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъектНоменклатура) Тогда
		НайденнаяСтрока = СтрокаОбъекта.Строки.Найти("Номенклатура", "Реквизит", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда
				СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
			Иначе
				ИндексИскомойСтроки = НайденнаяСтрока.ЗначениеРеквизита;	
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексИскомойСтроки, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда
						СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НовЭл.Номенклатура = СсылкаНаОбъектНоменклатура;
		// Заполняем идентификатор номенклатуры поставщика, если он получен в реквизите Ид
		СтрокаИд = СтрокаОбъекта.Строки.Найти("Ид", "Реквизит", Истина);
		Если НЕ ЗначениеЗаполнено(НовЭл.Идентификатор) И ЗначениеЗаполнено(СтрокаИд) Тогда
			НовЭл.Идентификатор = СтрокаИд.ЗначениеРеквизита;
		КонецЕсли;
		// Заполнение найденного поставщика (владельца, тип Справочник.Контрагент)
		СтрокиКонтрагенты = ДеревоРазбора.Строки.Найти("Контрагенты", "ТипОбъекта", Истина);
		Если СтрокиКонтрагенты.Строки.Количество() = 1 Тогда
			НовЭл.Владелец = СтрокиКонтрагенты.Строки[0].СсылкаНаОбъект;
		КонецЕсли;		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовЭл.Код) Тогда
		НовЭл.УстановитьНовыйКод();
	КонецЕсли;
	
	НовЭл.ОбменДанными.Загрузка = Истина;
	Попытка
		НовЭл.Записать();
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось создать номенклатуру поставщика.'")
			+ Символы.ПС + НСтр("ru = 'Подробности см. в Журнале регистрации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание элемента справочника Номенклатура поставщиков.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			НовЭл.Метаданные(),,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = НовЭл.Ссылка;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция СоздатьПерезаполнитьБанковскийСчетКонтрагента(СтрокаОбъекта, ДеревоРазбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(СтрокаОбъекта.СсылкаНаОбъект) Тогда
		НовЭл = СтрокаОбъекта.СсылкаНаОбъект.ПолучитьОбъект();
	Иначе
		НовЭл = Справочники.БанковскиеСчета.СоздатьЭлемент();
	КонецЕсли;
	
	НовЭл.НомерСчета = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "НомерСчета");
	НовЭл.Владелец = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "Владелец");
	НовЭл.Банк = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "Банк", , ДеревоРазбора);
	НовЭл.Наименование = СтрокаОбъекта.ОписаниеОбъекта;
	
	НовЭл.ОбменДанными.Загрузка = Истина;
	Попытка
		НовЭл.Записать();
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось создать банковский счет контрагента.'")
			+ Символы.ПС + НСтр("ru = 'Подробности см. в Журнале регистрации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание элемента справочника Банковские счета.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			НовЭл.Метаданные(),,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = НовЭл.Ссылка;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция ОрганизацияПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	Организация = Неопределено;
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И Организации.КПП = &КПП
			|	И НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		НаименованиеПолное = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Организации.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
				|	Организации.НаименованиеПолное = &НаименованиеПолное
				|	И НЕ Организации.ПометкаУдаления";
			Запрос.УстановитьПараметр("НаименованиеПолное", НаименованиеПолное);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Организация = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

Функция КонтрагентПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	Контрагент = Неопределено;
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И Контрагенты.КПП = &КПП
			|	И НЕ Контрагенты.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Контрагент = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И НЕ Контрагенты.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Контрагент = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		НаименованиеПолное = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Контрагенты.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.НаименованиеПолное = &НаименованиеПолное
				|	И НЕ Контрагенты.ПометкаУдаления";
			Запрос.УстановитьПараметр("НаименованиеПолное", НаименованиеПолное);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		
		Фамилия  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
		Имя      = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
		Отчество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
		
		ЭлементыИмени = Новый Массив;
		Если ЗначениеЗаполнено(Фамилия) Тогда
			ЭлементыИмени.Добавить(Фамилия);
		КонецЕсли;
		Если ЗначениеЗаполнено(Имя) Тогда
			ЭлементыИмени.Добавить(Имя);
		КонецЕсли;
		Если ЗначениеЗаполнено(Отчество) Тогда
			ЭлементыИмени.Добавить(Отчество);
		КонецЕсли;
		ПолноеНаименование = СтрСоединить(ЭлементыИмени, " ");
		
		Если ЗначениеЗаполнено(ИНН) Или ЗначениеЗаполнено(НаименованиеПолное) Тогда 
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Контрагенты.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.ИНН = &ИНН";
			Если ЗначениеЗаполнено(ИНН) Тогда
				Запрос.УстановитьПараметр("ИНН", ИНН);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Контрагенты.ИНН = &ИНН", "Контрагенты.НаименованиеПолное = &НаименованиеПолное");
				Запрос.УстановитьПараметр("НаименованиеПолное", ПолноеНаименование);
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

Функция БанковскийСчетКонтрагента(Владелец, БИКБанка, НомерСчета)
	
	БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(НомерСчета) Тогда
		Возврат БанковскийСчет;
	КонецЕсли;
	
	БанковскийСчет = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", НомерСчета,, Владелец);
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат БанковскийСчет;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БИКБанка) Тогда
		Банк = Справочники.КлассификаторБанков.НайтиПоКоду(БИКБанка);
		Если ЗначениеЗаполнено(Банк) Тогда
			НовыйБанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			НовыйБанковскийСчет.Владелец   = Владелец;
			НовыйБанковскийСчет.НомерСчета = НомерСчета;
			НовыйБанковскийСчет.Банк       = Банк;
			НовыйБанковскийСчет.СформироватьНаименование();
			
			НовыйБанковскийСчет.ОбменДанными.Загрузка = Истина;
			Попытка
				НовыйБанковскийСчет.Записать();
				БанковскийСчет = НовыйБанковскийСчет.Ссылка;
			Исключение
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось создать банковский счет контрагента.
					|Номер счета: %1, БИК: %2.'"), НомерСчета, БИКБанка)
					+ Символы.ПС + НСтр("ru = 'Подробности см. в Журнале регистрации.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание элемента справочника Банковские счета.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					НовыйБанковскийСчет.Метаданные(),,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат БанковскийСчет;
	
КонецФункции

Функция ДатаИзСтроки(Строка)
	
	Если ПустаяСтрока(Строка) Тогда 
		Возврат Дата('00010101');
	Иначе
		Возврат Дата(Сред(Строка, 7, 4) + Сред(Строка, 4, 2) + Сред(Строка, 1, 2) + "000000");
	КонецЕсли;
	
КонецФункции

Функция ТаблицаСведенийОНоменклатуреПоставщика()
	
	СведенияОНоменклатуре = Новый ТаблицаЗначений;
	СведенияОНоменклатуре.Колонки.Добавить("НомерСтроки",
		Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10, 0)));
	СведенияОНоменклатуре.Колонки.Добавить("Владелец",
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	СведенияОНоменклатуре.Колонки.Добавить("Идентификатор",
		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(110)));
	СведенияОНоменклатуре.Колонки.Добавить("Наименование",
		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(110)));
	СведенияОНоменклатуре.Колонки.Добавить("ЕдиницаИзмеренияКод",
		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(4)));
	СведенияОНоменклатуре.Колонки.Добавить("ЕдиницаИзмеренияНаименование",
		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(25)));
		
	Возврат СведенияОНоменклатуре;
	
КонецФункции

Процедура ЗаполнитьНоменклатуруПоставщика(Товары, СведенияОНоменклатуре, ТипыНоменклатуры = Неопределено)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СведенияОНоменклатуре.НомерСтроки КАК НомерСтроки,
		|	СведенияОНоменклатуре.Владелец КАК Владелец,
		|	СведенияОНоменклатуре.Идентификатор КАК Идентификатор,
		|	СведенияОНоменклатуре.Наименование КАК Наименование,
		|	СведенияОНоменклатуре.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
		|	СведенияОНоменклатуре.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияНаименование
		|ПОМЕСТИТЬ ВТ_СведенияОНоменклатуре
		|ИЗ
		|	&СведенияОНоменклатуре КАК СведенияОНоменклатуре
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СведенияОНоменклатуре.НомерСтроки КАК НомерСтроки,
		|	ВТ_СведенияОНоменклатуре.Владелец КАК Владелец,
		|	ВТ_СведенияОНоменклатуре.Идентификатор КАК Идентификатор,
		|	ВТ_СведенияОНоменклатуре.Наименование КАК Наименование,
		|	ВТ_СведенияОНоменклатуре.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
		|	ВТ_СведенияОНоменклатуре.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияНаименование,
		|	НоменклатураПоставщиков.Ссылка КАК Ссылка,
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТ_НоменклатураПоставщика
		|ИЗ
		|	ВТ_СведенияОНоменклатуре КАК ВТ_СведенияОНоменклатуре
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|		ПО ВТ_СведенияОНоменклатуре.Владелец = НоменклатураПоставщиков.Владелец
		|			И ВТ_СведенияОНоменклатуре.Идентификатор = НоменклатураПоставщиков.Идентификатор
		|			И (НЕ НоменклатураПоставщиков.ПометкаУдаления)";
		
		
	Если ТипыНоменклатуры = Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|"; 
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ВТ_НоменклатураПоставщика.НомерСтроки КАК НомерСтроки,
			|	ВТ_НоменклатураПоставщика.Владелец КАК Владелец,
			|	ВТ_НоменклатураПоставщика.Идентификатор КАК Идентификатор,
			|	ВТ_НоменклатураПоставщика.Наименование КАК Наименование,
			|	ВТ_НоменклатураПоставщика.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
			|	ВТ_НоменклатураПоставщика.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияНаименование,
			|	ВТ_НоменклатураПоставщика.Номенклатура КАК Номенклатура,
			|	ВТ_НоменклатураПоставщика.Ссылка КАК НоменклатураПоставщика,
			|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
			|ИЗ
			|	ВТ_НоменклатураПоставщика КАК ВТ_НоменклатураПоставщика
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
			|		ПО ВТ_НоменклатураПоставщика.ЕдиницаИзмеренияКод = ЕдиницыИзмерения.Код
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|"; 
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ВТ_НоменклатураПоставщика.НомерСтроки КАК НомерСтроки,
			|	ВТ_НоменклатураПоставщика.Владелец КАК Владелец,
			|	ВТ_НоменклатураПоставщика.Идентификатор КАК Идентификатор,
			|	ВТ_НоменклатураПоставщика.Наименование КАК Наименование,
			|	ВТ_НоменклатураПоставщика.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
			|	ВТ_НоменклатураПоставщика.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияНаименование,
			|	ВТ_НоменклатураПоставщика.Номенклатура КАК Номенклатура,
			|	ВТ_НоменклатураПоставщика.Ссылка КАК НоменклатураПоставщика,
			|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
			|	ВидыНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры
			|ИЗ
			|	ВТ_НоменклатураПоставщика КАК ВТ_НоменклатураПоставщика
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
			|		ПО ВТ_НоменклатураПоставщика.ЕдиницаИзмеренияКод = ЕдиницыИзмерения.Код
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатуры
			|		ПО ВТ_НоменклатураПоставщика.Номенклатура = ТаблицаНоменклатуры.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
			|		ПО (ТаблицаНоменклатуры.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СведенияОНоменклатуре", СведенияОНоменклатуре);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		СтрокаТовар = Товары[Выборка.НомерСтроки - 1];
		
		Если ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения) Тогда
			СтрокаТовар.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		ИначеЕсли ЗначениеЗаполнено(Выборка.ЕдиницаИзмеренияКод) Тогда
			СтрокаТовар.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ЕдиницаИзмеренияПоКоду(
				Выборка.ЕдиницаИзмеренияКод, Выборка.ЕдиницаИзмеренияНаименование);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.НоменклатураПоставщика) Тогда
			СтрокаТовар.НоменклатураПоставщика = Выборка.НоменклатураПоставщика;
			СтрокаТовар.Номенклатура = Выборка.Номенклатура;
		ИначеЕсли ЗначениеЗаполнено(Выборка.Владелец) Тогда
			НоваяНоменклатураПоставщика = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
			НоваяНоменклатураПоставщика.Владелец      = Выборка.Владелец;
			НоваяНоменклатураПоставщика.Идентификатор = Выборка.Идентификатор;
			НоваяНоменклатураПоставщика.Наименование  = Выборка.Наименование;
			НоваяНоменклатураПоставщика.Записать();
			СтрокаТовар.НоменклатураПоставщика = НоваяНоменклатураПоставщика.Ссылка;
		КонецЕсли;
		
		Если ТипыНоменклатуры <> Неопределено И ЗначениеЗаполнено(Выборка.ТипНоменклатуры) Тогда
			ТипыНоменклатуры.Вставить(Выборка.ТипНоменклатуры, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено,
	Записывать = Истина, СпособОбработки = "")
	
	ВозвращаемоеЗначение = Неопределено;
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	НайденныйДок = Неопределено;
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		РеквизитыИБКонтрагента = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика")
			И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
			
			РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика")
			И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
			
			РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
		КонецЕсли;
		РеквизитыИБ = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеЗаполнения);
	
	ВидДокумента = Перечисления.ВидыДокументов.ТоварнаяНакладная;
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		ВидДокумента = Перечисления.ВидыДокументов.АктВыполненныхРабот;
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		ВидДокумента = Перечисления.ВидыДокументов.АктНаПередачуПрав;
	КонецЕсли;
	
	ДокументОбъект.ВидДокумента = ВидДокумента;
	
	ВидОперации = Перечисления.ВидыОпераций.Реализация;
	Если ДанныеЗаполнения.Свойство("ВидОперации") 
		И ЗначениеЗаполнено(ДанныеЗаполнения.ВидОперации) Тогда
		
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия Тогда
			ВидОперации = Перечисления.ВидыОпераций.Реализация;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
			ВидОперации = Перечисления.ВидыОпераций.Исправление;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЭД.Корректировка Тогда
			ВидОперации = Перечисления.ВидыОпераций.Корректировка;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.НомерИсправления) Тогда
		ВидОперации = Перечисления.ВидыОпераций.Исправление;
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		ВидОперации = Перечисления.ВидыОпераций.Корректировка;
	КонецЕсли;
	
	ДокументОбъект.ВидОперации = ВидОперации;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	ЗаписатьДокумент(ДокументОбъект);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	ВозвращаемоеЗначение = Неопределено;
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетФактуры(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеДляЗагрузки);
	
	ДокументОбъект.ВидДокумента = Перечисления.ВидыДокументов.СчетФактура;
	
	ВидОперации = Перечисления.ВидыОпераций.Реализация;
	Если ЗначениеЗаполнено(ДокументОбъект.НомерИсправления) Тогда
		ВидОперации = Перечисления.ВидыОпераций.Исправление;
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		ВидОперации = Перечисления.ВидыОпераций.Корректировка;
	КонецЕсли;
	
	ДокументОбъект.ВидОперации = ВидОперации;
	
	Если ДанныеДляЗагрузки.Свойство("ДокументыОснования") И ЗначениеЗаполнено(ДанныеДляЗагрузки.ДокументыОснования) Тогда
		ДокументОбъект.ДокументыОснования.Загрузить(ДанныеДляЗагрузки.ДокументыОснования);
	КонецЕсли;
	
	ЗаписатьДокумент(ДокументОбъект);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция НовыйКонтрагент(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца)
	
	ИНН = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ИНН", Истина, ДеревоРазбора);
	КПП = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "КПП", Истина, ДеревоРазбора);
	
	ОфициальноеНаименование = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ОфициальноеНаименование", Истина, ДеревоРазбора);
	
	Если ПустаяСтрока(ОфициальноеНаименование) Тогда
		ОфициальноеНаименование = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ПолноеНаименование", Истина, ДеревоРазбора);
	КонецЕсли; 
	
	Если СсылкаНаВладельца = Неопределено Тогда
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Контрагент.УстановитьНовыйКод();
	Иначе
		Контрагент = СсылкаНаВладельца.ПолучитьОбъект();
	КонецЕсли;

	Контрагент.Наименование = ОфициальноеНаименование;
	Контрагент.НаименованиеПолное = ОфициальноеНаименование;
	Контрагент.ИНН = ИНН;
	Контрагент.КПП = КПП;
	
	Контрагент.Записать();
	КонтрагентСсылка = Контрагент.Ссылка;
	
	Отбор = Новый Структура("Реквизит", "СтрокаТЧРасчетныйСчет");
	МассивСчетов = СтрокаДляЗагрузки.Строки.НайтиСтроки(Отбор);
	
	Для Каждого ЭлементМассива Из МассивСчетов Цикл
		
		НомерСчета = ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "НомерСчета", Истина, ДеревоРазбора);
		Если Не ЗначениеЗаполнено(НомерСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		БанковскийСчет = Неопределено;
		КлиентЭДО.НайтиСсылкуНаОбъектПоРеквизиту("БанковскиеСчета", "НомерСчета",
			НомерСчета, БанковскийСчет, КонтрагентСсылка);
		
		Если БанковскийСчет = Неопределено Тогда
			БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			БанковскийСчет.Владелец = КонтрагентСсылка;
			БанковскийСчет.НомерСчета = НомерСчета;
		Иначе
			БанковскийСчет = БанковскийСчет.ПолучитьОбъект();
			БанковскийСчет.Владелец = КонтрагентСсылка;
		КонецЕсли;
		НаименованиеСчета = ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "Комментарий", Истина, ДеревоРазбора);
		Если ЗначениеЗаполнено(НаименованиеСчета) Тогда
			БанковскийСчет.Наименование = НаименованиеСчета;
		Иначе
			БанковскийСчет.Наименование = НомерСчета;
		КонецЕсли;
		
		БанкБИК = ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "БанкБИК", Истина, ДеревоРазбора);
		Если ЗначениеЗаполнено(БанкБИК) Тогда
			
			Банк = Справочники.КлассификаторБанков.НайтиПоКоду(БанкБИК);
			
			Если Не ЗначениеЗаполнено(Банк) Тогда
				Банк = Справочники.КлассификаторБанков.СоздатьЭлемент();
				Банк.Наименование =  ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "БанкНаименование", Истина, ДеревоРазбора);
				Банк.Код = БанкБИК;
			Иначе
				Банк = Банк.ПолучитьОбъект();
			КонецЕсли;
			
			Банк.КоррСчет = ПолучитьЗначениеРеквизитаДерева(ЭлементМассива, "БанкСчетКорр", Истина, ДеревоРазбора);
			Банк.Записать();
			
			БанковскийСчет.Банк = Банк.Ссылка;
		КонецЕсли;
		
		БанковскийСчет.Записать();
		
	КонецЦикла;
	
	Возврат КонтрагентСсылка;
	
КонецФункции

Процедура СохранитьДанныеКаталогаТоваров(СтрокаЗагрузки, ДеревоРазбора)
	
	ДеревоКартинок = ПолучитьЗначениеРеквизитаДерева(СтрокаЗагрузки, "ДеревоКартинок");
	
	Если ДеревоКартинок <> Неопределено Тогда
		МассивИдентификаторов = Новый Массив;
		Для Каждого СтрокаТовара Из ДеревоКартинок.Строки Цикл
			МассивИдентификаторов.Добавить(СтрокаТовара.ИдентификаторТовара);
		КонецЦикла;
		
		Если МассивИдентификаторов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НоменклатураПоставщиков.Идентификатор,
		|	НоменклатураПоставщиков.Номенклатура
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Идентификатор В(&МассивИдентификаторов)
		|	И НЕ НоменклатураПоставщиков.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТовара = ДеревоКартинок.Строки.Найти(Выборка.Идентификатор, "ИдентификаторТовара");
			Для Каждого СтрокаКартинки Из СтрокаТовара.Строки Цикл
				Файл = Справочники.НоменклатураПрисоединенныеФайлы.СоздатьЭлемент();
				Файл.Наименование = СтрокаКартинки.ИмяФайла;
				Файл.ВладелецФайла = Выборка.Номенклатура;
				ФайлХранилище = ПолучитьИзВременногоХранилища(СтрокаКартинки.АдресВременногоХранилища);
				Файл.ФайлХранилище = Новый ХранилищеЗначения(ФайлХранилище);
				Файл.Записать();
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтрокиТЧ = СтрокаЗагрузки.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	ТабЗагрузки = Новый ТаблицаЗначений;
	ТабЗагрузки.Колонки.Добавить("ИдентификаторТовара");
	ТабЗагрузки.Колонки.Добавить("ЗначенияСвойств");
	
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		ИдентификаторТовара = ЭлектронноеВзаимодействие.ЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаТЧ,
																"НоменклатураПоставщика.Идентификатор");
		
		ЗначенияСвойств = ЭлектронноеВзаимодействие.ЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаТЧ,
																"НоменклатураПоставщика.ЗначенияСвойств");
		Если Не ЗначенияСвойств = Неопределено Тогда
			НовСтрока = ТабЗагрузки.Добавить();
			НовСтрока.ИдентификаторТовара = ИдентификаторТовара;
			НовСтрока.ЗначенияСвойств     = ЗначенияСвойств;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТабЗагрузки.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураПоставщиков.Номенклатура,
		|	НоменклатураПоставщиков.Идентификатор
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Идентификатор В(&МассивИдентификаторов)
		|	И НЕ НоменклатураПоставщиков.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
		Запрос.УстановитьПараметр("МассивИдентификаторов", ТабЗагрузки.ВыгрузитьКолонку("ИдентификаторТовара"));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Строка = ТабЗагрузки.Найти(Выборка.Идентификатор, "ИдентификаторТовара");
			Для Каждого Свойство Из Строка.ЗначенияСвойств Цикл
				Если Сред(Свойство.ИД, 1, 8) = "Свойство" Тогда
					СвойствоСсылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
																									Свойство.Наименование);
					Если НЕ ЗначениеЗаполнено(СвойствоСсылка) Тогда
						НоваяХарактеристика = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
						НоваяХарактеристика.Наименование = Свойство.Наименование;
						НоваяХарактеристика.ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов");
						НоваяХарактеристика.Записать();
						СвойствоСсылка = НоваяХарактеристика.Ссылка;
					КонецЕсли;
					
					Если СвойствоСсылка.ТипЗначения = Новый ОписаниеТипов("Строка") Тогда
						ЗначениеСвойства = Свойство.Значение[0];
					ИначеЕсли СвойствоСсылка.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
						ЗначениеСвойства = Булево(Свойство.Значение[0]);
					ИначеЕсли СвойствоСсылка.ТипЗначения = Новый ОписаниеТипов("Дата") Тогда
						ЗначениеСвойства = Дата(Свойство.Значение[0]);
					ИначеЕсли СвойствоСсылка.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
						ЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(Свойство.Значение[0]);
						Если НЕ ЗначениеЗаполнено(ЗначениеСвойства) Тогда
							НовоеЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
							НовоеЗначениеСвойства.Наименование = Свойство.Значение[0];
							НовоеЗначениеСвойства.Владелец = СвойствоСсылка;
							НовоеЗначениеСвойства.Записать();
							ЗначениеСвойства = НовоеЗначениеСвойства.Ссылка;
						КонецЕсли;
					КонецЕсли;
					
					ТоварОбъект = Выборка.Номенклатура.ПолучитьОбъект();
					СтрокаСвойств = ТоварОбъект.ДополнительныеРеквизиты.Найти(СвойствоСсылка, "Свойство");
					Если СтрокаСвойств = Неопределено Тогда
						СтрокаСвойств = ТоварОбъект.ДополнительныеРеквизиты.Добавить();
					КонецЕсли;
					СтрокаСвойств.Свойство = СвойствоСсылка;
					СтрокаСвойств.Значение = ЗначениеСвойства;
					ТоварОбъект.Записать();
				ИначеЕсли Свойство.ИД = "Штрихкод" Тогда
					ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
					Если ЗначениеЗаполнено(Свойство.Наименование) Тогда
						ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоКоду(Свойство.Наименование);
					КонецЕсли;
					Для Каждого Штрихкод Из Свойство.Значение Цикл
						МенеджерЗаписи = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Владелец = Выборка.Номенклатура;
						МенеджерЗаписи.ЕдиницаИзмерения = ЕдиницаИзмерения;
						МенеджерЗаписи.Штрихкод = Штрихкод;
						МенеджерЗаписи.Прочитать();
						Если Не МенеджерЗаписи.Выбран() Тогда
							МенеджерЗаписи.Владелец = Выборка.Номенклатура;
							МенеджерЗаписи.ЕдиницаИзмерения = ЕдиницаИзмерения;
							МенеджерЗаписи.Штрихкод = Штрихкод;
							МенеджерЗаписи.Записать();
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДокумент(ДокументОбъект, РежимЗаписиПроведение = Истина)
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПроверитьЗаполнениеБезВыводаОшибок");
	
	Если РежимЗаписиПроведение
		И (ДокументОбъект.Проведен ИЛИ (ДокументОбъект.ЭтоНовый() И ДокументОбъект.ПроверитьЗаполнение()))Тогда
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов.

Процедура ЗаполнитьДеревоДанныхУПД(СтруктураДанных, СтруктураЭД, ДеревоДанных)
	
	ВыборкаШапки = СтруктураДанных.ВыборкаШапки;
	
	СведенияОПродавце = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапки.Организация) Тогда
		ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Организация, СведенияОПродавце);
		
		Если ТипЗнч(ВыборкаШапки.Ссылка) <> Тип("ДокументСсылка.СчетФактураВыданный")
			И ЗначениеЗаполнено(ВыборкаШапки.БанковскийСчетОрганизации) Тогда
			Справочники.БанковскиеСчета.ЗаполнитьРеквизитыБанковскогоСчета(СведенияОПродавце, ВыборкаШапки.БанковскийСчетОрганизации);
		КонецЕсли;
		
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПродавце, "СведенияОПродавце");
		
		СоставительДокументаНаименование = СведенияОПродавце.ПолноеНаименование
			+ ?(ЗначениеЗаполнено(СведенияОПродавце.КПП),
				СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), СведенияОПродавце.ИНН, СведенияОПродавце.КПП),
				СтрШаблон(НСтр("ru = ', ИНН %1'"), СведенияОПродавце.ИНН));
				
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.Организация");	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СоставительДокументаНаименование", СоставительДокументаНаименование, ПараметрыОбработкиОшибок);
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.Организация");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОПродавце", СведенияОПродавце, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	СведенияОПокупателе = Неопределено; 
	Если ЗначениеЗаполнено(ВыборкаШапки.Контрагент) Тогда
		ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Контрагент, СведенияОПокупателе);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе, "СведенияОПокупателе");
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.Контрагент");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОПокупателе", СведенияОПокупателе, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	// Обработка ошибки с указанием расширенного текста сообщения вместо параметров обработки ошибки.
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
	|	- в документе указана валюта,
	|	- для нее заполнен код по Общероссийскому классификатору валют.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод",
		ВыборкаШапки.ВалютаКод, ТекстОшибки);
	
	Если ВыборкаШапки.ВидДокумента = Перечисления.ВидыДокументов.ТоварнаяНакладная Тогда
		
		Если ЗначениеЗаполнено(ВыборкаШапки.Грузоотправитель) Тогда
			СведенияОГрузоотправителе = Неопределено; 
			ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Грузоотправитель, СведенияОГрузоотправителе);
			ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОГрузоотправителе, "СведенияОГрузоотправителе.Грузоотправитель");
		Иначе
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОГрузоотправителе.ОнЖе", Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаШапки.Грузополучатель) Тогда
			СведенияОГрузополучателе = Неопределено; 
			ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Грузополучатель, СведенияОГрузополучателе);
			ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОГрузополучателе, "СведенияОГрузополучателе");
		Иначе
			ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе, "СведенияОГрузополучателе");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураЭД.Функция <> "СЧФ" Тогда 
		
		Если ЗначениеЗаполнено(ВыборкаШапки.ДоговорКонтрагента) Тогда
			
			ОснованиеОтгрузкиТоваров = Новый ТаблицаЗначений;
			ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДоговорКонтрагента");
			ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНаименование");
			ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНомер");
			ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДата");
			ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДопСведения");
			
			НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
			НоваяСтрока.ДоговорКонтрагента   = ВыборкаШапки.ДоговорКонтрагента;
			НоваяСтрока.ДокументНаименование = ВыборкаШапки.НаименованиеДоговора;
			НоваяСтрока.ДокументНомер        = ВыборкаШапки.НомерДоговора;
			НоваяСтрока.ДокументДата         = ВыборкаШапки.ДатаДоговора;
			
			// Дополним таблицу оснований параметрами обработки ошибок.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
				"ДокументНаименование", "ДоговорКонтрагента", "Объект.Наименование");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
				"ДокументНомер", "ДоговорКонтрагента", "Объект.НомерДоговора");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
				"ДокументДата", "ДоговорКонтрагента", "Объект.ДатаДоговора");
			
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "ОснованиеОтгрузкиТоваров");
			
		КонецЕсли;
		
		Если ВыборкаШапки.ВидДокумента = Перечисления.ВидыДокументов.ТоварнаяНакладная Тогда
			
			Если ЗначениеЗаполнено(ВыборкаШапки.Перевозчик) Тогда
				СведенияОПеревозчике = Неопределено; 
				ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Перевозчик, СведенияОПеревозчике);
				ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПеревозчике, "СведенияОПеревозчике");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаШапки.ДатаОтгрузки) Тогда
				ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
					"Объект.ДатаОтгрузки");
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров",
					ВыборкаШапки.ДатаОтгрузки, ПараметрыОбработкиОшибок);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаШапки.СведенияОТранспортировкеИГрузе) Тогда
				ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
					"Объект.СведенияОТранспортировкеИГрузе");
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОТранспортировке",
					ВыборкаШапки.СведенияОТранспортировкеИГрузе, ПараметрыОбработкиОшибок);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаШапки.НомерТранспортнойНакладной)
				ИЛИ ЗначениеЗаполнено(ВыборкаШапки.ДатаТранспортнойНакладной) Тогда
				
				ТранспортнаяНакладная = Новый ТаблицаЗначений;
				ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяНомер");
				ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяДата");
				
				НоваяСтрока = ТранспортнаяНакладная.Добавить();
				НоваяСтрока.ТранспортнаяНакладнаяНомер = ВыборкаШапки.НомерТранспортнойНакладной;
				НоваяСтрока.ТранспортнаяНакладнаяДата  = ВыборкаШапки.ДатаТранспортнойНакладной;
				
				// Дополним таблицу транспортных накладных параметрами обработки ошибок.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
					"ТранспортнаяНакладнаяНомер", ВыборкаШапки.Ссылка, "Объект.НомерТранспортнойНакладной");
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
					"ТранспортнаяНакладнаяДата", ВыборкаШапки.Ссылка, "Объект.ДатаТранспортнойНакладной");
				
				ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТранспортнаяНакладная, "ТранспортнаяНакладная");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыборкаШапки.ВидДокумента = Перечисления.ВидыДокументов.СчетФактураНаАванс Тогда
		
		ТаблицаАвансы = Новый ТаблицаЗначений;
		ТаблицаАвансы.Колонки.Добавить("НомерСтроки");
		ТаблицаАвансы.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
		ТаблицаАвансы.Колонки.Добавить("ТоварКод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
		ТаблицаАвансы.Колонки.Добавить("ТоварНаименование");
		ТаблицаАвансы.Колонки.Добавить("Признак",  Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1)));
		ТаблицаАвансы.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
		ТаблицаАвансы.Колонки.Добавить("НалоговаяСтавка");
		ТаблицаАвансы.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
		ТаблицаАвансы.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
		
		НомерСтроки = 1;
		ВыборкаТоваров = СтруктураДанных.ВыборкаТоваров;
		Пока ВыборкаТоваров.Следующий() Цикл
			
			НоваяСтрока = ТаблицаАвансы.Добавить();
			НоваяСтрока.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
			
			Если ВыборкаШапки.ОблагаетсяНДСУПокупателя Тогда
				НоваяСтрока.СтоимостьТоваровБезНалога = ВыборкаТоваров.СуммаСНДС;
				НоваяСтрока.НалоговаяСтавка = "НДС исчисляется налоговым агентом";
			Иначе
				НоваяСтрока.СтоимостьТоваровБезНалога = ВыборкаТоваров.СуммаБезНДС;
				НоваяСтрока.НалоговаяСтавка           = ВыборкаТоваров.СтавкаНДС;
				НоваяСтрока.СуммаНалога               = ВыборкаТоваров.СуммаНДС;
				НоваяСтрока.СтоимостьТоваровСНалогом  = ВыборкаТоваров.СуммаСНДС;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаТоваров.Номенклатура) Тогда
				НоваяСтрока.ТоварИдентификатор = Строка(ВыборкаТоваров.Номенклатура.УникальныйИдентификатор());
				НоваяСтрока.ТоварКод           = ВыборкаТоваров.НоменклатураКод;
				НоваяСтрока.ТоварНаименование  = ВыборкаТоваров.НоменклатураНаименование;
				
				Если ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
					ЕстьТовары = Истина;
					НоваяСтрока.Признак = "1";
					
				ИначеЕсли ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
					ЕстьРаботы = Истина;
					НоваяСтрока.Признак = "2";
					
				ИначеЕсли ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
					ЕстьУслуги = Истина;
					НоваяСтрока.Признак = "3";
					
				ИначеЕсли ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Право Тогда
					ЕстьПрава = Истина;
					НоваяСтрока.Признак = "4";
					
				КонецЕсли;
				
			Иначе
				НоваяСтрока.ТоварИдентификатор = "00000000-0000-0000-0000-000000000000";
				НоваяСтрока.ТоварНаименование  = НСтр("ru = 'Предварительная оплата'");
				НоваяСтрока.Признак            = "5";
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстОшибки = НСтр("ru = 'Не удалось заполнить итоговые стоимостные показатели. Возможные причины:
		|	- не заполнена табличная часть ""Авансы""
		|	- не заполнены колонки ""Сумма"", ""НДС""'");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога", ТаблицаАвансы.Итог("СтоимостьТоваровБезНалога"), ТекстОшибки);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом", ТаблицаАвансы.Итог("СтоимостьТоваровСНалогом"), ТекстОшибки);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСуммаНалога", ТаблицаАвансы.Итог("СуммаНалога"), ТекстОшибки);
		
		// Обработка ошибки через механизм сообщений пользователю.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаАвансы,
			"СтоимостьТоваровБезНалога", ВыборкаШапки.Ссылка, "Объект.Товары.Сумма",, "НомерСтроки");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаАвансы,
			"СтоимостьТоваровСНалогом", ВыборкаШапки.Ссылка, "Объект.Товары.Сумма",, "НомерСтроки");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаАвансы,
			"НалоговаяСтавка", ВыборкаШапки.Ссылка, "Объект.Товары.СтавкаНДС",, "НомерСтроки");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаАвансы,
			"СуммаНалога", ВыборкаШапки.Ссылка, "Объект.Товары.СуммаНДС",, "НомерСтроки");
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаАвансы, "СведенияОТоварах");
		
	Иначе
		
		СведенияОТоварах = Новый ТаблицаЗначений;
		СведенияОТоварах.Колонки.Добавить("НомерСтроки");
		СведенияОТоварах.Колонки.Добавить("НомерСтрокиИсходногоДокумента");
		СведенияОТоварах.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
		СведенияОТоварах.Колонки.Добавить("ТоварКод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
		СведенияОТоварах.Колонки.Добавить("ТоварНаименование");
		СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияКод");
		СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
		СведенияОТоварах.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
		СведенияОТоварах.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
		СведенияОТоварах.Колонки.Добавить("НалоговаяСтавка");
		СведенияОТоварах.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
		СведенияОТоварах.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
		СведенияОТоварах.Колонки.Добавить("СведенияОТаможеннойДекларации", Новый ОписаниеТипов("ТаблицаЗначений"));
		СведенияОТоварах.Колонки.Добавить("СтранаПроисхожденияНаименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
		СведенияОТоварах.Колонки.Добавить("Признак", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1)));
		СведенияОТоварах.Колонки.Добавить("Номенклатура");
		СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмерения");
		СведенияОТоварах.Колонки.Добавить("ТоварНаименованиеНавигационнаяСсылка");
		
		ЕстьТовары = Ложь;
		ЕстьУслуги = Ложь;
		ЕстьРаботы = Ложь;
		ЕстьПрава  = Ложь;
		
		НомерСтроки = 1;
		ВыборкаТоваров = СтруктураДанных.ВыборкаТоваров;
		Пока ВыборкаТоваров.Следующий() Цикл
			
			НоваяСтрока = СведенияОТоварах.Добавить();
			НоваяСтрока.НомерСтроки = НомерСтроки;
			НоваяСтрока.НомерСтрокиИсходногоДокумента = ВыборкаТоваров.НомерСтроки;
			НомерСтроки = НомерСтроки +1;
			
			НоваяСтрока.ТоварИдентификатор           = Строка(ВыборкаТоваров.Номенклатура.УникальныйИдентификатор());
			НоваяСтрока.ТоварКод                     = ВыборкаТоваров.НоменклатураКод;
			НоваяСтрока.ТоварНаименование            = ВыборкаТоваров.НоменклатураНаименование;
			НоваяСтрока.ЕдиницаИзмеренияКод          = ВыборкаТоваров.ЕдиницаИзмеренияКод;
			НоваяСтрока.ЕдиницаИзмеренияНаименование = ВыборкаТоваров.ЕдиницаИзмеренияНаименование;
			НоваяСтрока.Количество                   = ВыборкаТоваров.Количество;
			НоваяСтрока.СуммаАкциза                  = ВыборкаТоваров.СуммаАкциза;
			
			Если ВыборкаШапки.ОблагаетсяНДСУПокупателя Тогда
				НоваяСтрока.ЦенаЗаЕдиницуИзмерения    = ВыборкаТоваров.Цена;
				НоваяСтрока.СтоимостьТоваровБезНалога = ВыборкаТоваров.СуммаСНДС;
				НоваяСтрока.НалоговаяСтавка           = "НДС исчисляется налоговым агентом";
			Иначе
				НоваяСтрока.ЦенаЗаЕдиницуИзмерения       = ?(ВыборкаТоваров.Количество = 0, 0,
					Окр(ВыборкаТоваров.СуммаБезНДС / ВыборкаТоваров.Количество, 2));
				НоваяСтрока.СтоимостьТоваровБезНалога    = ВыборкаТоваров.СуммаБезНДС;
				НоваяСтрока.НалоговаяСтавка          = ВыборкаТоваров.СтавкаНДС;
				НоваяСтрока.СуммаНалога              = ВыборкаТоваров.СуммаНДС;
				НоваяСтрока.СтоимостьТоваровСНалогом = ВыборкаТоваров.СуммаСНДС;
			КонецЕсли;
			
			НоваяСтрока.Номенклатура = ВыборкаТоваров.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = ВыборкаТоваров.ЕдиницаИзмерения;
			НоваяСтрока.ТоварНаименованиеНавигационнаяСсылка = ПолучитьНавигационнуюСсылку(
				ВыборкаТоваров.Номенклатура, "Наименование");
			
			Если ВыборкаШапки.ВидДокумента = Перечисления.ВидыДокументов.АктВыполненныхРабот Тогда
				
				Если ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
					ЕстьРаботы = Истина;
					НоваяСтрока.Признак = "2";
				Иначе
					ЕстьУслуги = Истина;
					НоваяСтрока.Признак = "3";
				КонецЕсли;
				
			ИначеЕсли ВыборкаШапки.ВидДокумента = Перечисления.ВидыДокументов.АктНаПередачуПрав Тогда
				ЕстьПрава = Истина;
				НоваяСтрока.Признак = "4";
				
			ИначеЕсли ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
				ЕстьТовары = Истина;
				НоваяСтрока.Признак = "1";
				
			ИначеЕсли ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				ЕстьРаботы = Истина;
				НоваяСтрока.Признак = "2";
				
			ИначеЕсли ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				ЕстьУслуги = Истина;
				НоваяСтрока.Признак = "3";
				
			ИначеЕсли ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Право Тогда
				ЕстьПрава = Истина;
				НоваяСтрока.Признак = "4";
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаТоваров.НомерГТД) Тогда
				СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
				СведенияОТаможеннойДекларации.Колонки.Добавить("СтранаПроисхожденияКод",
					Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(3)));
				СведенияОТаможеннойДекларации.Колонки.Добавить("ТаможеннаяДекларацияНомер",
					Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(29)));
				СтрокаТД = СведенияОТаможеннойДекларации.Добавить();
				СтрокаТД.ТаможеннаяДекларацияНомер = ВыборкаТоваров.НомерГТД;
				СтрокаТД.СтранаПроисхожденияКод    = ВыборкаТоваров.СтранаПроисхожденияКод;
				НоваяСтрока.СведенияОТаможеннойДекларации   = СведенияОТаможеннойДекларации;
				НоваяСтрока.СтранаПроисхожденияНаименование = ВыборкаТоваров.СтранаПроисхожденияНаименование;
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстОшибки = НСтр("ru = 'Не удалось заполнить итоговые стоимостные показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнены колонки ""Сумма"", ""НДС"", ""Количество""'");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога", СведенияОТоварах.Итог("СтоимостьТоваровБезНалога"), ТекстОшибки);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом", СведенияОТоварах.Итог("СтоимостьТоваровСНалогом"), ТекстОшибки);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСуммаНалога", СведенияОТоварах.Итог("СуммаНалога"), ТекстОшибки);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоКоличество", СведенияОТоварах.Итог("Количество"), ТекстОшибки);
		
		// Обработка ошибки с открытием формы по навигационной ссылке.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезНавигационнуюСсылку(СведенияОТоварах,
			"ТоварНаименование", "ТоварНаименованиеНавигационнаяСсылка");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезОткрытиеФормы(СведенияОТоварах,
			"ТоварНаименование", "Справочник.Номенклатура.ФормаОбъекта",, Новый Структура("Ключ", "Номенклатура"));
		
		// Обработка ошибки через механизм сообщений пользователю.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"ТоварКод", "Номенклатура", "Объект.Код");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"ТоварНаименование", "Номенклатура", "Объект.НаименованиеПолное");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"Количество", ВыборкаТоваров.Ссылка, "Объект.Товары.Количество",, "НомерСтрокиИсходногоДокумента");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"ЦенаЗаЕдиницуИзмерения", ВыборкаТоваров.Ссылка, "Объект.Товары.Цена",, "НомерСтрокиИсходногоДокумента");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"СтоимостьТоваровБезНалога", ВыборкаТоваров.Ссылка, "Объект.Товары.Сумма",, "НомерСтрокиИсходногоДокумента");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"СуммаНалога", ВыборкаТоваров.Ссылка, "Объект.Товары.СуммаНДС",, "НомерСтрокиИсходногоДокумента");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"ЕдиницаИзмеренияНаименование", "ЕдиницаИзмерения", "Объект.Наименование");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"ЕдиницаИзмеренияКод", "ЕдиницаИзмерения", "Объект.Код");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"Признак", "Номенклатура", "Объект.ВидНоменклатуры");
		
		// Обработка ошибки через упрощенный механизм
		ТекстОшибки = НСтр("ru = 'для формирования электронного документа необходимо указать налоговую ставку'");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"НалоговаяСтавка",,, ТекстОшибки);
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияОТоварах, "СведенияОТоварах");
		
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при заполнении страны происхождения в сведениях по ГТД. Возможные причины:
		|	- не заполнена колонка ""Страна происхождения""
		|	- указанной страны нет в классификаторе стран мира'");
		ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДеревоДанных,
			"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод", ТекстОшибки);
		
		Если СтруктураЭД.Функция <> "СЧФ" Тогда 
			
			ТолькоУслуги = Истина;
			СоставСодержания = Новый Массив;
			Если ЕстьТовары ИЛИ ВыборкаШапки.ВидДокумента = Перечисления.ВидыДокументов.ТоварнаяНакладная Тогда
				СоставСодержания.Добавить(НСтр("ru = 'Товары переданы.'"));
				ТолькоУслуги = Ложь;
			КонецЕсли;
			Если ЕстьУслуги ИЛИ ВыборкаШапки.ВидДокумента = Перечисления.ВидыДокументов.АктВыполненныхРабот Тогда
				СоставСодержания.Добавить(НСтр("ru = 'Услуги оказаны в полном объеме.'"));
			КонецЕсли;
			Если ЕстьРаботы ИЛИ ВыборкаШапки.ВидДокумента = Перечисления.ВидыДокументов.АктВыполненныхРабот Тогда
				СоставСодержания.Добавить(НСтр("ru = 'Работы выполнены в полном объеме.'"));
			КонецЕсли;
			Если ЕстьПрава ИЛИ ВыборкаШапки.ВидДокумента = Перечисления.ВидыДокументов.АктНаПередачуПрав Тогда
				СоставСодержания.Добавить(НСтр("ru = 'Имущественные права переданы.'"));
			КонецЕсли;
			СодержаниеОперации = СтрСоединить(СоставСодержания, " ");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоДанныхУКД(СтруктураДанных, СтруктураЭД, ДеревоДанных)
	
	ВыборкаШапки = СтруктураДанных.ВыборкаШапки;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНаправленияНаСогласование", ТекущаяДатаСеанса());
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", 
		НСтр("ru = 'Предлагаю изменить стоимость'"));
	
	СведенияОПродавце = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапки.Организация) Тогда
		ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Организация, СведенияОПродавце);
		
		Если СтруктураЭД.Функция <> "КСЧФ"
			И ПравоДоступа("Чтение", Метаданные.Справочники.БанковскиеСчета)
			И ЗначениеЗаполнено(ВыборкаШапки.БанковскийСчетОрганизации) Тогда
			Справочники.БанковскиеСчета.ЗаполнитьРеквизитыБанковскогоСчета(СведенияОПродавце, ВыборкаШапки.БанковскийСчетОрганизации);
		КонецЕсли;
		
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПродавце, "СведенияОПродавце");
		
		СоставительДокументаНаименование = СведенияОПродавце.ПолноеНаименование
			+ ?(ЗначениеЗаполнено(СведенияОПродавце.КПП),
				СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), СведенияОПродавце.ИНН, СведенияОПродавце.КПП),
				СтрШаблон(НСтр("ru = ', ИНН %1'"), СведенияОПродавце.ИНН));
				
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.Организация");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СоставительДокументаНаименование", СоставительДокументаНаименование, ПараметрыОбработкиОшибок);
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.Организация");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОПродавце", СведенияОПродавце, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	СведенияОПокупателе = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапки.Контрагент) Тогда
		ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Контрагент, СведенияОПокупателе);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе, "СведенияОПокупателе");
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.Контрагент");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОПокупателе", СведенияОПокупателе, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	// Обработка ошибки с указанием расширенного текста сообщения вместо параметров обработки ошибки.
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
	|	- в документе указана валюта,
	|	- для нее заполнен код по Общероссийскому классификатору валют.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод",
		ВыборкаШапки.ВалютаКод, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ВыборкаШапки.ИдентификаторГосКонтракта) Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.ИдентификаторГосКонтракта");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ВыборкаШапки.ИдентификаторГосКонтракта, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	Если СтруктураЭД.Функция <> "КСЧФ" Тогда
		
		Если ЗначениеЗаполнено(ВыборкаШапки.ДоговорКонтрагента) Тогда
			
			ОснованиеКорректировки = Новый ТаблицаЗначений;
			ОснованиеКорректировки.Колонки.Добавить("ДоговорКонтрагента");
			ОснованиеКорректировки.Колонки.Добавить("ДокументНаименование");
			ОснованиеКорректировки.Колонки.Добавить("ДокументНомер");
			ОснованиеКорректировки.Колонки.Добавить("ДокументДата");
			ОснованиеКорректировки.Колонки.Добавить("ДокументДопСведения");
			
			НоваяСтрока = ОснованиеКорректировки.Добавить();
			НоваяСтрока.ДоговорКонтрагента   = ВыборкаШапки.ДоговорКонтрагента;
			НоваяСтрока.ДокументНаименование = ВыборкаШапки.НаименованиеДоговора;
			НоваяСтрока.ДокументНомер        = ВыборкаШапки.НомерДоговора;
			НоваяСтрока.ДокументДата         = ВыборкаШапки.ДатаДоговора;
			
			// Дополним таблицу оснований параметрами обработки ошибок.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
				"ДокументНаименование", "ДоговорКонтрагента", "Объект.Наименование");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
				"ДокументНомер", "ДоговорКонтрагента", "Объект.НомерДоговора");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
				"ДокументДата", "ДоговорКонтрагента", "Объект.ДатаДоговора");
			
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
			
		КонецЕсли;
		
		МассивОписаний = Новый Массив;
		ВыборкаШапки.Сбросить();
		Пока ВыборкаШапки.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаШапки.НомерИсходногоДокумента)
				И ЗначениеЗаполнено(ВыборкаШапки.ДатаИсходногоДокумента) Тогда
				ОписаниеОснования = СтрШаблон(НСтр("ru = 'Универсальный передаточный документ № %1 от %2'"),
					ВыборкаШапки.НомерИсходногоДокумента, Формат(ВыборкаШапки.ДатаИсходногоДокумента, "ДЛФ=D"));
					
				Если ЗначениеЗаполнено(ВыборкаШапки.НомерИсправленияИсходногоДокумента)
					И ЗначениеЗаполнено(ВыборкаШапки.ДатаИсправленияИсходногоДокумента) Тогда
					ОписаниеОснования = ОписаниеОснования + ", " + СтрШаблон(НСтр("ru = 'с учетом исправления № %1 от %2'"),
						ВыборкаШапки.НомерИсправленияИсходногоДокумента,
						Формат(ВыборкаШапки.ДатаИсправленияИсходногоДокумента, "ДЛФ=D"));
				КонецЕсли;
					
				МассивОписаний.Добавить(ОписаниеОснования);
			КонецЕсли;
			
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"РеквизитыПередаточныхДокументов", СтрСоединить(МассивОписаний, ", "));
		
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6)));
	ТаблицаТоваров.Колонки.Добавить("НомерСтрокиИсходногоДокумента");
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("КоличествоДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмеренияДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавкаДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименованиеНавигационнаяСсылка");
	
	ТолькоУслуги = Истина;
	НомерСтроки = 1;
	ВыборкаТоваров = СтруктураДанных.ВыборкаТоваров;
	Пока ВыборкаТоваров.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки;
		НоваяСтрока.НомерСтрокиИсходногоДокумента = ВыборкаТоваров.НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		НоваяСтрока.ТоварНаименование            = ВыборкаТоваров.НоменклатураНаименование;
		НоваяСтрока.ТоварИдентификатор           = Строка(ВыборкаТоваров.Номенклатура.УникальныйИдентификатор());
		НоваяСтрока.ЕдиницаИзмеренияКодДоКорректировки = ВыборкаТоваров.ЕдиницаИзмеренияКод;
		НоваяСтрока.ЕдиницаИзмеренияКод          = ВыборкаТоваров.ЕдиницаИзмеренияКод;
		НоваяСтрока.КоличествоДоКорректировки    = ВыборкаТоваров.КоличествоДоКорректировки;
		НоваяСтрока.Количество                   = ВыборкаТоваров.Количество;
		
		Если ВыборкаШапки.ОблагаетсяНДСУПокупателя Тогда
			НоваяСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки = ВыборкаТоваров.ЦенаДоКорректировки;
			НоваяСтрока.ЦенаЗаЕдиницуИзмерения = ВыборкаТоваров.Цена;
			
			НоваяСтрока.СтоимостьТоваровБезНалогаДоКорректировки = ВыборкаТоваров.СуммаСНДСДоКорректировки;
			НоваяСтрока.СтоимостьТоваровБезНалога           = ВыборкаТоваров.СуммаСНДС;
			НоваяСтрока.СтоимостьТоваровБезНалогаУвеличение = Макс(
				ВыборкаТоваров.СуммаСНДС - ВыборкаТоваров.СуммаСНДСДоКорректировки, 0);
			НоваяСтрока.СтоимостьТоваровБезНалогаУменьшение = Макс(
				ВыборкаТоваров.СуммаСНДСДоКорректировки - ВыборкаТоваров.СуммаСНДС, 0);
				
			НоваяСтрока.НалоговаяСтавкаДоКорректировки = "НДС исчисляется налоговым агентом";
			НоваяСтрока.НалоговаяСтавка                = "НДС исчисляется налоговым агентом";
		Иначе
			НоваяСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки = ?(ВыборкаТоваров.КоличествоДоКорректировки = 0, 0,
				Окр(ВыборкаТоваров.СуммаБезНДСДоКорректировки / ВыборкаТоваров.КоличествоДоКорректировки, 2));
			НоваяСтрока.ЦенаЗаЕдиницуИзмерения = ?(ВыборкаТоваров.Количество = 0, 0,
				Окр(ВыборкаТоваров.СуммаБезНДС / ВыборкаТоваров.Количество, 2));
			
			НоваяСтрока.СтоимостьТоваровБезНалогаДоКорректировки = ВыборкаТоваров.СуммаБезНДСДоКорректировки;
			НоваяСтрока.СтоимостьТоваровБезНалога           = ВыборкаТоваров.СуммаБезНДС;
			НоваяСтрока.СтоимостьТоваровБезНалогаУвеличение = Макс(
				ВыборкаТоваров.СуммаБезНДС - ВыборкаТоваров.СуммаБезНДСДоКорректировки, 0);
			НоваяСтрока.СтоимостьТоваровБезНалогаУменьшение = Макс(
				ВыборкаТоваров.СуммаБезНДСДоКорректировки - ВыборкаТоваров.СуммаБезНДС, 0);
			
			НоваяСтрока.НалоговаяСтавкаДоКорректировки = ВыборкаТоваров.СтавкаНДС;
			НоваяСтрока.НалоговаяСтавка                = ВыборкаТоваров.СтавкаНДС;
		
			НоваяСтрока.СуммаНалогаДоКорректировки = ВыборкаТоваров.СуммаНДСДоКорректировки;
			НоваяСтрока.СуммаНалога                = ВыборкаТоваров.СуммаНДС;
			НоваяСтрока.СуммаНалогаУвеличение      = Макс(
				ВыборкаТоваров.СуммаНДС - ВыборкаТоваров.СуммаНДСДоКорректировки, 0);
			НоваяСтрока.СуммаНалогаУменьшение      = Макс(
				ВыборкаТоваров.СуммаНДСДоКорректировки - ВыборкаТоваров.СуммаНДС, 0);
			
			НоваяСтрока.СтоимостьТоваровСНалогомДоКорректировки = ВыборкаТоваров.СуммаСНДСДоКорректировки;
			НоваяСтрока.СтоимостьТоваровСНалогом                = ВыборкаТоваров.СуммаСНДС;
			НоваяСтрока.СтоимостьТоваровСНалогомУвеличение      = Макс(
				ВыборкаТоваров.СуммаСНДС - ВыборкаТоваров.СуммаСНДСДоКорректировки, 0);
			НоваяСтрока.СтоимостьТоваровСНалогомУменьшение      = Макс(
				ВыборкаТоваров.СуммаСНДСДоКорректировки - ВыборкаТоваров.СуммаСНДС, 0);
		КонецЕсли;
		
		НоваяСтрока.СуммаАкцизаДоКорректировки = ВыборкаТоваров.СуммаАкцизаДоКорректировки;
		НоваяСтрока.СуммаАкциза                = ВыборкаТоваров.СуммаАкциза;
		НоваяСтрока.СуммаАкцизаУвеличение      = Макс(
			ВыборкаТоваров.СуммаАкциза - ВыборкаТоваров.СуммаАкцизаДоКорректировки, 0);
		НоваяСтрока.СуммаАкцизаУменьшение      = Макс(
			ВыборкаТоваров.СуммаАкцизаДоКорректировки - ВыборкаТоваров.СуммаАкциза, 0);
		
		Если НЕ ЗначениеЗаполнено(ВыборкаТоваров.ТипНоменклатуры)
			ИЛИ ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.Номенклатура = ВыборкаТоваров.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ВыборкаТоваров.ЕдиницаИзмерения;
		НоваяСтрока.ТоварНаименованиеНавигационнаяСсылка = ПолучитьНавигационнуюСсылку(
			ВыборкаТоваров.Номенклатура, "Наименование");
		
	КонецЦикла;
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить итоговые стоимостные показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- значения колонок ""Сумма"", ""НДС"", ""Количество"" до и после корректировки не отличаются'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение",
		ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУвеличение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение",
		ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУвеличение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение",
		ТаблицаТоваров.Итог("СуммаНалогаУвеличение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение",
		ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУменьшение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение",
		ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУменьшение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение",
		ТаблицаТоваров.Итог("СуммаНалогаУменьшение"),
		ТекстОшибки);
		
	// Обработка ошибки с открытием формы по навигационной ссылке.
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезНавигационнуюСсылку(ТаблицаТоваров,
		"ТоварНаименование", "ТоварНаименованиеНавигационнаяСсылка");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезОткрытиеФормы(ТаблицаТоваров,
		"ТоварНаименование", "Справочник.Номенклатура.ФормаОбъекта",, Новый Структура("Ключ", "Номенклатура"));
	
	// Обработка ошибки через механизм сообщений пользователю.
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ТоварКод", "Номенклатура", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ТоварНаименование", "Номенклатура", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Количество", ВыборкаШапки.Ссылка, "Объект.Товары.Количество",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"КоличествоДоКорректировки", ВыборкаШапки.Ссылка, "Объект.Товары.КоличествоДоКорректировки",,
		"НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЦенаЗаЕдиницуИзмерения", ВыборкаШапки.Ссылка, "Объект.Товары.Цена",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЦенаЗаЕдиницуИзмеренияДоКорректировки", ВыборкаШапки.Ссылка, "Объект.Товары.ЦенаДоКорректировки",,
		"НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СтоимостьТоваровБезНалога", ВыборкаШапки.Ссылка, "Объект.Товары.Сумма",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СтоимостьТоваровБезНалогаДоКорректировки", ВыборкаШапки.Ссылка, "Объект.Товары.СуммаДоКорректировки",,
		"НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СуммаНалога", ВыборкаШапки.Ссылка, "Объект.Товары.СуммаНДС",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СуммаНалогаДоКорректировки", ВыборкаШапки.Ссылка, "Объект.Товары.СуммаНДСДоКорректировки",,
		"НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКод", "ЕдиницаИзмерения", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКодДоКорректировки", "ЕдиницаИзмерения", "Объект.Код");
	
	// Обработка ошибки через упрощенный механизм
	ТекстОшибки = НСтр("ru = 'для формирования электронного документа необходимо указать налоговую ставку'");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"НалоговаяСтавка",,, ТекстОшибки);
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"НалоговаяСтавкаДоКорректировки",,, ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ФорматCML = Ложь)
	
	// Подготовим параметры обработки ошибок
	КлючДанных = Неопределено;
	СведенияОбУчастнике.Свойство("Ссылка", КлючДанных);
	
	ПараметрыОбработкиОшибокИНН = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		КлючДанных, "Объект.ИНН");
	ПараметрыОбработкиОшибокКПП = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		КлючДанных, "Объект.КПП");
	ПараметрыОбработкиОшибокНаименование = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		КлючДанных, "Объект.НаименованиеПолное");
	
	ПостфиксПоляАдрес = ?(ТипЗнч(СведенияОбУчастнике.Ссылка) = Тип("СправочникСсылка.Контрагенты"), "Контрагента", "Организации");
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		СведенияОбУчастнике.Ссылка, "КонтактнаяИнформацияПолеЮрАдрес" + ПостфиксПоляАдрес, ".");
	
	ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДеревоДанных, ВидУчастника + ".Адрес",
		ПараметрыОбработкиОшибок);
		
	Если ЗначениеЗаполнено(СведенияОбУчастнике.ЮридическийАдресЗначенияПолей) Тогда
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(СведенияОбУчастнике.ЮридическийАдресЗначенияПолей);
		Если ФорматCML Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".Адрес.Иностранный.КодСтр", СведенияОбАдресе.КодСтраны,
				ПараметрыОбработкиОшибок);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".Адрес.Иностранный.АдрТекст", СведенияОбУчастнике.ЮридическийАдрес,
				ПараметрыОбработкиОшибок);
		Иначе
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".Адрес.Иностранный.КодСтраны", СведенияОбАдресе.КодСтраны,
				ПараметрыОбработкиОшибок);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".Адрес.Иностранный.АдресТекст", СведенияОбУчастнике.ЮридическийАдрес,
				ПараметрыОбработкиОшибок);
		КонецЕсли;
	КонецЕсли;
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
									СведенияОбУчастнике.ИНН, ПараметрыОбработкиОшибокИНН);
									
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
									СведенияОбУчастнике.КПП, ПараметрыОбработкиОшибокКПП);
									
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование, ПараметрыОбработкиОшибокНаименование);
									
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование, ПараметрыОбработкиОшибокНаименование);
									
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.Страна",
									СведенияОбАдресе.Страна);
									
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель И Не ФорматCML Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.ИНН",
									СведенияОбУчастнике.ИНН, ПараметрыОбработкиОшибокИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Фамилия",
									СведенияОбУчастнике.Фамилия, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Имя",
									СведенияОбУчастнике.Имя, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Отчество",
									СведенияОбУчастнике.Отчество, ПараметрыОбработкиОшибокНаименование);
									
		Если ЗначениеЗаполнено(СведенияОбУчастнике.СвидетельствоСерияНомер) Тогда
			Свидетельство = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Свидетельство №%1 от %2'"),
							СведенияОбУчастнике.СвидетельствоСерияНомер,
							Формат(СведенияОбУчастнике.СвидетельствоДатаВыдачи, "ДЛФ=D"));
			
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				КлючДанных, "Объект.СвидетельствоСерияНомер");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации",
										Свидетельство, ПараметрыОбработкиОшибок);
		КонецЕсли;
		
	Иначе
		
		ПолныйПуть = ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование";
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть,
				СведенияОбУчастнике.ПолноеНаименование, ПараметрыОбработкиОшибокНаименование);
		КонецЕсли;
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
									СведенияОбУчастнике.ИНН, ПараметрыОбработкиОшибокНаименование);
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОбУчастнике.ПолноеНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Фамилия",
									ФИО.Фамилия, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Имя",
									ФИО.Имя, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Отчество",
									ФИО.Отчество, ПараметрыОбработкиОшибокНаименование);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны)
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".Контакт.Телефон") Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Контакт.Телефон",
			СведенияОбУчастнике.Телефоны, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета)
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".БанковскийСчет") Тогда
		Банк = "";
		БИК = "";
		
		ПараметрыОбработкиОшибок = Неопределено;
		Если СведенияОбУчастнике.Свойство("БанковскийСчет") Тогда
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				СведенияОбУчастнике.БанковскийСчетСсылка, "Объект.НомерСчета");
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскийСчет.НомерСчета",
				НомерСчета, ПараметрыОбработкиОшибок);
				
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			ПараметрыОбработкиОшибок = Неопределено;
			Если СведенияОбУчастнике.Свойство("БанкСсылка") Тогда
				ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
					СведенияОбУчастнике.БанкСсылка, "Объект.Наименование");
			КонецЕсли;
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскийСчет.НаимБанк",
										Банк, ПараметрыОбработкиОшибок);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ПараметрыОбработкиОшибок = Неопределено;
			Если СведенияОбУчастнике.Свойство("БанкСсылка") Тогда
				ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
					СведенияОбУчастнике.БанкСсылка, "Объект.Код");
			КонецЕсли;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскийСчет.БИК",
										БИК, ПараметрыОбработкиОшибок);
		КонецЕсли;
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Руководитель", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Фамилия", Значение.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Имя", Значение.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Отчество", Значение.Отчество);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Должность", Значение.Должность);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".КодОКПО";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("КодПоОКПО", Значение) Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(КлючДанных,
			"Объект.КодПоОКПО");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение, ПараметрыОбработкиОшибок);
	КонецЕсли;

	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров, СсылкаНаДокумент = Неопределено)

	// Обработка ошибки через механизм сообщений пользователю.
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Артикул", "Номенклатура", "Объект.Артикул");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Наименование", "Номенклатура", "Объект.Наименование");
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда		
		Если ТаблицаТоваров.Колонки.Найти("Количество") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Количество", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("Цена") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Цена", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("Сумма") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Сумма", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"СуммаСкидки", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"СуммаСкидки", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("ЕдиницаИзмеренияКодПоОКЕИ") <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ЕдиницаИзмеренияКодПоОКЕИ", "ЕдиницаИзмерения", "Объект.Код");
		
		// Если единица пустая, надо ссылаться на незаполненность самой единицы, а не ее полей.
		СтрокиСПустойЕдиницей = ТаблицаТоваров.НайтиСтроки(Новый Структура("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка()));
		Если СтрокиСПустойЕдиницей.Количество() Тогда
			Если СсылкаНаДокумент <> Неопределено Тогда
				// Для документов берем единицу прямо из документа.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
					"ЕдиницаИзмеренияКодПоОКЕИ", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			Иначе
				// Иначе ссылаемся на незаполненность единицы в самой номенклатуре.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
					"ЕдиницаИзмеренияКодПоОКЕИ", "Номенклатура", "Объект.ЕдиницаИзмерения");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаКод", "БазоваяЕдиницаСсылка", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаМеждународноеСокращение", "БазоваяЕдиницаСсылка", "Объект.МеждународноеСокращение");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаНаименование", "БазоваяЕдиницаСсылка", "Объект.Наименование");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаНаименованиеПолное", "БазоваяЕдиницаСсылка", "Объект.НаименованиеПолное");
	
	// Если единица пустая, надо ссылаться на незаполненность самой единицы, а не ее полей.
	СтрокиСПустойЕдиницей = ТаблицаТоваров.НайтиСтроки(Новый Структура("БазоваяЕдиницаСсылка", Справочники.ЕдиницыИзмерения.ПустаяСсылка()));
	Если СтрокиСПустойЕдиницей.Количество() Тогда
		Если СсылкаНаДокумент <> Неопределено Тогда
			// Для документов берем единицу прямо из документа.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаКод", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаМеждународноеСокращение", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименование", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименованиеПолное", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
		Иначе
			// Это каталог товаров - для него единица берется из номенклатуры.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаКод", "Номенклатура", "Объект.ЕдиницаИзмерения");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаМеждународноеСокращение", "Номенклатура", "Объект.ЕдиницаИзмерения");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименование", "Номенклатура", "Объект.ЕдиницаИзмерения");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименованиеПолное", "Номенклатура", "Объект.ЕдиницаИзмерения");
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("ВалютаЦены") <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ВалютаЦены", "Валюта", "Объект.Код");
		
		// Если валюта пустая, надо ссылаться на незаполненность самой валюты, а не ее полей.
		СтрокиСПустойВалютой = ТаблицаТоваров.НайтиСтроки(Новый Структура("Валюта", Справочники.Валюты.ПустаяСсылка()));
		Если СтрокиСПустойВалютой.Количество() И СсылкаНаДокумент <> Неопределено Тогда
			Если СсылкаНаДокумент <> Неопределено Тогда
				// Для документов берем валюту прямо из документа.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойВалютой,
					"ВалютаЦены", СсылкаНаДокумент, "Объект.Валюта");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ДатаПолученияТовараПриемкиРабот(СтруктураЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТ_Основание
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
		|ГДЕ
		|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &ВладелецЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Дата КАК Дата
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Основание КАК ВТ_Основание
		|		ПО ПоступлениеТоваровУслуг.Ссылка = ВТ_Основание.ДокументОснование";
	Запрос.УстановитьПараметр("ВладелецЭД", СтруктураЭД.ВладелецЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Дата) Тогда
		ДатаПолучения = Выборка.Дата;
	Иначе
		ДатаПолучения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат ДатаПолучения;
	
Конецфункции

#КонецОбласти
#Область ПрограммныйИнтерфейс

// Формирует текст наименования банковского счета по умолчанию.
//
// Параметры:
//  НомерСчета - Строка - номер банковского счета;
//  ПредставлениеБанка - Строка - наименование банка;
//  ПредставлениеВладельца - Строка - наименование организации или контрагента;
//  Вариант - Число - Вариант формирования наименования.
// 
// Возвращаемое значение:
//  Строка - наименование по умолчанию.
//
Функция НаименованиеБанковскогоСчетаПоУмолчанию(Знач НомерСчета, ПредставлениеБанка, ПредставлениеВладельца,Вариант = 0) Экспорт
	
	ЭлементыНаименования = Новый Массив;
	
	НомерСчета = СокрЛП(НомерСчета);
	Если Вариант = 1 Тогда
		
		Если Не ПустаяСтрока(НомерСчета) Тогда
			ЭлементыНаименования.Добавить(Прав(НомерСчета, 4));
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПредставлениеБанка) Тогда
			ЭлементыНаименования.Добавить(СтрШаблон(НСтр("ru = 'в %1'"), ПредставлениеБанка));
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПредставлениеВладельца) Тогда
			ЭлементыНаименования.Добавить(СтрШаблон(НСтр("ru = '(%1)'"), ПредставлениеВладельца));
		КонецЕсли;
		
		
		Наименование = СтрСоединить(ЭлементыНаименования, " ");
		
	ИначеЕсли Вариант = 2 Тогда
		
		Если Не ПустаяСтрока(ПредставлениеБанка) Тогда
			ЭлементыНаименования.Добавить(ПредставлениеБанка);
		КонецЕсли;
		
		ЭлементыВСкобках = Новый Массив;
		
		Если Не ПустаяСтрока(НомерСчета) Тогда
			ЭлементыВСкобках.Добавить(Прав(НомерСчета, 4));
		КонецЕсли;
		
		СтрокаЭлементыВСкобках = СтрСоединить(ЭлементыВСкобках, ", ");
		Если Не ПустаяСтрока(СтрокаЭлементыВСкобках) Тогда
			ЭлементыНаименования.Добавить(СтрШаблон(НСтр("ru = '(%1)'"), СтрокаЭлементыВСкобках));
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПредставлениеВладельца) Тогда
			ЭлементыНаименования.Добавить(СтрШаблон(НСтр("ru = ', %1'"), ПредставлениеВладельца));
		КонецЕсли;
		
		Наименование = СтрСоединить(ЭлементыНаименования, " ");
		
	Иначе
		
		Если Не ПустаяСтрока(НомерСчета) Тогда
			ЭлементыНаименования.Добавить(Прав(НомерСчета, 4));
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПредставлениеБанка) Тогда
			ЭлементыНаименования.Добавить(ПредставлениеБанка);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПредставлениеВладельца) Тогда
			ЭлементыНаименования.Добавить(ПредставлениеВладельца);
		КонецЕсли;
		
		Наименование = СтрСоединить(ЭлементыНаименования, ", ");
		
	КонецЕсли;
		
	Возврат Лев(Наименование, 100);
	
КонецФункции

// Формирует представление исходящего документа.
//
// Параметры:
//  Данные	 - Структура - Данные для формирования представления документа.
//     * ПредставлениеНомера - Строка - номер документа без префиксов с учетом исправления.
//     * Дата				 - Дата - Дата документа.
//     * ВидДокумента		 - ПеречислениеСсылка.ВидыДокументов - Вид документа.
//     * ВидОперации		 - ПеречислениеСсылка.ВидыОпераций - Вид операции документа.
//  ЭтоНовый - Булево - Признак нового документа.
// 
// Возвращаемое значение:
//  Строка - представление документа.
//
Функция ПредставлениеИсходящегоДокумента(Данные, ЭтоНовый = Ложь) Экспорт
	
	Направление = НСтр("ru = 'Исходящий'");
	Возврат ПредставлениеДокумента(Данные, Направление, ЭтоНовый);
	
КонецФункции

// Формирует представление входящего документа.
//
// Параметры:
//  Данные	 - Структура - Данные для формирования представления документа.
//     * ПредставлениеНомера - Строка - номер документа без префиксов с учетом исправления.
//     * Дата				 - Дата - Дата документа.
//     * ВидДокумента		 - ПеречислениеСсылка.ВидыДокументов - Вид документа.
//     * ВидОперации		 - ПеречислениеСсылка.ВидыОпераций - Вид операции документа.
//  ЭтоНовый - Булево - Признак нового документа.
// 
// Возвращаемое значение:
//  Строка - представление документа.
//
Функция ПредставлениеВходящегоДокумента(Данные, ЭтоНовый = Ложь) Экспорт
	
	Направление = НСтр("ru = 'Входящий'");
	Возврат ПредставлениеДокумента(Данные, Направление, ЭтоНовый);
	
КонецФункции

#Область ОбработкаТабличныхЧастей

// Рассчитывает сумму при изменении количества или цены в строке табличной части документа.
//
// Параметры:
//  СтрокаТаблицы	 - ДанныеФормыЭлементКоллекции - Строка таблицы.
//  ЦенаВключаетНДС	 - Булево - Признак включения НДС в цену и сумму документа.
//
Процедура ПриИзмененииКоличествоЦена(СтрокаТаблицы, ЦенаВключаетНДС = Ложь) Экспорт
	
	СтрокаТаблицы.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
	ПриИзмененииСтавкаНДС(СтрокаТаблицы, ЦенаВключаетНДС);
	
КонецПроцедуры

// Рассчитывает цену при изменении суммы в строке табличной части документа.
//
// Параметры:
//  СтрокаТаблицы	 - ДанныеФормыЭлементКоллекции - Строка таблицы.
//  ЦенаВключаетНДС	 - Булево - Признак включения НДС в цену и сумму документа.
//
Процедура ПриИзмененииСумма(СтрокаТаблицы, ЦенаВключаетНДС = Ложь) Экспорт
	
	СтрокаТаблицы.Цена = ?(СтрокаТаблицы.Количество = 0, 0, СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество);
	ПриИзмененииСтавкаНДС(СтрокаТаблицы, ЦенаВключаетНДС);
	
КонецПроцедуры

// Рассчитывает сумму при изменении ставки НДС в строке табличной части документа.
//
// Параметры:
//  СтрокаТаблицы	 - ДанныеФормыЭлементКоллекции - Строка таблицы.
//  ЦенаВключаетНДС	 - Булево - Признак включения НДС в цену и сумму документа.
//
Процедура ПриИзмененииСтавкаНДС(СтрокаТаблицы, ЦенаВключаетНДС = Ложь) Экспорт
	
	ЗначениеСтавки = КлиентЭДОВызовСервераПовтИсп.ПолучитьСтавкуНДСЧислом(СтрокаТаблицы.СтавкаНДС);
	Если ЦенаВключаетНДС Тогда
		СтрокаТаблицы.СуммаНДС  = СтрокаТаблицы.Сумма - СтрокаТаблицы.Сумма / (1 + ЗначениеСтавки);
		СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.Сумма;
	Иначе
		СтрокаТаблицы.СуммаНДС  = СтрокаТаблицы.Сумма * ЗначениеСтавки;
		СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС;
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает сумму при изменении признака включения НДС в цену.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой производится перерасчет.
//
Процедура ПриИзмененииЦенаВключаетНДС(Форма) Экспорт
	
	ЦенаВключаетНДС = Форма.Объект.ЦенаВключаетНДС;
	Для Каждого СтрокаТаблицы Из Форма.Объект.Товары Цикл
		ПриИзмененииСтавкаНДС(СтрокаТаблицы, ЦенаВключаетНДС);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КомпоновкаДанных

// Добавляет в коллекцию оформляемых полей компоновки данных новое поле
//
// Параметры:
//  КоллекцияОформляемыхПолей 	- КоллекцияОформляемыхПолейКомпоновкиДанных - Коллекция оформляемых полей.
//  ИмяПоля						- Строка - Имя поля.
//
// Возвращаемое значение:
//  ОформляемоеПолеКомпоновкиДанных - Созданное поле.
//
// Пример:
//  Форма.УсловноеОформление.Элементы[0].Поля;
//
Процедура ДобавитьОформляемоеПоле(КоллекцияОформляемыхПолей, ИмяПоля) Экспорт
	
	ОформляемоеПоле = КоллекцияОформляемыхПолей.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
КонецПроцедуры

// Добавляет в коллекцию отбора новую группу указанного типа.
//
// Параметры:
//  КоллекцияЭлементовОтбора - КоллекцияЭлементовОтбораКомпоновкиДанных - Коллекция элементов отбора.
//  ТипГруппы - ГруппаЭлементовОтбораКомпоновкиДанных - ГруппаИ или ГруппаИли.
//
// Возвращаемое значение:
//  ГруппаЭлементовОтбораКомпоновкиДанных - Добавленная группа.
//
Функция ДобавитьГруппуОтбора(КоллекцияЭлементовОтбора, ТипГруппы) Экспорт
	
	ГруппаЭлементовОтбора            = КоллекцияЭлементовОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.ТипГруппы  = ТипГруппы;
	
	Возврат ГруппаЭлементовОтбора;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПредставлениеДокумента(Данные, Направление, ЭтоНовый)
	
	Представление = "";
	
	Если ЭтоНовый Тогда
		
		Если Данные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОпераций.Реализация") Тогда
			Представление = СтрШаблон(НСтр("ru = '%1 (%2) (создание)'"),
				Данные.ВидДокумента,
				Направление);
		Иначе
			Представление = СтрШаблон(НСтр("ru = '%1, %2 (%3) (создание)'"),
				Данные.ВидДокумента,
				Данные.ВидОперации,
				Направление);
		КонецЕсли;
		
	Иначе
		
		Если Данные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОпераций.Реализация") Тогда
			Представление = СтрШаблон(НСтр("ru = '%1 (%2) %3 от %4'"),
				Данные.ВидДокумента,
				Направление,
				Данные.ПредставлениеНомера,
				Формат(Данные.Дата, "ДЛФ=D"));
		Иначе
			Представление = СтрШаблон(НСтр("ru = '%1, %2 (%3) %4 от %5'"),
				Данные.ВидДокумента, 
				Данные.ВидОперации,
				Направление,
				Данные.ПредставлениеНомера,
				Формат(Данные.Дата, "ДЛФ=D"));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

#КонецОбласти
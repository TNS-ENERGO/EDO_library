
#Область СлужебныйПрограммныйИнтерфейс

///////////////////////////////////////////////////////////////////////////////
// Методы, переопределяющие поведение библиотеки БЭД.

// см. ОбменСКонтрагентамиПереопределяемый.ПолучитьАктуальныеВидыЭД.
Процедура ПолучитьАктуальныеВидыЭД(Массив) Экспорт
	
	// Для обмена по форматам CML 2.
	Массив.Добавить(Перечисления.ВидыЭД.ПрайсЛист);
	Массив.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	Массив.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ);
	Массив.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);

	// Для обмена между организациями
	Массив.Добавить(Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями);
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику.
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипИсточника);
	
	Если ТипИсточника = Тип("ДокументСсылка._ДемоПередачаТоваровМеждуОрганизациями")
		ИЛИ ТипИсточника = Тип("ДокументОбъект._ДемоПередачаТоваровМеждуОрганизациями") Тогда

		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.ОрганизацияПолучатель;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка._ДемоЗаказПоставщику")
		ИЛИ ТипИсточника = Тип("ДокументОбъект._ДемоЗаказПоставщику") Тогда
		
		ПараметрыЭД.ВидЭД =  Перечисления.ВидыЭД.ЗаказТовара;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка._ДемоЗаказПокупателя")
		ИЛИ ТипИсточника = Тип("ДокументОбъект._ДемоЗаказПокупателя") Тогда
		
		ПараметрыЭД.ВидЭД =  Перечисления.ВидыЭД.ОтветНаЗаказ;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка._ДемоОперация")
		ИЛИ ТипИсточника = Тип("ДокументОбъект._ДемоОперация") Тогда
		
		ПараметрыЭД.ВидЭД = Источник.ВидЭД;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		
	ИначеЕсли ТипИсточника = Тип("Структура") Тогда
		
		// Бизнес-сеть.
		ЗаполнитьЗначенияСвойств(ПараметрыЭД, Источник);
	
	КонецЕсли;
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков.
Процедура ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца) Экспорт
	
	Владелец = Справочники.НоменклатураПоставщиков.ПустаяСсылка().Владелец;
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка._ДемоПартнеры") Тогда
		ИмяРеквизитаВладельца = "Партнер";
	КонецЕсли;
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ПолучитьСоответствиеПеречислений.
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("ВариантыОплатыКлиентом",   "ВариантыОплатыКлиентом");
	СоответствиеПеречислений.Вставить("ВариантыОплатыПоставщику", "ВариантыОплатыПоставщику");
	СоответствиеПеречислений.Вставить("ФормыОплаты",              "ФормыОплаты");
	СоответствиеПеречислений.Вставить("СпособРасчета",            "СпособРасчета");
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ДополнительнаяАналитикаКонтрагентовСправочникПартнеры.
Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	
	ИспользуетсяСправочникПартнеры = Истина;
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры.
Процедура ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры(ИспользуетсяСправочникХарактеристикиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникХарактеристикиНоменклатуры =
		ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ДополнительнаяАналитикаСправочникУпаковкиНоменклатуры.
Процедура ДополнительнаяАналитикаСправочникУпаковкиНоменклатуры(ИспользуетсяСправочникУпаковкиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникУпаковкиНоменклатуры = Истина;
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ПодготовитьСтруктуруОбъектовКомандЭДО.
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт
	
	СоставКомандЭДО.Исходящие.Добавить("Документ._ДемоЗаказПокупателя");
	СоставКомандЭДО.Исходящие.Добавить("Документ._ДемоЗаказПоставщику");
	СоставКомандЭДО.Исходящие.Добавить("Документ._ДемоОперация");
	
	СоставКомандЭДО.Входящие.Добавить("Документ._ДемоЗаказПокупателя");
	СоставКомандЭДО.Входящие.Добавить("Документ._ДемоЗаказПоставщику");
	СоставКомандЭДО.Входящие.Добавить("Документ._ДемоОперация");
	
	СоставКомандЭДО.БезПодписи.Добавить("Документ._ДемоЗаказПокупателя");
	СоставКомандЭДО.БезПодписи.Добавить("Документ._ДемоЗаказПоставщику");
	СоставКомандЭДО.БезПодписи.Добавить("Документ._ДемоОперация");
	
	СоставКомандЭДО.БезПодписи.Добавить("Документ.РеализацияТоваровУслуг");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ПоступлениеТоваровУслуг");
	СоставКомандЭДО.БезПодписи.Добавить("ЖурналДокументов.ИсходящиеДокументы");
	СоставКомандЭДО.БезПодписи.Добавить("ЖурналДокументов.ВходящиеДокументы");
	
	СоставКомандЭДО.Интеркампани.Добавить("Документ._ДемоПередачаТоваровМеждуОрганизациями");
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоПрайсЛисту.
Процедура ЗаполнитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
	ЗаполнитьПрайсПоСсылкеНаОбъект(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента)
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоСчету.
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|	Товары.Номенклатура.Код КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.ЕдиницаИзмерения КАК БазоваяЕдиницаСсылка,
	|	Товары.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Количество КАК Количество,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	НЕОПРЕДЕЛЕНО КАК УпаковкаНаименование,
	|	1 КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	ЛОЖЬ КАК НДСУчтеноВСумме,
	|	Товары.Цена,
	|	Товары.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименованиеКраткое,
	|	Товары.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка,
	|	Товары.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ._ДемоОперация.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &СсылкаНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ГрафикОплаты.Дата, ДЕНЬ, 3) КАК ДатаПлатежа
	|ИЗ
	|	Документ._ДемоОперация КАК ГрафикОплаты
	|ГДЕ
	|	ГрафикОплаты.Ссылка = &СсылкаНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ГрафикОплаты.Дата, ДЕНЬ, 3) КАК ДатаПлатежа,
	|	30 КАК ПроцентПлатежа,
	|	ВЫРАЗИТЬ(ГрафикОплаты.СуммаДокумента * 0.3 КАК ЧИСЛО(15, 2)) КАК СуммаПлатежа
	|ИЗ
	|	Документ._ДемоОперация КАК ГрафикОплаты
	|ГДЕ
	|	ГрафикОплаты.Ссылка = &СсылкаНаОбъект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ГрафикОплаты.Дата, ДЕНЬ, 2),
	|	30,
	|	ВЫРАЗИТЬ(ГрафикОплаты.СуммаДокумента * 0.3 КАК ЧИСЛО(15, 2))
	|ИЗ
	|	Документ._ДемоОперация КАК ГрафикОплаты
	|ГДЕ
	|	ГрафикОплаты.Ссылка = &СсылкаНаОбъект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ГрафикОплаты.Дата, ДЕНЬ, 1),
	|	40,
	|	ВЫРАЗИТЬ(ГрафикОплаты.СуммаДокумента * 0.4 КАК ЧИСЛО(15, 2))
	|ИЗ
	|	Документ._ДемоОперация КАК ГрафикОплаты
	|ГДЕ
	|	ГрафикОплаты.Ссылка = &СсылкаНаОбъект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплату.Валюта,
	|	СчетНаОплату.Валюта.Код КАК КодВалюты,
	|	СчетНаОплату.Дата,
	|	СчетНаОплату.СуммаДокумента,
	|	ЛОЖЬ КАК ЦенаВключаетНДС,
	|	""Облагается"" КАК НалогообложениеНДС,
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(БанковскиеСчета.НомерСчета, """") КАК СТРОКА(20)) КАК НомерСчета,
	|	БанковскиеСчета.Банк КАК Банк,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Код, """") КАК БИК,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.КоррСчет, """") КАК КоррСчет,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов, НЕОПРЕДЕЛЕНО) КАК БанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА НЕ БанковскиеСчета.Ссылка ЕСТЬ NULL 
	|			ТОГДА ""Оплата поставщику""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НазначениеПлатежа,
	|	ИСТИНА КАК ЧастичнаяОплата,
	|	""Иванов И.Р"" КАК Бухгалтер,
	|	""Иванов Р.И"" КАК Руководитель,
	|	СчетНаОплату.Номер КАК НомерПоДаннымКлиента,
	|	СчетНаОплату.Дата КАК ДатаПоДаннымКлиента,
	|	СчетНаОплату.Основание КАК ДокументОснование,
	|	75 КАК ПроцентОплаты,
	|	СчетНаОплату.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СчетНаОплату.ДоговорКонтрагента.НомерДоговора КАК ДоговорНомер,
	|	СчетНаОплату.ДоговорКонтрагента.ДатаДоговора КАК ДоговорДата,
	|	СчетНаОплату.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
	|	""0197453150000000000008987"" КАК ИдентификаторПлатежа
	|ИЗ
	|	Документ._ДемоОперация КАК СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО СчетНаОплату.БанковскийСчетОрганизации = БанковскиеСчета.Ссылка
	|ГДЕ
	|	СчетНаОплату.Ссылка = &СсылкаНаОбъект";
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КолЭлем = РезультатЗапроса.Количество();
	ТаблицаТоваров = Новый ТаблицаЗначений();
	Если КолЭлем = 4 Тогда
		ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	КонецЕсли;
	
	ТаблицаЭтаповГрафикаОплаты = РезультатЗапроса[КолЭлем-2].Выгрузить();
	РеквизитыШапки= РезультатЗапроса[КолЭлем-1].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс", 1);
	
	Если Не ЗначениеЗаполнено(РеквизитыШапки.Валюта) Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
			"Объект.Валюта");
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(РеквизитыШапки.Валюта, 
			"Объект.Код");
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДокумента, "Валюта", РеквизитыШапки.КодВалюты, ПараметрыОбработкиОшибок);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НалогообложениеНДС", Строка(РеквизитыШапки.НалогообложениеНДС));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НазначениеПлатежа", РеквизитыШапки.НазначениеПлатежа);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ЧастичнаяОплата", Ложь);

	// Заполняем Контрагента
	СведенияОКомитенте = Неопределено; 
	ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Контрагент, СведенияОКомитенте);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомитенте, "Покупатель");
	
	// Заполняем организацию
	СведенияОКомиссионере = Неопределено; 
	ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация, СведенияОКомиссионере);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомиссионере, "Продавец");
	
	// Заполняем документ основание
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
		"Объект.Основание");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования",
		РеквизитыШапки.ДокументОснование, ПараметрыОбработкиОшибок);
	
	// Добавляем в товары доп данные
	ЗаполнитьДопДанныеТаблицыТоваров(ТаблицаТоваров);

	// Заполняется таблица товаров
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	// Заполняется график оплаты.
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаЭтаповГрафикаОплаты, "ГрафикОплаты");
	
	// Заполняется таблица документы сделки.
	ЗаполнитьДокументыСделки(ДеревоДокумента, РеквизитыШапки);
	
	// Заполняется уникальный идентификатор платежа.
	ИдентификаторПлатежа = РеквизитыШапки.ИдентификаторПлатежа;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "УникальныйИдентификаторПлатежа", ИдентификаторПлатежа);
	
	// заполняем итоги по документу
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить сумму документа. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", РеквизитыШапки.СуммаДокумента,
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.Сумма",
		РеквизитыШапки.СуммаДокумента, ТекстОшибки);
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.ЦенаВключаетНДС);
	
	СуммаНДСИтог = 0;
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить итоговую сумму НДС. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма НДС""'");
	Если Не ТаблицаТоваров.Колонки.Найти("СуммаНДС") = Неопределено Тогда
		СуммаНДСИтог = ТаблицаТоваров.Итог("СуммаНДС");
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНДС",
		СуммаНДСИтог, ТекстОшибки);
	
	СуммаСкидкиИтог = 0;
	Если Не ТаблицаТоваров.Колонки.Найти("СуммаСкидки") = Неопределено Тогда
		СуммаСкидкиИтог = ТаблицаТоваров.Итог("СуммаСкидки");
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидки", СуммаСкидкиИтог);
	
	СуммаБезСкидки = РеквизитыШапки.СуммаДокумента - СуммаСкидкиИтог;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидки", СуммаБезСкидки);
	
	СуммаПредставление = "";
	ОбменСКонтрагентамиКЭДО.ФорматСумм(РеквизитыШапки.СуммаДокумента, СуммаПредставление, РеквизитыШапки.Валюта);
	
	Если РеквизитыШапки.ЧастичнаяОплата Тогда
		ИтоговаяСтрока = НСтр("ru='Всего на сумму %СуммаПрописью%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаПрописью%", СуммаПредставление);
	Иначе
		ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      СуммаПредставление);
	КонецЕсли;
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + _ДемоФормированиеПечатныхФорм.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
	Если РезультатЗапроса <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "СрокПлатежа", РезультатЗапроса[1].Выгрузить()[0].ДатаПлатежа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерСчета) Тогда
		
		ДанныеСчета = Новый Структура;
		ДанныеСчета.Вставить("БанковскийСчет", РеквизитыШапки.БанковскийСчет);
		ДанныеСчета.Вставить("НомерСчета", РеквизитыШапки.НомерСчета);
		ДанныеСчета.Вставить("Банк", РеквизитыШапки.Банк);
		ДанныеСчета.Вставить("БанкНаименование", РеквизитыШапки.Банк.Наименование);
		ДанныеСчета.Вставить("БанкБИК", РеквизитыШапки.БИК);
		ДанныеСчета.Вставить("БанкСчетКорр", РеквизитыШапки.КоррСчет);
		
		РеквизитыБанкаКорреспондента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.БанкДляРасчетов, "Наименование, КоррСчет, Код");
		ДанныеСчета.Вставить("БанкДляРасчетов", РеквизитыШапки.БанкДляРасчетов);
		ДанныеСчета.Вставить("БанкКоррНаименование", РеквизитыБанкаКорреспондента.Наименование);
		ДанныеСчета.Вставить("БанкКоррБИК", РеквизитыБанкаКорреспондента.Код);
		ДанныеСчета.Вставить("БанкКоррСчетКорр", РеквизитыБанкаКорреспондента.КоррСчет);
		
		ДобавитьВДеревоДанныеСчета(ДеревоДокумента, ДанныеСчета);
		
	КонецЕсли;
	
	// Тестовые доп. данные.
	ЗаполнитьДопДанные(ДеревоДокумента);
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоЗаказуТоваров.
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
	ДанныеДляПечати = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыЗаказ(СсылкаНаОбъект);
	ТаблицаТоваров = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ПроверитьСопоставлениеСНоменклатуройПоставщика(ТаблицаТоваров, ДеревоДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыШапки = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	РеквизитыШапки.Следующий();
	
	Если Не ЗначениеЗаполнено(РеквизитыШапки.Валюта) Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
			"Объект.Валюта");
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(РеквизитыШапки.Валюта, 
			"Объект.Код");
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.ВалютаКод, ПараметрыОбработкиОшибок);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс", РеквизитыШапки.Курс);
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить сумму документа. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", РеквизитыШапки.СуммаДокумента,
		ТекстОшибки);
	
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
		"Объект.Основание");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования",
		РеквизитыШапки.ДокументОснование, ПараметрыОбработкиОшибок);
	
	// Заполняем Организацию
	СведенияОбОрганизации = Неопределено; 
	ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация, СведенияОбОрганизации);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОбОрганизации, "Покупатель");
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОбОрганизации, "Получатель");
	
	// Заполняем контрагента
	Если ТипЗнч(СтруктураЭД.Контрагент) = Тип("Структура") Тогда
		// Бизнес-сеть.
		ЗаполнитьДанныеУчастника(ДеревоДокумента, СтруктураЭД.Контрагент, "Продавец");
	Иначе
		СведенияОКонтрагенте = Неопределено; 
		ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Контрагент, СведенияОКонтрагенте);
		ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКонтрагенте, "Продавец");
	КонецЕсли;
	
	// Пример заполнения доп данных таблица товаров
	ЗаполнитьДопДанныеТаблицыТоваров(ТаблицаТоваров);
	
	// Заполняется таблица документы сделки
	ЗаполнитьДокументыСделки(ДеревоДокумента, РеквизитыШапки);
	
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	// Заполняем банковский счет
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерСчета) Тогда
		ДобавитьВДеревоДанныеСчета(ДеревоДокумента, РеквизитыШапки);
	КонецЕсли;
	
	ТЗСкидки = Новый ТаблицаЗначений;
	ТЗСкидки.Колонки.Добавить("Наименование");
	ТЗСкидки.Колонки.Добавить("Сумма");
	ТЗСкидки.Колонки.Добавить("Процент");
	ТЗСкидки.Колонки.Добавить("УчтеноВСумме");
	ТЗСкидки.Колонки.Добавить("Комментарий");
	
	Скидка = ТЗСкидки.Добавить();
	Скидка.Наименование = "Скидка";
	Скидка.Сумма = 500;
	Скидка.Процент = "0.0003%";
	Скидка.УчтеноВСумме = Ложь;
	Скидка.Комментарий = НСтр("ru = 'Демонстрационный пример передачи списка скидок по документу.'");
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТЗСкидки, "Скидки");
	
	// пример налогов
	ТзНалоги = Новый ТаблицаЗначений;
	ТзНалоги.Колонки.Добавить("Наименование");
	ТзНалоги.Колонки.Добавить("УчтеноВСумме");
	ТзНалоги.Колонки.Добавить("Акциз");
	ТзНалоги.Колонки.Добавить("Сумма");
	ТзНалоги.Колонки.Добавить("Ставка");
	
	Налог = ТзНалоги.Добавить();
	Налог.Наименование	= "НДС";
	Налог.УчтеноВСумме	= Истина;
	Налог.Акциз			= Ложь;
	Налог.Сумма			= 180;
	Налог.Ставка		= 18;
	
	Налог = ТзНалоги.Добавить();
	Налог.Наименование	= "Акциз";
	Налог.УчтеноВСумме	= Истина;
	Налог.Акциз			= Истина;
	Налог.Сумма			= 130;
	Налог.Ставка		= 13;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТзНалоги, "Налоги");
	
	// заполним строку Итогов
	СуммаИтог = ТаблицаТоваров.Итог("Сумма");
	СкидкаИтог = ТзСкидки.Итог("Сумма");
	НалогиИтог = ТзНалоги.Итог("Сумма");
	
	ТекстОшибки = НСтр("ru = 'Не удалось итоговые стоимостные показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", РеквизитыШапки.СуммаДокумента,
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", 
		СуммаИтог - СкидкаИтог, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог",
		НалогиИтог, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС",
		Истина);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидкиИтог",
		СуммаИтог, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидкиИтог",
		СкидкаИтог, ТекстОшибки);
	
	// Пример использования механизма доп данных.
	ЗаполнитьДопДанные(ДеревоДокумента);
	
	// Заполнение данных о доставке.
	АдресДоставки = Новый Структура("АдресДоставки", РеквизитыШапки.АдресДоставки);
	АдресДоставкиЗначенияПолей = Новый Структура("АдресДоставкиЗначенияПолей", РеквизитыШапки.АдресДоставкиЗначенияПолей);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.СпособДоставки",
		?(РеквизитыШапки.СпособДоставки = Перечисления._ДемоСпособыДоставки.Доставка, "Доставка", "Самовывоз"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставки", РеквизитыШапки.АдресДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставкиЗначенияПолей",
		РеквизитыШапки.АдресДоставкиЗначенияПолей);
	
	// заполним итоги прописью
	ШаблонИтоговаяСтрока = НСтр("ru='Всего наименований %1 на сумму %2'");
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИтоговаяСтрока,
																			ТаблицаТоваров.Количество(),
																			РеквизитыШапки.СуммаДокумента);
																			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоОтветуНаЗаказ.
Процедура ЗаполнитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура.Код КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка,
	|	Товары.ЕдиницаИзмерения КАК БазоваяЕдиницаСсылка,
	|	Товары.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Количество КАК Количество,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	1 КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18) КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(Товары.Сумма * 0.18 КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	Товары.Цена,
	|	ВЫРАЗИТЬ(Товары.Сумма * 0.05 КАК ЧИСЛО(15, 2)) КАК СуммаСкидки,
	|	Товары.Сумма КАК СуммаСНДС,
	|	ИСТИНА КАК НДСУчтеноВСумме,
	|	5 КАК Процент,
	|	Товары.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ._ДемоЗаказПокупателя.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Наличные"" КАК ВариантОплаты,
	|	ДОБАВИТЬКДАТЕ(ЗаказПокупателя.Дата, ДЕНЬ, 4) КАК ДатаПлатежа,
	|	40 КАК ПроцентПлатежа,
	|	ВЫРАЗИТЬ(ЗаказПокупателя.СуммаДокумента * 0.4 КАК ЧИСЛО(15, 2)) КАК СуммаПлатежа
	|ИЗ
	|	Документ._ДемоЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Наличные"",
	|	ДОБАВИТЬКДАТЕ(ЗаказПокупателя.Дата, ДЕНЬ, 3),
	|	50,
	|	ВЫРАЗИТЬ(ЗаказПокупателя.СуммаДокумента * 0.5 КАК ЧИСЛО(15, 2))
	|ИЗ
	|	Документ._ДемоЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Наличные"",
	|	ДОБАВИТЬКДАТЕ(ЗаказПокупателя.Дата, ДЕНЬ, 2),
	|	10,
	|	ВЫРАЗИТЬ(ЗаказПокупателя.СуммаДокумента * 0.1 КАК ЧИСЛО(15, 2))
	|ИЗ
	|	Документ._ДемоЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиента.Валюта КАК Валюта,
	|	ЗаказКлиента.Дата,
	|	ЗаказКлиента.Номер,
	|	ЗаказКлиента.СуммаДокумента,
	|	ИСТИНА КАК ЦенаВключаетНДС,
	|	ЗаказКлиента.НомерПоДаннымПокупателя КАК НомерПоДаннымКлиента,
	|	ЗаказКлиента.ДатаПоДаннымПокупателя КАК ДатаПоДаннымКлиента,
	|	ЗаказКлиента.Комментарий КАК ДополнительнаяИнформация,
	|	ЗаказКлиента.Основание КАК ДокументОснование,
	|	ЗаказКлиента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаказКлиента.ДоговорКонтрагента.НомерДоговора КАК ДоговорНомер,
	|	ЗаказКлиента.ДоговорКонтрагента.ДатаДоговора КАК ДоговорДата,
	|	ЗаказКлиента.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
	|	ЗаказКлиента.БанковскийСчет КАК БанковскийСчет,
	|	ЗаказКлиента.БанковскийСчет.НомерСчета КАК НомерСчета,
	|	ЗаказКлиента.БанковскийСчет.Банк КАК Банк,
	|	ЗаказКлиента.БанковскийСчет.Банк.Наименование КАК БанкНаименование,
	|	ЗаказКлиента.БанковскийСчет.Банк.КоррСчет КАК БанкСчетКорр,
	|	ЗаказКлиента.БанковскийСчет.Банк.Код КАК БанкБИК,
	|	ЗаказКлиента.БанковскийСчет.БанкДляРасчетов КАК БанкДляРасчетов,
	|	ЗаказКлиента.БанковскийСчет.БанкДляРасчетов.Наименование КАК БанкКоррНаименование,
	|	ЗаказКлиента.БанковскийСчет.БанкДляРасчетов.КоррСчет КАК БанкКоррСчетКорр,
	|	ЗаказКлиента.БанковскийСчет.БанкДляРасчетов.Код КАК БанкКоррБИК,
	|	ЗаказКлиента.АдресДоставки КАК АдресДоставки,
	|	ЗаказКлиента.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей,
	|	ЗаказКлиента.СпособДоставки КАК СпособДоставки
	|ИЗ
	|	Документ._ДемоЗаказПокупателя КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка";
	ИмяДопКолонки = ""; 
	ИмяДополнительнойКолонки(ИмяДопКолонки);
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура."+ИмяДопКолонки,""""""));
    Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = МассивРезультатовЗапроса[0].Выгрузить();
	ТаблицаЭтаповГрафикаОплаты= МассивРезультатовЗапроса[1].Выгрузить();
	РеквизитыШапки= МассивРезультатовЗапроса[2].Выбрать();
	РеквизитыШапки.Следующий();
	
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
		"Объект.НомерПоДаннымПокупателя");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НомерДокументаОснования",
		РеквизитыШапки.НомерПоДаннымКлиента, ПараметрыОбработкиОшибок);
		
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
		"Объект.ДатаПоДаннымПокупателя");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДатаДокументаОснования",
		РеквизитыШапки.ДатаПоДаннымКлиента, ПараметрыОбработкиОшибок);
		
	Если Не ЗначениеЗаполнено(РеквизитыШапки.Валюта) Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
			"Объект.Валюта");
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(РеквизитыШапки.Валюта, 
			"Объект.Код");
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.Валюта.Код,
		ПараметрыОбработкиОшибок);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс", 1);
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить сумму документа. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", РеквизитыШапки.СуммаДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Комментарий", РеквизитыШапки.ДополнительнаяИнформация);
	
	ТекстОшибки = НСтр("ru = 'Не удалось итоговые стоимостные показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС",
		РеквизитыШапки.ЦенаВключаетНДС, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог",
		РеквизитыШапки.СуммаДокумента, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог",
		ТаблицаТоваров.Итог("СуммаНДС"), ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидкиИтог",
		РеквизитыШапки.СуммаДокумента, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидкиИтог", 0,
		ТекстОшибки);
	
		// Заполняем банковский счет
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерСчета) Тогда
		ДобавитьВДеревоДанныеСчета(ДеревоДокумента, РеквизитыШапки);
	КонецЕсли;
	
	// Документ основание.
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
		"Объект.Основание");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования", РеквизитыШапки.ДокументОснование,
		ПараметрыОбработкиОшибок);
	
	// Заполняем Контрагентов
	СведенияОКонтрагенте = Неопределено; 
	ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Контрагент, СведенияОКонтрагенте);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКонтрагенте, "Покупатель");
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКонтрагенте, "Получатель");
	
	// Заполняем организацию
	СведенияОбОрганизации = Неопределено; 
	ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация, СведенияОбОрганизации);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОбОрганизации, "Продавец");
	
	// Заполняется таблица документы сделки
	ЗаполнитьДокументыСделки(ДеревоДокумента, РеквизитыШапки);
	
	// Добавляем в товары доп данные
	ЗаполнитьДопДанныеТаблицыТоваров(ТаблицаТоваров);
	
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	// Заполняем график оплаты
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаЭтаповГрафикаОплаты, "ГрафикОплаты");

	// Заполнение данных о доставке.
	АдресДоставки = Новый Структура("АдресДоставки", РеквизитыШапки.АдресДоставки);
	АдресДоставкиЗначенияПолей = Новый Структура("АдресДоставкиЗначенияПолей", РеквизитыШапки.АдресДоставкиЗначенияПолей);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.СпособДоставки",
		?(РеквизитыШапки.СпособДоставки = Перечисления._ДемоСпособыДоставки.Доставка, "Доставка", "Самовывоз"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставки", РеквизитыШапки.АдресДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставкиЗначенияПолей",
		РеквизитыШапки.АдресДоставкиЗначенияПолей);
		
	// Итоги в документе.
	СуммаПредставление = "";
	ОбменСКонтрагентамиКЭДО.ФорматСумм(РеквизитыШапки.СуммаДокумента, СуммаПредставление, РеквизитыШапки.Валюта);
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      СуммаПредставление);
	
	СуммаПрописью  = _ДемоФормированиеПечатныхФорм.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
	// Пример использования механизма доп данных.
	ЗаполнитьДопДанные(ДеревоДокумента);
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара.
Процедура ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
	ДополнительныеРеквизитыДляТаблицыТоваров = Новый Структура;
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ДатаПродажи");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("СтавкаНДС");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательНаименование");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательИНН");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательКПП");
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательФактАдрес", СтруктураАдресаФНС());
	ДополнительныеРеквизитыДляТаблицыТоваров.Вставить("ПокупательЮрАдрес", СтруктураАдресаФНС());

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураПоставщиков.Ссылка,
	|	НоменклатураПоставщиков.Идентификатор,
	|	НоменклатураПоставщиков.Артикул,
	|	НоменклатураПоставщиков.Наименование,
	|	НоменклатураПоставщиков.Номенклатура,
	|	НоменклатураПоставщиков.Характеристика,
	|	НоменклатураПоставщиков.Упаковка
	|ПОМЕСТИТЬ втНоменклатураПоставщика
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.ПометкаУдаления = ЛОЖЬ
	|	И НоменклатураПоставщиков.Номенклатура В
	|			(ВЫБРАТЬ
	|				Таблица.Номенклатура
	|			ИЗ
	|				Документ._ДемоОперация.Товары КАК Таблица
	|			ГДЕ
	|				Таблица.Ссылка = &Ссылка)
	|	И НоменклатураПоставщиков.Владелец В
	|			(ВЫБРАТЬ
	|				Таблица.Контрагент
	|			ИЗ
	|				Документ._ДемоОперация КАК Таблица
	|			ГДЕ
	|				Таблица.Ссылка = &Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(НоменклатураПоставщика.Идентификатор, НЕОПРЕДЕЛЕНО) КАК ИдТовараУКонтрагента,
	|	ЕСТЬNULL(НоменклатураПоставщика.Артикул, """") КАК Артикул,
	|	ЕСТЬNULL(НоменклатураПоставщика.Наименование, """") КАК Наименование,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ДОБАВИТЬКДАТЕ(Товары.Ссылка.Дата, ДЕНЬ, -1) КАК ДатаПродажи,
	|	Товары.Ссылка.Контрагент КАК Контрагент,
	|	Товары.Количество КАК Количество,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	1 КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Сумма КАК Сумма,
	|	ВЫРАЗИТЬ(Товары.Сумма / Товары.Количество КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ВЫРАЗИТЬ(Товары.Сумма / Товары.Количество КАК ЧИСЛО(15, 2)) КАК ЦенаПродажи,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18) КАК СтавкаНДС,
	|	ИСТИНА КАК НДСУчтеноВСумме,
	|	ВЫРАЗИТЬ(Товары.Сумма * 0.18 КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	Товары.Сумма КАК СуммаПродажи,
	|	ВЫРАЗИТЬ(Товары.Сумма * 0.1 КАК ЧИСЛО(15, 2)) КАК СуммаВознаграждения,
	|	Товары.ЕдиницаИзмерения КАК БазоваяЕдиницаСсылка,
	|	Товары.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка,
	|	Товары.Покупатель КАК ПокупательСсылка,
	|	НоменклатураПоставщика.Ссылка КАК НоменклатураПоставщика
	|ИЗ
	|	Документ._ДемоОперация.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураПоставщика КАК НоменклатураПоставщика
	|		ПО Товары.Номенклатура = НоменклатураПоставщика.Номенклатура
	|			И Товары.Характеристика = НоменклатураПоставщика.Характеристика
	|			И (НоменклатураПоставщика.Упаковка = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитенту.Дата КАК Дата,
	|	ОтчетКомитенту.Валюта КАК Валюта,
	|	ОтчетКомитенту.Валюта.Код КАК ВалютаКод,
	|	ОтчетКомитенту.СуммаДокумента КАК СуммаДокумента,
	|	ОтчетКомитенту.Организация КАК Организация,
	|	ОтчетКомитенту.Контрагент КАК Контрагент,
	|	ИСТИНА КАК ЦенаВключаетНДС,
	|	ВЫРАЗИТЬ(ОтчетКомитенту.СуммаДокумента * 0.1 КАК ЧИСЛО(15, 2)) КАК СуммаВознаграждения,
	|	""ОблагаетсяНДС"" КАК НалогообложениеНДС,
	|	ДОБАВИТЬКДАТЕ(ОтчетКомитенту.Дата, ДЕНЬ, -3) КАК НачалоПериода,
	|	ДОБАВИТЬКДАТЕ(ОтчетКомитенту.Дата, ДЕНЬ, 4) КАК КонецПериода,
	|	""Наличные"" КАК ФормаОплаты,
	|	""Процент от суммы"" КАК СпособРасчетаВознаграждения,
	|	10 КАК ПроцентВознаграждения,
	|	ДОБАВИТЬКДАТЕ(ОтчетКомитенту.Дата, ДЕНЬ, 2) КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18) КАК СтавкаНДСВознаграждения,
	|	ВЫРАЗИТЬ(ОтчетКомитенту.СуммаДокумента * 0.018 КАК ЧИСЛО(15, 2)) КАК СуммаНДСВознаграждения,
	|	ОтчетКомитенту.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ОтчетКомитенту.ДоговорКонтрагента.НомерДоговора КАК ДоговорНомер,
	|	ОтчетКомитенту.ДоговорКонтрагента.ДатаДоговора КАК ДоговорДата,
	|	ОтчетКомитенту.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
	|	ОтчетКомитенту.Основание КАК ДокументОснование
	|ИЗ
	|	Документ._ДемоОперация КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ГрафикОплаты.Дата, ДЕНЬ, 3) КАК ДатаПлатежа,
	|	30 КАК ПроцентПлатежа,
	|	ВЫРАЗИТЬ(ГрафикОплаты.СуммаДокумента * 0.3 КАК ЧИСЛО(15, 2)) КАК СуммаПлатежа,
	|	""Наличные"" КАК ВариантОплаты
	|ИЗ
	|	Документ._ДемоОперация КАК ГрафикОплаты
	|ГДЕ
	|	ГрафикОплаты.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ГрафикОплаты.Дата, ДЕНЬ, 2),
	|	30,
	|	ВЫРАЗИТЬ(ГрафикОплаты.СуммаДокумента * 0.3 КАК ЧИСЛО(15, 2)),
	|	""Перевод""
	|ИЗ
	|	Документ._ДемоОперация КАК ГрафикОплаты
	|ГДЕ
	|	ГрафикОплаты.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ГрафикОплаты.Дата, ДЕНЬ, 1),
	|	40,
	|	ВЫРАЗИТЬ(ГрафикОплаты.СуммаДокумента * 0.4 КАК ЧИСЛО(15, 2)),
	|	""Бартер""
	|ИЗ
	|	Документ._ДемоОперация КАК ГрафикОплаты
	|ГДЕ
	|	ГрафикОплаты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Услуга.Ссылка КАК Номенклатура,
	|	Услуга.Код КАК ИД,
	|	Услуга.Артикул КАК Артикул,
	|	Услуга.Наименование КАК Наименование,
	|	Услуга.ЕдиницаИзмерения КАК БазоваяЕдиницаСсылка,
	|	Услуга.ЕдиницаИзмерения КАК БазоваяЕдиница,
	|	Услуга.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Услуга.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Услуга.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Услуга.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение
	|ИЗ
	|	Справочник.Номенклатура КАК Услуга
	|ГДЕ
	|	Услуга.ПометкаУдаления = ЛОЖЬ
	|	И НЕ Услуга.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[2].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДатаФормирования",	ТекущаяДатаСеанса());
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс",	1);
	
	Если Не ЗначениеЗаполнено(РеквизитыШапки.Валюта) Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
			"Объект.Валюта");
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(РеквизитыШапки.Валюта, 
			"Объект.Код");
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.Валюта.Код,
		ПараметрыОбработкиОшибок);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта",	РеквизитыШапки.Валюта.Код);
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить сумму документа. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", РеквизитыШапки.СуммаДокумента,
		ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НачалоПериода",	РеквизитыШапки.НачалоПериода);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "КонецПериода",	РеквизитыШапки.КонецПериода);
	
	ФормаОплаты = Строка(РеквизитыШапки.ФормаОплаты);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ФормаОплаты",	ФормаОплаты);
	
	СпособРасчетаВознаграждения = Строка(РеквизитыШапки.СпособРасчетаВознаграждения);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "СпособРасчета",	СпособРасчетаВознаграждения);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДатаОплаты",		РеквизитыШапки.ДатаПлатежа);
	
	// Заполняем Контрагента
	СведенияОКомитенте = Неопределено;
	ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Контрагент, СведенияОКомитенте);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомитенте, "Комитент");
	
	// Заполняем Организацию
	СведенияОКомиссионере = Неопределено; 
	ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация, СведенияОКомиссионере);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомиссионере, "Комиссионер");
	
	ТаблицаТоваров = ТаблицаТоваров();
	
	// Пример передачи доп данных
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ДанныеПодписанные = Новый Структура("СрокГодности, Характеристика");
	
	ВыборкаПоТоварам = РезультатЗапроса[1].Выбрать();
	СообщениеОбОшибке = "";
	
	// Таблица для контроля совпадений номенклатуры с номенклатурой поставщика
	КонтрольСовпаденийНоменклатуры = РезультатЗапроса[1].Выгрузить();
	ПроверитьСопоставлениеСНоменклатуройПоставщика(КонтрольСовпаденийНоменклатуры, ДеревоДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам);
		
		// Заполним сведения, необходимые для выставления счета-фактуры комитентом
		СтруктураДополнительныхДанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
													ДополнительныеРеквизитыДляТаблицыТоваров);
		
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(ВыборкаПоТоварам.ДатаПродажи);
		СтруктураДополнительныхДанных.Вставить("ДатаПродажи", МассивЗначений);
		
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(ВыборкаПоТоварам.СтавкаНДС);
		СтруктураДополнительныхДанных.Вставить("СтавкаНДС", МассивЗначений);
		НоваяСтрока.ДополнительныеРеквизиты = СтруктураДополнительныхДанных;
		
		
		// Заполняем доп данные в строке товаров
		ДанныеПодписанные.СрокГодности = КонецМесяца(ТекущаяДатаСеанса());
		ДанныеПодписанные.Характеристика = ВыборкаПоТоварам.Характеристика;
		НоваяСтрока.ДопДанныеПодписанные = ДанныеПодписанные;

	КонецЦикла;
	
	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	СтрокаТаблицаТоваров = ДеревоДокумента.Строки.Найти("Товары", "ПолныйПуть");

	Если ТаблицаТоваров.Количество() Тогда 
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			Покупатель = ТаблицаТоваров[Число(Товар.Значение) - 1].ПокупательСсылка;
			
			Если ЗначениеЗаполнено(Покупатель) Тогда
				СведенияОПокупателе = Неопределено; 
				ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(Покупатель, СведенияОПокупателе);
				ЗаполнитьДанныеУчастника(Товар, СведенияОПокупателе, "Товары.НомерСтроки.Покупатель");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ГрафикОплаты = РезультатЗапроса[3].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ГрафикОплаты, "ГрафикОплаты");
	
	Услуга = РезультатЗапроса[4].Выгрузить();
	Если Услуга.Количество() > 0 Тогда
		СтрокаСУслугой = Услуга[0];
		
		Номенклатура = СтрокаСУслугой.Номенклатура;
		БазоваяЕдиница = СтрокаСУслугой.БазоваяЕдиницаСсылка;
		
		Артикул = СтрокаСУслугой.Артикул;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Услуга.Артикул", Артикул);
		
		Наименование = СтрокаСУслугой.Наименование;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Услуга.Наименование", Наименование);
	
		БазоваяЕдиницаКод = СтрокаСУслугой.БазоваяЕдиницаКод;
		Если ЗначениеЗаполнено(БазоваяЕдиница) Тогда
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(БазоваяЕдиница, 
				"Объект.Код");
		Иначе
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(Номенклатура, 
				"Объект.ЕдиницаИзмерения");
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Услуга.БазоваяЕдиницаКод",
			БазоваяЕдиницаКод, ПараметрыОбработкиОшибок);
		
		БазоваяЕдиницаНаименование = СтрокаСУслугой.БазоваяЕдиницаНаименование;
		Если ЗначениеЗаполнено(БазоваяЕдиница) Тогда
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(БазоваяЕдиница, 
				"Объект.Наименование");
		Иначе
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(Номенклатура, 
				"Объект.ЕдиницаИзмерения");
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Услуга.БазоваяЕдиницаНаименование",
			БазоваяЕдиницаНаименование, ПараметрыОбработкиОшибок);
		
		БазоваяЕдиницаНаименованиеПолное = СтрокаСУслугой.БазоваяЕдиницаНаименованиеПолное;
		Если ЗначениеЗаполнено(БазоваяЕдиница) Тогда
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(БазоваяЕдиница, 
				"Объект.НаименованиеПолное");
		Иначе
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(Номенклатура, 
				"Объект.ЕдиницаИзмерения");
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Услуга.БазоваяЕдиницаНаименованиеПолное",
			БазоваяЕдиницаНаименованиеПолное, ПараметрыОбработкиОшибок);
		
		БазоваяЕдиницаМеждународноеСокращение = СтрокаСУслугой.БазоваяЕдиницаМеждународноеСокращение;
		Если ЗначениеЗаполнено(БазоваяЕдиница) Тогда
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(БазоваяЕдиница, 
				"Объект.МеждународноеСокращение");
		Иначе
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(Номенклатура, 
				"Объект.ЕдиницаИзмерения");
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Услуга.БазоваяЕдиницаМеждународноеСокращение",
			БазоваяЕдиницаМеждународноеСокращение);
		
	КонецЕсли;
	
	// итоговая строка прописью
	
	Если РеквизитыШапки.СуммаДокумента < 0 Тогда
		ТекстИтоговаяСтрока = НСтр("ru = 'Всего возвращено наименований'");
	Иначе
		ТекстИтоговаяСтрока = НСтр("ru = 'Всего продано наименований'");
	КонецЕсли;
	
	СуммаПредставление = "";
	ОбменСКонтрагентамиКЭДО.ФорматСумм(РеквизитыШапки.СуммаДокумента, СуммаПредставление, РеквизитыШапки.ВалютаКод);
	
	ИтоговаяСтрока = ТекстИтоговаяСтрока
		+ " "
		+ ТаблицаТоваров.Количество()
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, НСтр("ru = ', на сумму'") + " ", "")
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, СуммаПредставление, "");
		
	СуммаПрописью = _ДемоФормированиеПечатныхФорм.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
		
	Если РеквизитыШапки.СуммаВознаграждения <> 0 Тогда
		СуммаВознаграждения = НСтр("ru = 'Сумма комиссионного вознаграждения составила'")
			+ " "
			+ ?(РеквизитыШапки.СуммаВознаграждения < 0,  НСтр("ru = 'минус'") + " ", "")
			+ _ДемоФормированиеПечатныхФорм.СформироватьСуммуПрописью(РеквизитыШапки.СуммаВознаграждения, РеквизитыШапки.Валюта);
	КонецЕсли;

	ИтогиПрописью = ИтоговаяСтрока + Символы.ПС + СуммаВознаграждения;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтогиПрописью);
	
	// Заполняем документ основание
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
		"Объект.Основание");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования",
		РеквизитыШапки.ДокументОснование, ПараметрыОбработкиОшибок);

	// Заполняется таблица документы сделки
	ЗаполнитьДокументыСделки(ДеревоДокумента, РеквизитыШапки);
	
	// итоговые суммы
	
	
	ТекстОшибки = НСтр("ru = 'Не удалось итоговые стоимостные показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма""'");
	СуммаПродажиИтог = ТаблицаТоваров.Итог("СуммаПродажи");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаДокумента",
		СуммаПродажиИтог, ТекстОшибки);
	
	СуммаВознагражденияИтог = ТаблицаТоваров.Итог("СуммаВознаграждения");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаВознаграждения",
		СуммаВознагражденияИтог, ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СтавкаНДСВознаграждения", Перечисления.СтавкиНДС.НДС18);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНДСВознаграждения",
		?(СуммаВознагражденияИтог = 0, 0, Окр(СуммаВознагражденияИтог * Число(СтрЗаменить(Перечисления.СтавкиНДС.НДС18, "%", "")) / 100, 2)),
		ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", Истина);
	
	Если ЗначениеЗаполнено (РеквизитыШапки.ПроцентВознаграждения) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.Процент", РеквизитыШапки.ПроцентВознаграждения);
	КонецЕсли;
	
	// Пример использования механизма доп данных шапки документа.
	ЗаполнитьДопДанные(ДеревоДокумента);
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара.
Процедура ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураПоставщиков.Ссылка КАК Ссылка,
	|	НоменклатураПоставщиков.Идентификатор КАК Идентификатор,
	|	НоменклатураПоставщиков.Представление КАК Представление,
	|	НоменклатураПоставщиков.Артикул КАК Артикул,
	|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	|	НоменклатураПоставщиков.Наименование КАК Наименование,
	|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
	|	НоменклатураПоставщиков.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ втНоменклатураПоставщика
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.ПометкаУдаления = ЛОЖЬ
	|	И НоменклатураПоставщиков.Номенклатура В
	|			(ВЫБРАТЬ
	|				Таблица.Номенклатура
	|			ИЗ
	|				Документ._ДемоОперация.Товары КАК Таблица
	|			ГДЕ
	|				Таблица.Ссылка = &Ссылка)
	|	И НоменклатураПоставщиков.Владелец В
	|			(ВЫБРАТЬ
	|				Таблица.Контрагент
	|			ИЗ
	|				Документ._ДемоОперация КАК Таблица
	|			ГДЕ
	|				Таблица.Ссылка = &Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(НоменклатураПоставщика.Артикул, """") КАК Артикул,
	|	ЕСТЬNULL(НоменклатураПоставщика.Идентификатор, НЕОПРЕДЕЛЕНО) КАК ИдТовараУКонтрагента,
	|	ЕСТЬNULL(НоменклатураПоставщика.Наименование, """") КАК Наименование,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ДОБАВИТЬКДАТЕ(Товары.Ссылка.Дата, ДЕНЬ, -1) КАК ДатаПродажи,
	|	Товары.Ссылка.Контрагент КАК Контрагент,
	|	Товары.Количество КАК Количество,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	1 КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Сумма КАК Сумма,
	|	ВЫРАЗИТЬ(Товары.Сумма * 0.18 КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18) КАК СтавкаНДС,
	|	ЛОЖЬ КАК НДСУчтеноВСумме,
	|	Товары.Цена КАК Цена,
	|	Товары.ЕдиницаИзмерения КАК БазоваяЕдиницаСсылка,
	|	Товары.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка,
	|	ЕСТЬNULL(НоменклатураПоставщика.Ссылка, НЕОПРЕДЕЛЕНО) КАК НоменклатураПоставщика
	|ИЗ
	|	Документ._ДемоОперация.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураПоставщика КАК НоменклатураПоставщика
	|		ПО Товары.Номенклатура = НоменклатураПоставщика.Номенклатура
	|			И Товары.Характеристика = НоменклатураПоставщика.Характеристика
	|			И (НоменклатураПоставщика.Упаковка = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитенту.Дата КАК Дата,
	|	ОтчетКомитенту.Валюта.Код КАК КодВалюты,
	|	ОтчетКомитенту.Валюта КАК Валюта,
	|	ОтчетКомитенту.Организация КАК Организация,
	|	ОтчетКомитенту.Контрагент КАК Контрагент,
	|	ОтчетКомитенту.СуммаДокумента КАК СуммаДокумента,
	|	ЛОЖЬ КАК ЦенаВключаетНДС,
	|	ВЫРАЗИТЬ(ОтчетКомитенту.СуммаДокумента * 0.1 КАК ЧИСЛО(15, 2)) КАК СуммаВознаграждения,
	|	""ОблагаетсяНДС"" КАК НалогообложениеНДС,
	|	ДОБАВИТЬКДАТЕ(ОтчетКомитенту.Дата, ДЕНЬ, -3) КАК НачалоПериода,
	|	ДОБАВИТЬКДАТЕ(ОтчетКомитенту.Дата, ДЕНЬ, 4) КАК КонецПериода,
	|	""Наличные"" КАК ФормаОплаты,
	|	""Процент от суммы"" КАК СпособРасчетаВознаграждения,
	|	10 КАК ПроцентВознаграждения,
	|	ДОБАВИТЬКДАТЕ(ОтчетКомитенту.Дата, ДЕНЬ, 2) КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18) КАК СтавкаНДСВознаграждения,
	|	ВЫРАЗИТЬ(ОтчетКомитенту.СуммаДокумента * 0.018 КАК ЧИСЛО(15, 2)) КАК СуммаНДСВознаграждения,
	|	ОтчетКомитенту.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ОтчетКомитенту.ДоговорКонтрагента.НомерДоговора КАК ДоговорНомер,
	|	ОтчетКомитенту.ДоговорКонтрагента.ДатаДоговора КАК ДоговорДата,
	|	ОтчетКомитенту.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
	|	ОтчетКомитенту.Основание КАК ДокументОснование
	|ИЗ
	|	Документ._ДемоОперация КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатЗапроса[1].Выгрузить();
	
	ПроверитьСопоставлениеСНоменклатуройПоставщика(ТаблицаТоваров, ДеревоДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем доп данные в таблице товаров
	ЗаполнитьДопДанныеТаблицыТоваров(ТаблицаТоваров);
	
	РеквизитыШапки = РезультатЗапроса[2].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДатаФормирования",	ТекущаяДатаСеанса());
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НачалоПериода",	РеквизитыШапки.НачалоПериода);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "КонецПериода",	РеквизитыШапки.КонецПериода);

	Если Не ЗначениеЗаполнено(РеквизитыШапки.Валюта) Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
			"Объект.Валюта");
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(РеквизитыШапки.Валюта, 
			"Объект.Код");
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.КодВалюты, ПараметрыОбработкиОшибок);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс", 1);
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить сумму документа. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", РеквизитыШапки.СуммаДокумента,
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу",
		РеквизитыШапки.СуммаДокумента, ТекстОшибки);
	
	// Заполняем Контрагента
	СведенияОКомитенте = Неопределено; 
	ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Контрагент, СведенияОКомитенте);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомитенте, "Комитент");
	
	// Заполняем организацию
	СведенияОКомиссионере = Неопределено;
	ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация, СведенияОКомиссионере);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомиссионере, "Комиссионер");
	
	// Заполняем документ основание
	
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
		"Объект.Основание");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования",
		РеквизитыШапки.ДокументОснование, ПараметрыОбработкиОшибок);

	// Заполняется таблица документы сделки
	ЗаполнитьДокументыСделки(ДеревоДокумента,РеквизитыШапки);

	ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");

	СуммаПредставление = "";
	ОбменСКонтрагентамиКЭДО.ФорматСумм(РеквизитыШапки.СуммаДокумента, СуммаПредставление, РеквизитыШапки.КодВалюты);
	
	ИтоговаяСтрока = НСтр("ru = 'Всего списано наименований'")
		+ " "
		+ ТаблицаТоваров.Количество()
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, НСтр("ru = ', на сумму'") + " ", "")
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, СуммаПредставление, "");
	СуммаПрописью = _ДемоФормированиеПечатныхФорм.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
	// Пример использования механизма доп данных шапки документа.
	ЗаполнитьДопДанные(ДеревоДокумента);

КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД.
Процедура СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора,
			СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "", НайденныйОбъект = Неопределено) Экспорт
	
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		НайденныйОбъект = НайтиСоздатьЗаказПокупателя(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		НайденныйОбъект = НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
	
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		НайденныйОбъект = СчетНаОплату(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		
		НайденныйОбъект = ПрайсЛист(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		
		НайденныйОбъект = ОтчетОПродажахКомиссионногоТовара(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		
		НайденныйОбъект = ОтчетОСписанииКомиссионногоТовара(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	КонецЕсли;
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ПолучитьПараметрыФормыСопоставленияНоменклатуры.
Процедура ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД, СтруктураПараметров) Экспорт
	
	Если ТипЗнч(СсылкаНаЭД) = Тип("Структура") Тогда
		ВидЭД = СсылкаНаЭД.ВидЭД;
	Иначе
		ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
	КонецЕсли;
	
	Если ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		// Для электронных документов, заполняемых по собственной номенклатуре, сопоставления не производится.
		СтруктураПараметров = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.СформироватьТекстНДСЭтапаОплаты.
Процедура СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ПроцентПлатежа, ТекстНДС) Экспорт
	
	Если СоответствиеСтавокНДС.Количество() > 0 Тогда
		
		Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
			
			Если ТекСтавкаНДС.Значение <> 0 Тогда
				
				ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), НСтр("ru='НДС(%СтавкаНДС%) %СуммаНДС%'"),
					НСтр("ru=', НДС(%СтавкаНДС%) %СуммаНДС%'"));
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", ТекСтавкаНДС.Ключ);
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%",  Формат(ТекСтавкаНДС.Значение / 100 * ПроцентПлатежа, "ЧЦ=15; ЧДЦ=2"));
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНДС) Тогда
		ТекстНДС = НСтр("ru='В т.ч.'")+ " " + ТекстНДС;
	Иначе
		ТекстНДС = НСтр("ru='Без налога (НДС)'");
	КонецЕсли;
		
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ПолучитьОтветственногоПоЭД.
Процедура ПолучитьОтветственногоПоЭД(Контрагент, Соглашение, ОтветственныйПоЭД) Экспорт
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(Контрагент.Партнер) Тогда
		Если Контрагент.Партнер.Метаданные().Реквизиты.Найти("ОсновнойМенеджер") <> Неопределено
			И ЗначениеЗаполнено(Контрагент.Партнер.ОсновнойМенеджер) Тогда
			
			ОтветственныйПоЭД = Контрагент.Партнер.ОсновнойМенеджер;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.НужноВыводитьСкидки.
Процедура НужноВыводитьСкидки(Знач Товары, ИспользоватьСкидки, ВыводитьСкидки) Экспорт
	
	Если ИспользоватьСкидки Тогда
		
		Если ТипЗнч(Товары) = Тип("ТаблицаЗначений") Или ТипЗнч(Товары) = Тип("Массив") Тогда
			
			Для Каждого СтрокаТоваров Из Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТоваров.СуммаСкидки) Тогда
					ВыводитьСкидки =  Истина;
					Возврат
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Товары) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			
			Пока Товары.Следующий() Цикл
				Если ЗначениеЗаполнено(Товары.СуммаСкидки) Тогда
					ВыводитьСкидки = Истина;
					Возврат
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ИмяДополнительнойКолонки.
Процедура ИмяДополнительнойКолонки(Результат) Экспорт
	
	Результат = _ДемоФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ПроверитьПравильностьЗаполненияОбъекта.
Процедура ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД, Результат) Экспорт
	
	Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист И Не ЗначениеЗаполнено(ПараметрыЭД.Контрагент) Тогда
		Результат = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.СписокТиповДокументовПоВидуЭД.
Процедура СписокТиповДокументовПоВидуЭД(ВидЭД, СписокВозврата) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
			Или ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
			Или ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
			Или ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		СписокВозврата.Добавить(Документы._ДемоОперация.ПустаяСсылка(),
									Метаданные.Документы._ДемоОперация.Представление());
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		СписокВозврата.Добавить(Документы._ДемоЗаказПокупателя.ПустаяСсылка(),
									Метаданные.Документы._ДемоЗаказПокупателя.Представление());
									
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		СписокВозврата.Добавить(Документы._ДемоЗаказПоставщику.ПустаяСсылка(),
									Метаданные.Документы._ДемоЗаказПоставщику.Представление());
	КонецЕсли;
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ИспользоватьОбменЭДМеждуОрганизациями.
Процедура ИспользоватьОбменЭДМеждуОрганизациями(Отказ) Экспорт
	
	// Проектное решение: принудительно используем обмен между организациями,
	// несмотря на то, что Клиент ЭДО установил Отказ = Истина.
	Отказ = Ложь;
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями.
Процедура ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаКод");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("Коэффициент");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|	Товары.Номенклатура.Код КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Количество КАК Количество,
	|	Товары.Сумма,
	|	Товары.Цена,
	|	NULL КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК Упаковка,
	|	Товары.ЕдиницаИзмерения.Код КАК УпаковкаКод,
	|	Товары.ЕдиницаИзмерения.Наименование КАК УпаковкаНаименование,
	|	NULL КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	0 КАК СуммаСкидки,
	|	Товары.Сумма КАК СуммаСНДС,
	|	Товары.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	1 КАК Коэффициент
	|ИЗ
	|	Документ._ДемоПередачаТоваровМеждуОрганизациями.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);

	СтруктураПараметров.Вставить("Исполнитель", СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Сумма", ТаблицаТоваров.Итог("Сумма"));
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Грузоотправитель", СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("ТипГрузоотправителя", "Организация");
	СтруктураПараметров.Вставить("Грузополучатель", СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", Истина);
		
	Основание = Новый Структура;
	Основание.Вставить("ДокументНаименование", НСтр("ru = 'Договор'"));
	Основание.Вставить("ДокументНомер", НСтр("ru = '1'"));
	Основание.Вставить("ДокументДата", ТекущаяДатаСеанса());
	
	СтруктураПараметров.Вставить("Основание", Основание);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений",
		"Ид, Наименование, Номенклатура, БазоваяЕдиницаКод"); 
		
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями.
Процедура ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура.Код КАК Ид,
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Количество КАК Количество,
	|	Товары.Сумма,
	|	Товары.Цена,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК БазоваяЕдиница,
	|	НЕОПРЕДЕЛЕНО КАК УпаковкаПоОКЕИ,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	0 КАК СуммаСкидки,
	|	Товары.Сумма КАК СуммаСНДС
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);

	СтруктураПараметров.Вставить("Исполнитель", СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Сумма", ТаблицаТоваров.Итог("Сумма"));
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Грузоотправитель", СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("ТипГрузоотправителя", "Организация");
	СтруктураПараметров.Вставить("Грузополучатель", СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", Истина);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений",
		"Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");
		
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСостояниеЭДО.
Процедура ЗаполнитьСостояниеЭДО(Форма) Экспорт
	
	Форма.ТекстСостоянияЭДО = ОбменСКонтрагентамиКлиентСервер.ПолучитьТекстСостоянияЭД(Форма.Объект.Ссылка, Форма);
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.СписокОперацийВидаЭД.
Процедура СписокОперацийВидаЭД(ВидЭД,СписокСпособовОбработки) Экспорт 
	
	Если ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		
		СписокСпособовОбработки.Добавить("_ДемоОперация", НСтр("ru = 'Демо: Операция'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		
		СписокСпособовОбработки.Добавить("_ДемоЗаказПоставщику", НСтр("ru = 'Демо: Заказ поставщику'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда	
		
		СписокСпособовОбработки.Добавить("_ДемоПередачаТоваровМеждуОрганизациями", 
			НСтр("ru = 'Демо: Передача товаров между организациями'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		
		СписокСпособовОбработки.Добавить("_ДемоЗаказПокупателя", НСтр("ru = 'Демо: Заказ покупателя'"),Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		СписокСпособовОбработки.Добавить("_ДемоОперация", НСтр("ru = 'Демо: Операция'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		
		СписокСпособовОбработки.Добавить("_ДемоОперация", НСтр("ru = 'Демо: Операция'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		
		СписокСпособовОбработки.Добавить("_ДемоОперация", НСтр("ru = 'Демо: Операция'"), Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// см. ОбменСКонтрагентамиПереопределяемый.СоответствиеИсходящихВидовЭДДокументамИБ.
Процедура СоответствиеИсходящихВидовЭДДокументамИБ(СоответствиеВидовЭДДокументамИБ) Экспорт 
	
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ОтветНаЗаказ,           НСтр("ru = 'Демо: Заказ покупателя'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ЗаказТовара,            НСтр("ru = 'Демо: Заказ поставщику'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ПрайсЛист,              НСтр("ru = 'Демо: Операция'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СчетНаОплату,           НСтр("ru = 'Демо: Операция'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара, НСтр("ru = 'Демо: Операция'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара, НСтр("ru = 'Демо: Операция'"));
	
КонецПроцедуры

// Формирует печатную форму товарной накладной.
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//
// Возвращаемое значение:
//	Табличный документ
//
Функция СформироватьТоварнуюНакладную(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	УстановитьМинимальныеПоляПечати(ТабличныйДокумент);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_ТОРГ12");
	
	ПервыйДокумент = Истина;
	СведенияОКонтрагентах = Новый Соответствие;
	КонтрагентыДляПечати = Новый Структура("Поставщик, Грузоотправитель, Покупатель, Грузополучатель");
	Для Каждого СсылкаНаОбъект Из МассивОбъектов Цикл
		
		СведенияОДокументе = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляЭД(СсылкаНаОбъект);
		
		ШапкаДокумента = СведенияОДокументе.ВыборкаШапки;
		ШапкаДокумента.Следующий();
		
		Если ШапкаДокумента.ВидОперации = Перечисления.ВидыОперацийЭД.Корректировка Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаТоваров = СведенияОДокументе.ВыборкаТоваров;
		
		Если ВыборкаТоваров.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
		ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");
		
		// Выводим общие реквизиты шапки.
		ОбластьМакетаШапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ШапкаДокумента.Номер, Истина);
		ОбластьМакетаШапка.Параметры.ДатаДокумента  = Формат(ШапкаДокумента.Дата, "ДЛФ=D");
		
		Если ЗначениеЗаполнено(ШапкаДокумента.ДоговорКонтрагента) Тогда
			ОбластьМакетаШапка.Параметры.Основание = СтрШаблон(НСтр("ru = 'Договор №%1 от %2'"),
				ШапкаДокумента.НомерДоговора, ШапкаДокумента.ДатаДоговора);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ШапкаДокумента.НомерИсправления) И ЗначениеЗаполнено(ШапкаДокумента.ДатаИсправления) Тогда
			
			ОбластьМакетаШапка.Параметры.ТекстИсправления = НСтр("ru='Исправление'")+"   ";
			ОбластьМакетаШапка.Параметры.НомерИсправления = ШапкаДокумента.НомерИсправления;
			ОбластьМакетаШапка.Параметры.ДатаИсправления  = Формат(ШапкаДокумента.ДатаИсправления, "ДЛФ=D");
			
			ЛинияГраницыРеквизитовИсправления = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьНомерИсправления = ОбластьМакетаШапка.Области.НомерИсправления;
			ОбластьНомерИсправления.ГраницаСнизу  = ЛинияГраницыРеквизитовИсправления;
			ОбластьНомерИсправления.ГраницаСлева  = ЛинияГраницыРеквизитовИсправления;
			ОбластьНомерИсправления.ГраницаСправа = ЛинияГраницыРеквизитовИсправления;
			
			ОбластьДатаИсправления = ОбластьМакетаШапка.Области.ДатаИсправления;
			ОбластьДатаИсправления.ГраницаСнизу  = ЛинияГраницыРеквизитовИсправления;
			ОбластьДатаИсправления.ГраницаСлева  = ЛинияГраницыРеквизитовИсправления;
			ОбластьДатаИсправления.ГраницаСправа = ЛинияГраницыРеквизитовИсправления;

		КонецЕсли;
		
		СведенияОПоставщике       = Неопределено;
		СведенияОПокупателе       = Неопределено;
		СведенияОГрузополучателе  = Неопределено;
		СведенияОГрузоотправителе = Неопределено;
		
		ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(ШапкаДокумента.Организация,      СведенияОПоставщике);
		ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(ШапкаДокумента.Контрагент,       СведенияОПокупателе);
		ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(
			?(ЗначениеЗаполнено(ШапкаДокумента.Грузополучатель), ШапкаДокумента.Грузополучатель, ШапкаДокумента.Контрагент),
			СведенияОГрузополучателе);
		ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(
			?(ЗначениеЗаполнено(ШапкаДокумента.Грузоотправитель), ШапкаДокумента.Грузоотправитель, ШапкаДокумента.Организация),
			СведенияОГрузоотправителе);
	
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = КлиентЭДО.ОписаниеОрганизации(
			СведенияОГрузоотправителе, "ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = КлиентЭДО.ОписаниеОрганизации(
			СведенияОГрузополучателе, "ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			
		ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика = КлиентЭДО.ОписаниеОрганизации(
			СведенияОПоставщике, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК");
		
		ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = КлиентЭДО.ОписаниеОрганизации(
			СведенияОПокупателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК");
				
		// Выводим всевозможные коды
		ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = "";
		ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
		ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = "";
		ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = "";
		ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = "";
		ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
		ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";
		
		ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьМакетаШапка, "Шапка");
		
		// Инициализация счетчика страниц
		НомерСтраницы = 1;
		
		// Инициализация итогов по странице
		ИтогоМестНаСтранице        = 0;
		ИтогоКоличествоНаСтранице  = 0;
		ИтогоСуммаБезНДСНаСтранице = 0;
		ИтогоНДСНаСтранице         = 0;
		ИтогоСуммаСНДСНаСтранице   = 0;
		
		// Инициализация итогов по документу
		ИтогоМест        = 0;
		ИтогоКоличество  = 0;
		ИтогоСуммаСНДС   = 0;
		ИтогоСуммаБезНДС = 0;
		ИтогоНДС         = 0;
		
		// Инициализация счетчика строк
		НомерСтроки     = 0;
		КоличествоСтрок = ВыборкаТоваров.Количество();
		
		// Выводим заголовок многострочной части
		ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьМакетаЗаголовокТаблицы,
			"ЗаголовокТаблицы", НомерСтраницы);
		
		// Выводим многострочную часть документа
		Пока ВыборкаТоваров.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
			ОбластьМакетаСтрока.Параметры.ТоварНаименование          = ВыборкаТоваров.НоменклатураНаименование;
			ОбластьМакетаСтрока.Параметры.ТоварКод                   = ВыборкаТоваров.НоменклатураКод;
			ОбластьМакетаСтрока.Параметры.БазоваяЕдиницаНаименование = ВыборкаТоваров.ЕдиницаИзмеренияНаименование;
			ОбластьМакетаСтрока.Параметры.БазоваяЕдиницаКодПоОКЕИ    = ВыборкаТоваров.ЕдиницаИзмеренияКод;
			ОбластьМакетаСтрока.Параметры.Количество                 = ВыборкаТоваров.Количество;
			ОбластьМакетаСтрока.Параметры.Цена                       = ВыборкаТоваров.Цена;
			ОбластьМакетаСтрока.Параметры.СуммаБезНДС                = ВыборкаТоваров.СуммаБезНДС;
			ОбластьМакетаСтрока.Параметры.СтавкаНДС                  = ВыборкаТоваров.СтавкаНДС;
			ОбластьМакетаСтрока.Параметры.СуммаНДС                   = ВыборкаТоваров.СуммаНДС;
			ОбластьМакетаСтрока.Параметры.СуммаСНДС                  = ВыборкаТоваров.СуммаСНДС;
			
			// Проверим вывод
			СтрокаСПодвалом = Новый Массив;
			Если НомерСтроки = 1 Тогда
				СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
			КонецЕсли;                                                   // помещаться заголовок
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
			Если НомерСтроки = КоличествоСтрок Тогда           			 // если последняя строка, должен
				СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  			 // помещаться и подвал документа
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			КонецЕсли;
			
			Если НЕ ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
				
				Если КоличествоСтрок > 1 Тогда
					
					// Выводим итоги по странице
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаБезНДСНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
					ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьМакетаИтогоПоСтранице,
						"ИтогоПоСтранице", НомерСтраницы);
					
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					// Очистим итоги по странице
					ИтогоМестНаСтранице        = 0;
					ИтогоКоличествоНаСтранице  = 0;
					ИтогоСуммаБезНДСНаСтранице = 0;
					ИтогоНДСНаСтранице         = 0;
					ИтогоСуммаСНДСНаСтранице   = 0;
					
					// Выведем заголовок таблицы
					НомерСтраницы = НомерСтраницы + 1;
					ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
					ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьМакетаЗаголовокТаблицы,
						"ЗаголовокТаблицы", НомерСтраницы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьМакетаСтрока,
				"Строка", НомерСтроки);
			
			// Увеличим итоги по странице
			ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + ВыборкаТоваров.Количество;
			ИтогоСуммаБезНДСНаСтранице = ИтогоСуммаБезНДСНаСтранице + ВыборкаТоваров.СуммаБезНДС;
			ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + ВыборкаТоваров.СуммаНДС;
			ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + ВыборкаТоваров.СуммаСНДС;
			
			// Увеличим итоги по документу
			ИтогоКоличество  = ИтогоКоличество  + ВыборкаТоваров.Количество;
			ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + ВыборкаТоваров.СуммаБезНДС;
			ИтогоНДС         = ИтогоНДС         + ВыборкаТоваров.СуммаНДС;
			ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + ВыборкаТоваров.СуммаСНДС;
			
		КонецЦикла;
		
		// Выводим итоги по странице
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаБезНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
		
		ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьМакетаИтогоПоСтранице,
			"ИтогоПоСтранице", НомерСтраницы);
		
		// Выводим итоги по документу в целом
		ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
		ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСуммаБезНДС;
		ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
		ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;
		
		ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьМакетаВсего, "Всего");
		
		// Выводим подвал документа
		ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(ВыборкаТоваров.Количество(), ,",,,,,,,,0");
		ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью                       	= ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")); 
		
		СуммаПрописью = "";
		ОбменСКонтрагентамиКЭДО.СуммаПрописью(ИтогоСуммаСНДС, ШапкаДокумента.ВалютаКод, СуммаПрописью);
		ОбластьМакетаПодвал.Параметры.СуммаПрописью = СуммаПрописью;
		
		ПолнаяДатаДокумента = Формат(ШапкаДокумента.Дата, "ДЛФ=DD");
		ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
		ПервыйРазделитель   = СтрНайти(ПолнаяДатаДокумента," ");
		ВторойРазделитель   = СтрНайти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
		
		ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
		ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
		ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
		
		ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьМакетаПодвал, "Подвал");
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, СсылкаНаОбъект);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
 
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом

Процедура ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Структурированный")
	
	// Подготовим параметры обработки ошибок
	КлючДанных = Неопределено;
	СведенияОбУчастнике.Свойство("Ссылка", КлючДанных);
	
	ПараметрыОбработкиОшибокИНН = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		КлючДанных, "Объект.ИНН");
	ПараметрыОбработкиОшибокКПП = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		КлючДанных, "Объект.КПП");
	ПараметрыОбработкиОшибокНаименование = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			КлючДанных, "Объект.НаименованиеПолное");
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
									СведенияОбУчастнике.ИНН, ПараметрыОбработкиОшибокИНН);
									
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
									СведенияОбУчастнике.КПП, ПараметрыОбработкиОшибокКПП);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование, ПараметрыОбработкиОшибокНаименование);
	Иначе
		
		ПолныйПуть = ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование";
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть,
				СведенияОбУчастнике.ПолноеНаименование, ПараметрыОбработкиОшибокНаименование);
		КонецЕсли;
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
									СведенияОбУчастнике.ИНН, ПараметрыОбработкиОшибокИНН);
									
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОбУчастнике.ПолноеНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Фамилия",
									ФИО.Фамилия, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Имя",
									ФИО.Имя, ПараметрыОбработкиОшибокНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Отчество",
									ФИО.Отчество, ПараметрыОбработкиОшибокНаименование);
	КонецЕсли;
	
	// Для Адреса и телефона нет возможности спозиционироваться на конкретном поле, но мы можем хотя бы открыть элемент справочника.
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		КлючДанных);
				
	АдресУчастника = Новый Структура;
	Если ВидАдреса = "Структурированный" Тогда
		
		ОбменСКонтрагентамиПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике);
	ИначеЕсли ВидАдреса = "Иностранный" Тогда
		ОбменСКонтрагентамиПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике);
		АдресУчастника.Вставить("АдресРФ", Ложь);
		АдресУчастника.Вставить("КодСтр", "600");
		АдресУчастника.Вставить("АдрТекст", "153003, Москва г, Бутовский р-н, Скобелевская ул, 15А д, 330 кв");
	Иначе
		АдресУчастника = Новый Структура("АдрТекст", "153003, Москва г, Бутовский р-н, Скобелевская ул, 15А д, 330 кв");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресУчастника) Тогда
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ВидАдреса, ВидУчастника, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны)
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".Контакт.Телефон") Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Контакт.Телефон",
									СведенияОбУчастнике.Телефоны, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета)
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".БанковскийСчет") Тогда
		Банк = "";
		БИК = "";
		
		ПараметрыОбработкиОшибок = Неопределено;
		Если СведенияОбУчастнике.Свойство("БанковскийСчет") Тогда
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				СведенияОбУчастнике.БанковскийСчетСсылка, "Объект.НомерСчета");
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскийСчет.НомерСчета",
				НомерСчета, ПараметрыОбработкиОшибок);
				
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			ПараметрыОбработкиОшибок = Неопределено;
			Если СведенияОбУчастнике.Свойство("БанкСсылка") Тогда
				ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
					СведенияОбУчастнике.БанкСсылка, "Объект.Наименование");
			КонецЕсли;
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскийСчет.НаимБанк",
										Банк, ПараметрыОбработкиОшибок);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ПараметрыОбработкиОшибок = Неопределено;
			Если СведенияОбУчастнике.Свойство("БанкСсылка") Тогда
				ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
					СведенияОбУчастнике.БанкСсылка, "Объект.Код");
			КонецЕсли;
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскийСчет.БИК",
										БИК, ПараметрыОбработкиОшибок);
		КонецЕсли;
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Фамилия", Значение.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Имя", Значение.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Отчество", Значение.Отчество);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Должность", Значение.Должность);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".КодОКПО";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("КодПоОКПО", Значение) Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			КлючДанных, "КодПоОКПО");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение,
			ПараметрыОбработкиОшибок);
	КонецЕсли;

	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение,
			ПараметрыОбработкиОшибок);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
		// тогда нашли всего лишь индекс строки.
		Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
			НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				Результат = НайденнаяСтрока.СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров, СсылкаНаДокумент = Неопределено)

	// Обработка ошибки через механизм сообщений пользователю.
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Артикул", "Номенклатура", "Объект.Артикул");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Наименование", "Номенклатура", "Объект.Наименование");
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда		
		Если ТаблицаТоваров.Колонки.Найти("Количество") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Количество", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("Цена") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Цена", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("Сумма") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Сумма", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"СуммаСкидки", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"СуммаСкидки", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("ЕдиницаИзмеренияКодПоОКЕИ") <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ЕдиницаИзмеренияКодПоОКЕИ", "ЕдиницаИзмерения", "Объект.Код");
		
		// Если единица пустая, надо ссылаться на незаполненность самой единицы, а не ее полей.
		СтрокиСПустойЕдиницей = ТаблицаТоваров.НайтиСтроки(Новый Структура("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка()));
		Если СтрокиСПустойЕдиницей.Количество() Тогда
			Если СсылкаНаДокумент <> Неопределено Тогда
				// Для документов берем единицу прямо из документа.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
					"ЕдиницаИзмеренияКодПоОКЕИ", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			Иначе
				// Иначе ссылаемся на незаполненность единицы в самой номенклатуре.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
					"ЕдиницаИзмеренияКодПоОКЕИ", "Номенклатура", "Объект.ЕдиницаИзмерения");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаКод", "БазоваяЕдиницаСсылка", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаМеждународноеСокращение", "БазоваяЕдиницаСсылка", "Объект.МеждународноеСокращение");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаНаименование", "БазоваяЕдиницаСсылка", "Объект.Наименование");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаНаименованиеПолное", "БазоваяЕдиницаСсылка", "Объект.НаименованиеПолное");
	
	// Если единица пустая, надо ссылаться на незаполненность самой единицы, а не ее полей.
	СтрокиСПустойЕдиницей = ТаблицаТоваров.НайтиСтроки(Новый Структура("БазоваяЕдиницаСсылка", Справочники.ЕдиницыИзмерения.ПустаяСсылка()));
	Если СтрокиСПустойЕдиницей.Количество() Тогда
		Если СсылкаНаДокумент <> Неопределено Тогда
			// Для документов берем единицу прямо из документа.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаКод", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаМеждународноеСокращение", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименование", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименованиеПолное", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
		Иначе
			// Это каталог товаров - для него единица берется из номенклатуры.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаКод", "Номенклатура", "Объект.ЕдиницаИзмерения");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаМеждународноеСокращение", "Номенклатура", "Объект.ЕдиницаИзмерения");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименование", "Номенклатура", "Объект.ЕдиницаИзмерения");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименованиеПолное", "Номенклатура", "Объект.ЕдиницаИзмерения");
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("ВалютаЦены") <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ВалютаЦены", "Валюта", "Объект.Код");
		
		// Если валюта пустая, надо ссылаться на незаполненность самой валюты, а не ее полей.
		СтрокиСПустойВалютой = ТаблицаТоваров.НайтиСтроки(Новый Структура("Валюта", Справочники.Валюты.ПустаяСсылка()));
		Если СтрокиСПустойВалютой.Количество() И СсылкаНаДокумент <> Неопределено Тогда
			Если СсылкаНаДокумент <> Неопределено Тогда
				// Для документов берем валюту прямо из документа.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойВалютой,
					"ВалютаЦены", СсылкаНаДокумент, "Объект.Валюта");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Заполняет соответствующий тип адреса переданными данными.
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева, содержащая данные участника
//  АдресУчастника - Структура - содержит данные адреса участника обмена. Имена полей структуры должны совпадать с
//    именами полей структуры выбранного типа адреса:
//    Структурированный - "Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
//    Произвольный/Иностранный - "КодСтраны, АдресСтрокой" (вынесены в разные элементы списка для того,
//      чтобы правильно заполнить ЭД).
//  ТипАдреса - Строка - один из 3-х вариантов: Структурированный, Произвольный, Иностранный.
//  ВидУчастника - Строка - вид участника как он представлен в дереве данных.
//  ПараметрыОбработкиОшибок - Структура - необходим для переопределения поведения при выводе и клике на ошибке.
//    см. ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки.
//
Процедура ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника, ПараметрыОбработкиОшибок = Неопределено)
	
	Если ТипАдреса = "Произвольный" Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Произвольный",
									АдресУчастника.АдрТекст, ПараметрыОбработкиОшибок);
	ИначеЕсли ТипАдреса = "Структурированный" ИЛИ ТипАдреса = "АдресИностранный" Тогда
		Если АдресУчастника.АдресРФ Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("КодСтраны");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("АдресТекст");
			АдресУчастника.Удалить("КодГАР");
		Иначе
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("ПочтовыйИндекс");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодГАР");
		КонецЕсли;
		Для Каждого Элемент Из АдресУчастника Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение, ПараметрыОбработкиОшибок);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "АдресРФ" Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("КодСтраны");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("АдресТекст");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодГАР");
			
		Для Каждого Элемент Из АдресУчастника Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение, ПараметрыОбработкиОшибок);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "АдресИнформация" Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("ПочтовыйИндекс");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("КодГАР");
	
		Для Каждого Элемент Из АдресУчастника Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение, ПараметрыОбработкиОшибок);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "КодГАР" Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.КодГАР",
									"4545125/12123/198583", ПараметрыОбработкиОшибок);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

// Находит документ ИБ по параметрам.
//
// Параметры:
//  ВидЭД - Перечисления.ВидыЭД - Вид электронного документа, по которому ищется документ ИБ,
//  Контрагент - Ссылка на контрагента,
//  РеквизитыИБ - структура параметров информационной базы,
//  РеквизитыИБКонтрагента - структура параметров контрагента в информационной базе.
//
Функция НайтиДокумент(ВидЭД, Контрагент, РеквизитыИБ = Неопределено, РеквизитыИБКонтрагента = Неопределено)
	
	НайденныйДок = Неопределено;
	
	Если ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		Запрос = Новый Запрос;
		ОсновнойТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументПоиска.Ссылка КАК Ссылка
		|ИЗ
		|	Документ._ДемоЗаказПокупателя КАК ДокументПоиска
		|ГДЕ
		|	ДокументПоиска.Контрагент = &Контрагент";
		
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество() > 0 Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если СтрНайти(ВРег(ТекЭл.Ключ), ВРег("Дата")) > 0 Тогда
					Запрос.Текст = Запрос.Текст + " И КОНЕЦПЕРИОДА(ДокументПоиска." + ТекЭл.Ключ + ", ДЕНЬ) =  КОНЕЦПЕРИОДА(&"
						+ ТекЭл.Ключ + ", ДЕНЬ)";
				Иначе
					Запрос.Текст = Запрос.Текст + " И ДокументПоиска." + ТекЭл.Ключ + " = &" + ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено
			И РеквизитыИБКонтрагента.Количество() > 0 Тогда
			
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Запрос.Текст = Запрос.Текст + " И ДокументПоиска." + ТекЭл.Ключ + " = &" + ТекЭл.Ключ;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		
		Запрос = Новый Запрос;
		ОсновнойТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументПоиска.Ссылка КАК Ссылка
		|ИЗ
		|	Документ._ДемоЗаказПоставщику КАК ДокументПоиска
		|ГДЕ
		|	ДокументПоиска.Контрагент = &Контрагент";
		
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество() > 0 Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если СтрНайти(ВРег(ТекЭл.Ключ), ВРег("Дата")) > 0 Тогда
					Запрос.Текст = Запрос.Текст + " И КОНЕЦПЕРИОДА(ДокументПоиска." + ТекЭл.Ключ + ", ДЕНЬ) =  КОНЕЦПЕРИОДА(&"
						+ ТекЭл.Ключ + ", ДЕНЬ)";
				Иначе
					Запрос.Текст = Запрос.Текст + " И ДокументПоиска." + ТекЭл.Ключ + " = &" + ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено
			И РеквизитыИБКонтрагента.Количество() > 0 Тогда
			
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Запрос.Текст = Запрос.Текст + " И ДокументПоиска." + ТекЭл.Ключ + " = &" + ТекЭл.Ключ;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденныйДок;
	
КонецФункции

Функция НайтиСоздатьЗаказПокупателя(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	ВозвращаемоеЗначение = Неопределено;
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаказаПокупателя(СтрокаДляЗагрузки, ДеревоРазбора);
	
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	РежимЗаписи      = РежимЗаписиДокумента.Запись;
	
	Попытка
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
			
			Если СсылкаНаВладельца.Проведен Тогда 
				ВызватьИсключение НСтр("ru = 'Заполнение на основании ЭД возможно только для непроведенного документа'");
			КонецЕсли;
			
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			
		Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
			
			УстановитьПривилегированныйРежим(Истина);
			
			НайденныйДок = Неопределено;
			Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
				РеквизитыИБКонтрагента = Новый Структура;
				Если ДанныеЗаполнения.Свойство("НомерПоДаннымПокупателя") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПокупателя) Тогда
					РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПокупателя", ДанныеЗаполнения.НомерПоДаннымПокупателя);
				КонецЕсли;
				Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПокупателя") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПокупателя) Тогда
					РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПокупателя", ДанныеЗаполнения.ДатаПоДаннымПокупателя);
				КонецЕсли;
					РеквизитыИБ = Новый Структура;
				Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
					РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымПоставщика);
				КонецЕсли;
				Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
					РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
				КонецЕсли;
				Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
					НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ЗаказТовара, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("ДокументыСделки") И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументыСделки) Тогда
				Для каждого Строка Из ДанныеЗаполнения.ДокументыСделки Цикл
					Если Строка.Идентификатор = "договор" Тогда
						ДоговорКонтрагента = Неопределено;
						КлиентЭДО.НайтиСсылкуНаОбъектПоРеквизиту("ДоговорыКонтрагентов", "Наименование",
							Строка.Наименование, ДоговорКонтрагента, ДанныеЗаполнения.Контрагент);
						Если ДоговорКонтрагента = Неопределено Тогда
							НовыйДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
							НовыйДоговорКонтрагента.Владелец = ДанныеЗаполнения.Контрагент;
							НовыйДоговорКонтрагента.Наименование = Строка.Наименование;
							Если ЗначениеЗаполнено(Строка.Номер) Тогда
								НовыйДоговорКонтрагента.НомерДоговора = Строка.Номер;
							КонецЕсли;
							Если ЗначениеЗаполнено(Строка.Дата) Тогда
								НовыйДоговорКонтрагента.ДатаДоговора = Строка.Дата;
							КонецЕсли;
							Если ДанныеЗаполнения.Свойство("Валюта") Тогда
								НовыйДоговорКонтрагента.ВалютаРасчетов = ДанныеЗаполнения.Валюта;
							КонецЕсли;
							
							НовыйДоговорКонтрагента.Записать();
						КонецЕсли;
						ДанныеЗаполнения.Вставить("ДоговорКонтрагента",     ДоговорКонтрагента);
					
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
				ДокументОбъект = НайденныйДок.ПолучитьОбъект();
				Возврат ДокументОбъект.Ссылка;
			КонецЕсли;
			
			ДокументОбъект = Документы._ДемоЗаказПокупателя.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			Если ДанныеЗаполнения.Свойство("Организация") Тогда
				ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
			КонецЕсли;
			
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		
		// Заполним значения реквизитов шапки
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		// Заполнить данные о доставке.
		Если ДанныеДляЗагрузки.Шапка.Свойство("СпособДоставки") Тогда
			СпособДоставки = ДанныеДляЗагрузки.Шапка.СпособДоставки;
			Если СпособДоставки = "Доставка" Тогда
				ДокументОбъект.СпособДоставки = Перечисления._ДемоСпособыДоставки.Доставка;
			ИначеЕсли СпособДоставки = "Самовывоз" Тогда
				ДокументОбъект.СпособДоставки = Перечисления._ДемоСпособыДоставки.Самовывоз;
			КонецЕсли;
		КонецЕсли;
		
		// Загрузим табличные части
		ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		
		ДокументОбъект.СуммаДокумента = ДанныеДляЗагрузки.Товары.Итог("Сумма");
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
		
	Исключение
		ВидОперации = НСтр("ru = 'Заполнение документа на основе ЭД'");
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения,, СсылкаНаВладельца);
		
		ВызватьИсключение(ПодробныйТекстОшибки);
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	ВозвращаемоеЗначение = Неопределено;
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора);
	
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	РежимЗаписи      = РежимЗаписиДокумента.Запись;
	
	Попытка
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
			
			Если СсылкаНаВладельца.Проведен Тогда 
				ВызватьИсключение НСтр("ru = 'Заполнение на основании ЭД возможно только для непроведенного документа'");
			КонецЕсли;
			
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			
		Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
			
			УстановитьПривилегированныйРежим(Истина);
			
			НайденныйДок = Неопределено;
			Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
				РеквизитыИБКонтрагента = Новый Структура;
				Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика")
					И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
					
					РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
				КонецЕсли;
				Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика")
					И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
					
					РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
				КонецЕсли;
				РеквизитыИБ = Новый Структура;
				Если ДанныеЗаполнения.Свойство("НомерПоДаннымПокупателя")
					И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПокупателя) Тогда
					
					РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымПокупателя);
				КонецЕсли;
				Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПокупателя")
					И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПокупателя) Тогда
					
					РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымПокупателя);
				КонецЕсли;
				Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда // есть еще реквизиты поиска, кроме Контрагента
					НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ,
						РеквизитыИБКонтрагента);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
				ДокументОбъект = НайденныйДок.ПолучитьОбъект();
				Возврат ДокументОбъект.Ссылка;
			КонецЕсли;
			
			ДокументОбъект = Документы._ДемоЗаказПоставщику.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		
		// Заполним значения реквизитов шапки
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		// Заполнить данные о доставке.
		Если ДанныеДляЗагрузки.Шапка.Свойство("СпособДоставки") Тогда
			СпособДоставки = ДанныеДляЗагрузки.Шапка.СпособДоставки;
			Если СпособДоставки = "Доставка" Тогда
				ДокументОбъект.СпособДоставки = Перечисления._ДемоСпособыДоставки.Доставка;
			ИначеЕсли СпособДоставки = "Самовывоз" Тогда
				ДокументОбъект.СпособДоставки = Перечисления._ДемоСпособыДоставки.Самовывоз;
			КонецЕсли;
		КонецЕсли;
		
		// Загрузим табличные части
		ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		
		ДокументОбъект.СуммаДокумента = ДанныеДляЗагрузки.Товары.Итог("Сумма");
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
		
	Исключение
		
		ВидОперации = НСтр("ru = 'Заполнение документа на основе ЭД'");
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки,,, СсылкаНаВладельца);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СчетНаОплату(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать)
	
	ВозвращаемоеЗначение = Неопределено;
	
	ДанныеДляЗагрузки = СтруктураДляОтчетОПродажах(СтрокаДляЗагрузки, ДеревоРазбора);
	
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	РежимЗаписи      = РежимЗаписиДокумента.Запись;
	
	Попытка
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
						
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			
		Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
			
			УстановитьПривилегированныйРежим(Истина);
			
			НайденныйДок = Неопределено;
			Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
				РеквизитыИБКонтрагента = Новый Структура;
				Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика")
					И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
					
					РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
				КонецЕсли;
				Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика")
					И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
					
					РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
				КонецЕсли;
				РеквизитыИБ = Новый Структура;
				Если ДанныеЗаполнения.Свойство("НомерПоДаннымПокупателя")
					И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПокупателя) Тогда
					
					РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымПокупателя);
				КонецЕсли;
				Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПокупателя")
					И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПокупателя) Тогда
					
					РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымПокупателя);
				КонецЕсли;
				Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда // есть еще реквизиты поиска, кроме Контрагента
					НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара, ДанныеЗаполнения.Контрагент, РеквизитыИБ,
						РеквизитыИБКонтрагента);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
				ДокументОбъект = НайденныйДок.ПолучитьОбъект();
				Возврат ДокументОбъект.Ссылка;
			КонецЕсли;
			
			ДокументОбъект = Документы._ДемоОперация.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		ДокументОбъект.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		
		// Заполним значения реквизитов шапки
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		// Загрузим табличные части
		ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		ДокументОбъект.ЗаполнитьСуммуДокумента();

		
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
		
	Исключение
		
		ВидОперации = НСтр("ru = 'Заполнение документа на основе ЭД'");
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки,,, СсылкаНаВладельца);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПрайсЛист(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать)
	
	ВозвращаемоеЗначение = Неопределено;
	
	ДанныеДляЗагрузки = СтруктураДляОтчетОПродажах(СтрокаДляЗагрузки, ДеревоРазбора);
	
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	РежимЗаписи      = РежимЗаписиДокумента.Запись;
	
	Попытка
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
			
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			
		Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
			
			УстановитьПривилегированныйРежим(Истина);
			
			НайденныйДок = Неопределено;
			Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
				РеквизитыИБКонтрагента = Новый Структура;
				Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика")
					И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
					
					РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
				КонецЕсли;
				Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика")
					И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
					
					РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
				КонецЕсли;
				РеквизитыИБ = Новый Структура;
				Если ДанныеЗаполнения.Свойство("НомерПоДаннымПокупателя")
					И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПокупателя) Тогда
					
					РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымПокупателя);
				КонецЕсли;
				Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПокупателя")
					И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПокупателя) Тогда
					
					РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымПокупателя);
				КонецЕсли;
				Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда // есть еще реквизиты поиска, кроме Контрагента
					НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара, ДанныеЗаполнения.Контрагент, РеквизитыИБ,
					РеквизитыИБКонтрагента);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
				ДокументОбъект = НайденныйДок.ПолучитьОбъект();
				Возврат ДокументОбъект.Ссылка;
			КонецЕсли;
			
			ДокументОбъект = Документы._ДемоОперация.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		ДокументОбъект.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
		
		// Заполним значения реквизитов шапки
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		// Заполним Организацию по ИНН КПП переданным через доп.данные
		ЗаполнитьОрганизацияПрайсЛиста(ДокументОбъект, ДанныеЗаполнения);
		
		// Загрузим табличные части
		ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		ДокументОбъект.ЗаполнитьСуммуДокумента();
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
		
	Исключение
		
		ВидОперации = НСтр("ru = 'Заполнение документа на основе ЭД'");
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки,,, СсылкаНаВладельца);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОтчетОПродажахКомиссионногоТовара(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать)
	
	ВозвращаемоеЗначение = Неопределено;
	
	ДанныеДляЗагрузки = СтруктураДляОтчетОПродажах(СтрокаДляЗагрузки, ДеревоРазбора);
	
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	РежимЗаписи      = РежимЗаписиДокумента.Запись;
	
	Попытка
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
			
			
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			
		Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
			
			УстановитьПривилегированныйРежим(Истина);
			
			НайденныйДок = Неопределено;
			Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
				РеквизитыИБКонтрагента = Новый Структура;
				Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика")
					И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
					
					РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
				КонецЕсли;
				Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика")
					И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
					
					РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
				КонецЕсли;
				РеквизитыИБ = Новый Структура;
				Если ДанныеЗаполнения.Свойство("НомерПоДаннымПокупателя")
					И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПокупателя) Тогда
					
					РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымПокупателя);
				КонецЕсли;
				Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПокупателя")
					И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПокупателя) Тогда
					
					РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымПокупателя);
				КонецЕсли;
				Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда // есть еще реквизиты поиска, кроме Контрагента
					НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара, ДанныеЗаполнения.Контрагент, РеквизитыИБ,
					РеквизитыИБКонтрагента);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
				ДокументОбъект = НайденныйДок.ПолучитьОбъект();
				Возврат ДокументОбъект.Ссылка;
			КонецЕсли;
			
			ДокументОбъект = Документы._ДемоОперация.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		ДокументОбъект.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		
		// Заполним значения реквизитов шапки
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		ЗаполнитьДопРеквизитыДокумента(ДокументОбъект, ДанныеЗаполнения);
		
		// Загрузим табличные части
		ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
		
	Исключение
		
		ВидОперации = НСтр("ru = 'Заполнение документа на основе ЭД'");
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки,,, СсылкаНаВладельца);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОтчетОСписанииКомиссионногоТовара(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать)
	
	ВозвращаемоеЗначение = Неопределено;
	
	ДанныеДляЗагрузки = СтруктураДляОтчетОПродажах(СтрокаДляЗагрузки, ДеревоРазбора);
	
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	РежимЗаписи      = РежимЗаписиДокумента.Запись;
	
	Попытка
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
			
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			
		Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
			
			УстановитьПривилегированныйРежим(Истина);
			
			НайденныйДок = Неопределено;
			Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
				РеквизитыИБКонтрагента = Новый Структура;
				Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика")
					И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
					
					РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
				КонецЕсли;
				Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика")
					И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
					
					РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
				КонецЕсли;
				РеквизитыИБ = Новый Структура;
				Если ДанныеЗаполнения.Свойство("НомерПоДаннымПокупателя")
					И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПокупателя) Тогда
					
					РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымПокупателя);
				КонецЕсли;
				Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПокупателя")
					И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПокупателя) Тогда
					
					РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымПокупателя);
				КонецЕсли;
				Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда // есть еще реквизиты поиска, кроме Контрагента
					НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара, ДанныеЗаполнения.Контрагент, РеквизитыИБ,
																															РеквизитыИБКонтрагента);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
				ДокументОбъект = НайденныйДок.ПолучитьОбъект();
				Возврат ДокументОбъект.Ссылка;
			КонецЕсли;
			
			ДокументОбъект = Документы._ДемоОперация.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		ДокументОбъект.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
		
		// Заполним значения реквизитов шапки
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		// Загрузим табличные части
		ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		ДокументОбъект.ЗаполнитьСуммуДокумента();
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
		
	Исключение
		
		ВидОперации = НСтр("ru = 'Заполнение документа на основе ЭД'");
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки,,, СсылкаНаВладельца);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаказаПокупателя(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	Товары = Документы._ДемоЗаказПокупателя.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			
			ЗначениеРеквизита = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Если СтрокаРеквизита.Реквизит = "ЦенаВключаетНДС" Тогда
				ИмяРеквизита = "СуммаВключаетНДС";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "Курс" Тогда
				ИмяРеквизита = "КурсВзаиморасчетов";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "ДатаПоДаннымКлиента" Тогда
				ИмяРеквизита = "ДатаПоДаннымПокупателя";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "НомерПоДаннымКлиента" Тогда
				ИмяРеквизита = "НомерПоДаннымПокупателя";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "ДокументыОснования" Тогда
				ИмяРеквизита = "Основание";
				
			Иначе
				ИмяРеквизита = СтрокаРеквизита.Реквизит;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			КонецЕсли;
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			// Добавим строку табличной части
			ЗаполнитьСтрокуТЧ(Товары, СтрокаРеквизита.Строки, ДеревоРазбора, Истина)
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	Товары = Документы._ДемоЗаказПоставщику.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Строки.Количество() = 0 Тогда // примитивный тип
			
			ЗначениеРеквизита = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Если СтрокаРеквизита.Реквизит = "ЦенаВключаетНДС" Тогда
				ИмяРеквизита = "СуммаВключаетНДС";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "Курс" Тогда
				ИмяРеквизита = "КурсВзаиморасчетов";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "ДатаПоДаннымКлиента" Тогда
				ИмяРеквизита = "ДатаПоДаннымПокупателя";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "НомерПоДаннымКлиента" Тогда
				ИмяРеквизита = "НомерПоДаннымПокупателя";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "ДокументыСделки" Тогда
				ИмяРеквизита = "ДокументыСделки";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "ДокументыОснования" Тогда
				ИмяРеквизита = "Основание";

			Иначе
				ИмяРеквизита = СтрокаРеквизита.Реквизит;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			КонецЕсли;
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			// Добавим строку табличной части
			ЗаполнитьСтрокуТЧ(Товары, СтрокаРеквизита.Строки, ДеревоРазбора, Истина)

		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ЗаполнитьСтрокуТЧ(ТЗ, ДанныеЗаполнения, ДеревоРазбора, ЭтоЗаказ = Ложь)
	
	НовСтрока = ТЗ.Добавить();
	
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
		
		Если ИмяРеквизитаВБД = "СуммаСНДС" Тогда
			Если ЭтоЗаказ Тогда
				НовСтрока.Сумма = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ИмяРеквизитаВБД, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение характеристики номенклатуры и упаковки.
		Если ИмяРеквизитаВБД = "НоменклатураПоставщика" Тогда
			Если КолонкаСуществует(ТЗ, "Характеристика") Тогда
				НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
					НовСтрока.Характеристика = НайденноеЗначение.Характеристика;	
				КонецЕсли;
			КонецЕсли;
			Если КолонкаСуществует(ТЗ, "Упаковка") Тогда
				НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
					НовСтрока.Упаковка = НайденноеЗначение.Упаковка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Реквизит = "ЦенаПродажи" Тогда
			Если КолонкаСуществует(ТЗ, "Цена") Тогда
				НовСтрока.Цена = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Реквизит = "СуммаПродажи" Тогда
			Если КолонкаСуществует(ТЗ, "Сумма") Тогда
				НовСтрока.Сумма = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Реквизит = "Описание" Тогда
			Если КолонкаСуществует(ТЗ, "Содержание") Тогда
				НовСтрока.Содержание = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		Если Не КолонкаСуществует(ТЗ, ИмяРеквизитаВБД) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		
		НовСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
		Если ТекСтрока.Реквизит = "Номенклатура" Тогда
			СтрокаНоменклатура = ДеревоРазбора.Строки.Найти(ТекСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
			НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(СтрокаНоменклатура, "ЕдиницаИзмерения", Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
				НовСтрока.ЕдиницаИзмерения = НайденноеЗначение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОрганизацияПрайсЛиста(ДокументОбъект, ДанныеЗаполнения)
	
	Если Не ДанныеЗаполнения.Свойство("ДеревоДопДанных") Тогда
		Возврат;
	КонецЕсли;
	
	ДопДанные = ДанныеЗаполнения.ДеревоДопДанных;
	
	ДопДанныеШапки = ДопДанные.Строки.Найти("Шапка", "ЗначениеРеквизита");
	Если ДопДанныеШапки =  Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИННПолучателя = "";
	СтрокаИННПолучателя = ДопДанныеШапки.Строки.Найти("ИННПолучателя", "ИмяРеквизита");
	Если ЗначениеЗаполнено(СтрокаИННПолучателя) Тогда
		ИННПолучателя = СтрокаИННПолучателя.ЗначениеРеквизита;
	КонецЕсли;
	
	КПППолучателя = "0";
	СтрокаКПППолучателя = ДопДанныеШапки.Строки.Найти("КПППолучателя", "ИмяРеквизита");
	Если ЗначениеЗаполнено(СтрокаКПППолучателя) Тогда
		КПППолучателя = СтрокаКПППолучателя.ЗначениеРеквизита;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИННПолучателя) Тогда 
		ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИННПолучателя, КПППолучателя, ДокументОбъект.Организация)
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

Процедура ЗаполнитьДопДанныеТаблицыТоваров(ТаблицаТоваров)
	
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ДанныеПодписанные = Новый Структура("СрокГодности, ВесТовара");

	Для каждого ТекСтрока Из ТаблицаТоваров Цикл
		
		ДанныеПодписанные.СрокГодности = КонецМесяца(ТекущаяДатаСеанса());
		ДанныеПодписанные.ВесТовара = ДеньНедели(ТекущаяДатаСеанса());;
		ТекСтрока.ДопДанныеПодписанные = ДанныеПодписанные;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыСделки(ДеревоДокумента, ДанныеШапки)
	
	ДоговорНомер = ДанныеШапки.ДоговорНомер;
	ДоговорДата = ДанныеШапки.ДоговорДата;
	
	Если Не ЗначениеЗаполнено(ДоговорНомер) 
		ИЛИ Не ЗначениеЗаполнено(ДоговорДата) Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорНаименование = ДанныеШапки.ДоговорНаименование;
	
	ДокументыСделки = Новый ТаблицаЗначений;
	ДокументыСделки.Колонки.Добавить("ДоговорКонтрагента");
	ДокументыСделки.Колонки.Добавить("Наименование");
	ДокументыСделки.Колонки.Добавить("Номер");
	ДокументыСделки.Колонки.Добавить("Дата");
	ДокументыСделки.Колонки.Добавить("Идентификатор");
	
	НоваяСтрока = ДокументыСделки.Добавить();
	НоваяСтрока.ДоговорКонтрагента = ДанныеШапки.ДоговорКонтрагента;
	НоваяСтрока.Номер = ДоговорНомер;
	НоваяСтрока.Дата = ДоговорДата;
	НоваяСтрока.Наименование = ДоговорНаименование;
	НоваяСтрока.Идентификатор = "договор"; // "договор" - идентификатор договора.
	
	// Дополним таблицу оснований параметрами обработки ошибок.
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ДокументыСделки,
		"Наименование", "ДоговорКонтрагента", "Объект.Наименование");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ДокументыСделки,
		"Номер", "ДоговорКонтрагента", "Объект.НомерДоговора");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ДокументыСделки,
		"Дата", "ДоговорКонтрагента", "Объект.ДатаДоговора");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ДокументыСделки, "ДокументыСделки");
	
КонецПроцедуры

Процедура ЗаполнитьПрайсПоСсылкеНаОбъект(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	%1 КАК Артикул,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Количество КАК Количество,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	1 КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Цена КАК Цена,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(40)) КАК ИдТипаЦены,
	|	ВЫРАЗИТЬ(Товары.Сумма * 0.05 КАК ЧИСЛО(15, 2)) КАК СуммаСкидки,
	|	Товары.ЕдиницаИзмерения КАК БазоваяЕдиницаСсылка,
	|	Товары.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка,
	|	&ВидЦены КАК ТипЦены,
	|	Товары.Ссылка.Валюта КАК Валюта,
	|	Товары.Ссылка.Валюта.Код КАК ВалютаЦены
	|ИЗ
	|	Документ._ДемоОперация.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоммерческоеПредложениеКлиенту.Номер,
	|	КоммерческоеПредложениеКлиенту.Дата,
	|	КоммерческоеПредложениеКлиенту.Валюта
	|ИЗ
	|	Документ._ДемоОперация КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоммерческоеПредложениеКлиенту.Организация КАК Контрагент,
	|	КоммерческоеПредложениеКлиенту.Контрагент.ИНН КАК ИННПолучателя,
	|	КоммерческоеПредложениеКлиенту.Контрагент.КПП КАК КПППолучателя
	|ИЗ
	|	Документ._ДемоОперация КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ВидЦены КАК ТипЦены,
	|	&ВидЦеныВалютаЦеныКод КАК ВалютаЦены,
	|	ИСТИНА КАК ВключаетНДС,
	|	&ВидЦеныНаименование КАК НаименованиеТипаЦены
	|ИЗ
	|	Документ._ДемоОперация КАК Прайс
	|ГДЕ
	|	Прайс.Ссылка = &Ссылка
	|	И НЕ &ВидЦены = &ВидЦеныПустая";
	
	ИмяДопКолонки = ""; 
	ВидЦены = ЛюбойВидЦены();
	ИмяДополнительнойКолонки(ИмяДопКолонки);
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура."+ИмяДопКолонки,""""""));
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка",					СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ВидЦеныПустая",			Справочники._ДемоВидыЦен.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидЦены",				ВидЦены);
	Запрос.УстановитьПараметр("ВидЦеныВалютаЦеныКод",	ВидЦены.Валюта.Код);
	Запрос.УстановитьПараметр("ВидЦеныНаименование",	ВидЦены.Наименование);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// заполняем простые поля
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДействительноС", НачалоГода(ТекущаяДатаСеанса()));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДействительноДо", КонецГода(ТекущаяДатаСеанса()));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДатаФормирования", ТекущаяДатаСеанса());
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Наименование", "Прайс лист наименование");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Описание", "Прайс лист описание");
	
	// заполняем Владельца "Прайс листа"
	
	РеквизитыКонтрагента = РезультатЗапроса[2].Выбрать();
	РеквизитыКонтрагента.Следующий();
	
	СведенияОВладельце = Неопределено; 
	ЭлектронноеВзаимодействиеКЭДО.ПолучитьДанныеЮрФизЛица(РеквизитыКонтрагента.Контрагент, СведенияОВладельце);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОВладельце, "Владелец");
	
	
	// Заполняем таблицу видов цен
	
	ТаблицаВидовЦенДокумента = РезультатЗапроса[3].Выгрузить();
	
	ТаблицаТипыЦен = ТаблицаТиповЦен();
	
	Для Каждого ТекущаяСтрока Из ТаблицаВидовЦенДокумента Цикл
		
		НоваяСтрока				 = ТаблицаТипыЦен.Добавить();
		НоваяСтрока.ТипЦены		 = ТекущаяСтрока.ТипЦены;
		НоваяСтрока.Наименование = ТекущаяСтрока.НаименованиеТипаЦены;
		НоваяСтрока.Валюта		 = ТекущаяСтрока.ВалютаЦены;
		НоваяСтрока.ВключаетНДС	 = Истина;
		
	КонецЦикла;
	
	Если Не ТаблицаТипыЦен = Неопределено Тогда
		// Дополним таблицу оснований параметрами обработки ошибок.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТипыЦен,
			"Наименование", ВидЦены, "Объект.Наименование");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТипыЦен,
			"Валюта", ВидЦены.Валюта, "Объект.Код");
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТипыЦен, "ТипыЦен");
	КонецЕсли;
	
	// заполняем таблицу "Предложения"
	
	ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	
	// Пример заполнения доп. данных таблицы товаров.
	ЗаполнитьДопДанныеТаблицыТоваров(ТаблицаТоваров);
	
	Если ТаблицаТоваров.Количество() > 0 Тогда
		ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");;
	КонецЕсли;
	
	
	// Пример заполнения доп данных шапки документа.
	// Для вида ЭД "Прайс лист" доступны только не подписанные данные.
	ДопДанные = Новый Структура;
	ДопДанные.Вставить("Менеджер", "Иванов И.А");
	ДопДанные.Вставить("ИННПолучателя", РеквизитыКонтрагента.ИННПолучателя);
	ДопДанные.Вставить("КПППолучателя", РеквизитыКонтрагента.КПППолучателя);
	ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДокумента, ДопДанные, Ложь);
	
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Получение данных для формирования электронных документов

Процедура ОбработатьТаблицуТоваров(ТаблицаТоваров)
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		ИДТовара = Строка.Номенклатура.УникальныйИдентификатор();
		ИДХарактеристики = ?(ЗначениеЗаполнено(Строка.Характеристика), Строка.Характеристика.УникальныйИдентификатор(), "");
		ИДУпаковки = ?(ЗначениеЗаполнено(Строка.Упаковка), Строка.Упаковка.УникальныйИдентификатор(), "");
		Строка.ИД = Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
		
		
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// Перезаполняет реквизиты шапки объекта.
//
// Параметры:
//  ТекущийОбъект    - Объект ИБ, реквизиты шапки которого необходимо заполнить,
//  ДанныеЗаполнения - Структура значений, которые необходимо подставить в объект ИБ.
//
Процедура ПерезаполнениеЗначенийРеквизитовШапки(ТекущийОбъект, ДанныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Строка Из ДанныеЗаполнения Цикл
		
		Если ЗначениеЗаполнено(Строка.Ключ) И ТекущийОбъект.Метаданные().Реквизиты.Найти(Строка.Ключ) <> Неопределено Тогда
			Если ТекущийОбъект[Строка.Ключ] <> Строка.Значение Тогда
				ТекущийОбъект[Строка.Ключ] = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

Функция ЛюбойВидЦены()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	_ДемоВидыЦен.Ссылка КАК ВидЦены
	|ИЗ
	|	Справочник._ДемоВидыЦен КАК _ДемоВидыЦен";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ВидЦены = Справочники._ДемоВидыЦен.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ВидЦены = Выборка.ВидЦены;
	КонецЕсли;
	
	Возврат ВидЦены;
	
КонецФункции

Функция СтруктураДляОтчетОПродажах(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	Товары = Документы._ДемоОперация.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Строки.Количество() = 0 Тогда // примитивный тип
			
			ЗначениеРеквизита = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Если СтрокаРеквизита.Реквизит = "ЦенаВключаетНДС" Тогда
				ИмяРеквизита = "СуммаВключаетНДС";
			ИначеЕсли СтрокаРеквизита.Реквизит = "Курс" Тогда
				ИмяРеквизита = "КурсВзаиморасчетов";
			ИначеЕсли СтрокаРеквизита.Реквизит = "ДатаПоДаннымКлиента" Тогда
				ИмяРеквизита = "ДатаПоДаннымПокупателя";
			ИначеЕсли СтрокаРеквизита.Реквизит = "НомерПоДаннымКлиента" Тогда
				ИмяРеквизита = "НомерПоДаннымПокупателя";
			ИначеЕсли СтрокаРеквизита.Реквизит = "ДокументыОснования" Тогда
				ИмяРеквизита = "Основание";
			ИначеЕсли СтрокаРеквизита.Реквизит = "ТипыЦен" 
				И ТипЗнч(ЗначениеРеквизита) = Тип("ТаблицаЗначений") 
				И ЗначениеРеквизита.Колонки.Найти("Валюта") <> Неопределено 
				И ЗначениеРеквизита.Количество() Тогда
				ИмяРеквизита = "Валюта";
				ЗначениеРеквизита = ЗначениеРеквизита[0].Валюта;
				Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЗначениеРеквизита)) Тогда 
					ЗначениеРеквизита = Справочники.Валюты.НайтиПоКоду(ЗначениеРеквизита);
				КонецЕсли;				
			Иначе
				ИмяРеквизита = СтрокаРеквизита.Реквизит;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			КонецЕсли;
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			// Добавим строку табличной части
			ЗаполнитьСтрокуТЧ(Товары, СтрокаРеквизита.Строки, ДеревоРазбора)

		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ТаблицаТиповЦен()
	
	ТаблицаТиповЦен = Новый ТаблицаЗначений;
	ТаблицаТиповЦен.Колонки.Добавить("ТипЦены");
	ТаблицаТиповЦен.Колонки.Добавить("Наименование");
	ТаблицаТиповЦен.Колонки.Добавить("Валюта");
	ТаблицаТиповЦен.Колонки.Добавить("ВключаетНДС");

	
	Возврат ТаблицаТиповЦен;
	
КонецФункции

Функция ТаблицаТоваров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаСсылка");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКоэффициент");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("ЦенаПродажи");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаПродажи");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СуммаВознаграждения");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДополнительныеРеквизиты");
	ТаблицаТоваров.Колонки.Добавить("ПокупательСсылка");
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция СтруктураАдресаФНС()
	
	СтруктураАдреса = Новый Структура;
	
	СтруктураАдреса.Вставить("Индекс");
	СтруктураАдреса.Вставить("КодРегион");
	СтруктураАдреса.Вставить("Район");
	СтруктураАдреса.Вставить("Город");
	СтруктураАдреса.Вставить("НаселПункт");
	СтруктураАдреса.Вставить("Улица");
	СтруктураАдреса.Вставить("Дом");
	СтруктураАдреса.Вставить("Корпус");
	СтруктураАдреса.Вставить("Кварт");
	СтруктураАдреса.Вставить("ОбязательныеПоля", "КодРегион");

	
	ТипыАдресов = Новый СписокЗначений;
	ТипыАдресов.Добавить(СтруктураАдреса, "Структурированный", Истина);
	ТипыАдресов.Добавить(Новый Структура("КодСтраны, АдресСтрокой"), "Произвольный", Ложь);
	ТипыАдресов.Добавить(Новый Структура("КодСтраны, АдресСтрокой"), "Иностранный", Ложь);
	
	Возврат ТипыАдресов;
	
КонецФункции

Процедура ДобавитьВДеревоДанныеСчета(ДеревоДокумента, ДанныеСчета)
	
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ДанныеСчета.БанковскийСчет, 
		"Объект.НомерСчета");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета",
		ДанныеСчета.НомерСчета, ПараметрыОбработкиОшибок);
		
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ДанныеСчета.Банк, 
		"Объект.Наименование");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование",
		ДанныеСчета.БанкНаименование, ПараметрыОбработкиОшибок);
		
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ДанныеСчета.Банк, 
		"Объект.Код");	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК",
		ДанныеСчета.БанкБИК, ПараметрыОбработкиОшибок);
		
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ДанныеСчета.Банк, 
		"Объект.КоррСчет");	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский",
		ДанныеСчета.БанкСчетКорр, ПараметрыОбработкиОшибок);
	
	Если ЗначениеЗаполнено(ДанныеСчета.БанкКоррНаименование) Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ДанныеСчета.БанкДляРасчетов, 
			"Объект.Наименование");	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование",
			ДанныеСчета.БанкКоррНаименование, ПараметрыОбработкиОшибок);
			
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ДанныеСчета.БанкДляРасчетов, 
			"Объект.КоррСчет");	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента,
			"РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", ДанныеСчета.БанкКоррСчетКорр, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ДанныеСчета.БанкДляРасчетов, 
			"Объект.Код");	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК",
			ДанныеСчета.БанкКоррБИК, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДопРеквизитыДокумента(ДокументОбъект, ДанныеЗаполнения)
	
	Если Не ДанныеЗаполнения.Свойство("ДопДанныеПодписанные") Тогда
		Возврат;
	КонецЕсли;
	
	ДопРеквизиты = "";
	Для Каждого КлючЗначение Из ДанныеЗаполнения.ДопДанныеПодписанные Цикл
		ДопРеквизиты = ДопРеквизиты + КлючЗначение.Ключ+ ": "+ КлючЗначение.Значение+ Символы.ПС;
	КонецЦикла;
	
	ДокументОбъект.Комментарий = ДокументОбъект.Комментарий + ДопРеквизиты;
	
КонецПроцедуры

Функция КолонкаСуществует(Таблица, ИмяКолонки)
	
	Результат = Не (Таблица.Колонки.Найти(ИмяКолонки) = Неопределено);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьСопоставлениеСНоменклатуройПоставщика(ТаблицаТоваров, ДеревоДокумента, НеУдалосьСопоставитьНоменклатуру)
	
	СообщениеОбОшибке = "";
	ПроверенныеСтроки = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
		
		Если Не ПроверенныеСтроки.Найти(ТекСтрока.Номенклатура) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Если в таблице товаров несколько строк с одинаковым НомерСтроки,
		// то сопоставлено более одной номенклатуры поставщика.
		ОшибкаСопоставления = ТаблицаТоваров.НайтиСтроки(Новый Структура("Номенклатура, НомерСтроки",
			ТекСтрока.Номенклатура, ТекСтрока.НомерСтроки)).Количество() > 1;
			
		Если Не ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) Или ОшибкаСопоставления Тогда
			
			
			Если Не ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) Тогда
				ШаблонСообщения = НСтр("ru = 'Номенклатура ""%1"" не сопоставлена с номенклатурой поставщика.
				|Выполните сопоставление и повторите попытку.'");
				
			Иначе
				ШаблонСообщения = НСтр("ru = 'Установлено неоднозначное сопоставление номенклатуры ""%1"" с номенклатурой поставщика.
				|Проверьте, что выбранной номенклатуре соответствует только одна номенклатура поставщика.'");
				ПроверенныеСтроки.Добавить(ТекСтрока.Номенклатура);
				
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Строка(ТекСтрока.Номенклатура) + ?(ЗначениеЗаполнено(ТекСтрока.Характеристика), " (" + ТекСтрока.Характеристика + ")", ""));
			
			СообщениеОбОшибке = СообщениеОбОшибке + ?(ЗначениеЗаполнено(СообщениеОбОшибке), Символы.ПС, "") + ТекстСообщения;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке,,,, НеУдалосьСопоставитьНоменклатуру);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников

Процедура ЗаполнитьДопДанные(ДеревоДокумента)
	
	СтруктураДопДанных = Новый Структура("Менеджер", НСтр("ru = 'Иванов И.И'"));
	ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДокумента, СтруктураДопДанных, Истина);
	
	НеПодписанныеДанные = Новый Структура("Подразделение", НСтр("ru = 'Склад 1'"));
	ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДокумента, НеПодписанныеДанные, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Формирование печатной формы ТОРГ-12

Процедура ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, Знач ОбластьМакета, Знач ПрефиксДляИмен, 
	Знач ИндексПрефикса = "", Уровень = Неопределено, ИмяГруппы = Неопределено, Открыта = Истина)
	
	ПрисвоитьИменаЯчейкамТабличногоДокумента(ОбластьМакета, ПрефиксДляИмен, ИндексПрефикса);
	
	ТабличныйДокумент.Вывести(ОбластьМакета, Уровень, ИмяГруппы, Открыта);
	
КонецПроцедуры

Процедура ПрисвоитьИменаЯчейкамТабличногоДокумента(ОбластьМакета, Знач ПрефиксДляИмен, Знач ИндексПрефикса)
	
	// Обойдем все ячейки выводимой области и заполним имена для ячеек, содержащих параметры.
	Для НомерСтроки = 1 По ОбластьМакета.ВысотаТаблицы Цикл
		Для НомерКолонки = 1 По ОбластьМакета.ШиринаТаблицы Цикл
			Ячейка = ОбластьМакета.Область(НомерСтроки, НомерКолонки);
			Если Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр
				И ЗначениеЗаполнено(Ячейка.Параметр) Тогда
				Ячейка.Имя = ПрефиксДляИмен + ИндексПрефикса + "_" + Ячейка.Параметр;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьМинимальныеПоляПечати(ТабличныйДокумент)

	// Проверка на веб-клиент
	СисИнфо = Новый СистемнаяИнформация;
	ЗначениеБоковогоПоля = ?(ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра), 5, 10); 
	
	Если ТабличныйДокумент.ПолеСлева < ЗначениеБоковогоПоля Тогда
		ТабличныйДокумент.ПолеСлева = ЗначениеБоковогоПоля;
	КонецЕсли; 
	
	Если ТабличныйДокумент.ПолеСправа < ЗначениеБоковогоПоля Тогда
		ТабличныйДокумент.ПолеСправа = ЗначениеБоковогоПоля;
	КонецЕсли;
	
	Если ТабличныйДокумент.ПолеСверху < 5 Тогда
		ТабличныйДокумент.ПолеСверху = 5;
	КонецЕсли; 

	Если ТабличныйДокумент.ПолеСнизу < 5 Тогда
		ТабличныйДокумент.ПолеСнизу = 5;
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина)

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Невозможно получить информацию о текущем принтере (возможно, в системе не установлено ни одного принтера)
								|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка вывода на печать'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции

#КонецОбласти

#Область ОписаниеПеременных

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация)
		И НЕ Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьВалютуДокумента();
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании= ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" 
		И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СформироватьЗаголовокФормы();
	
	УстановитьСтатусДокумента();
	
	ПараметрыЗаписи.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыЗаписи.Вставить("ДокументыОснования",
		ТекущийОбъект.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
		
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами	
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_СчетФактураВыданный", ПараметрыЗаписи);
	
	ОбменСКонтрагентамиКлиент.ОповеститьОбИзмененииТекущихДелПоЭДО();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеСчетаФактураОснованиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ВыборСчетаФактурыОснование" Тогда
		СтандартнаяОбработка = Ложь;
		ВыборСчетаФактурыОснование();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДокументаОснованияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ПодобратьДокументыОснования" Тогда
		СтандартнаяОбработка = Ложь;
		ПодобратьДокументыОснования();
	ИначеЕсли НавигационнаяСсылка = "ИзменитьДокументыОснования" Тогда
		СтандартнаяОбработка = Ложь;
		ИзменитьДокументыОснования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОблагаетсяНДСУПокупателяПриИзменении(Элемент)
	
	ПриИзмененииОблагаетсяНДСУПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	КлиентЭДОКлиентСервер.ПриИзмененииЦенаВключаетНДС(ЭтотОбъект);
	Элементы.ТоварыСуммаСНДС.Видимость = НЕ Объект.ЦенаВключаетНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		СтрокаТабличнойЧасти.КоличествоДоКорректировки  = 0;
		СтрокаТабличнойЧасти.ЦенаДоКорректировки        = 0;
		СтрокаТабличнойЧасти.СуммаДоКорректировки       = 0;
		СтрокаТабличнойЧасти.СуммаНДСДоКорректировки    = 0;
		СтрокаТабличнойЧасти.СуммаСНДСДоКорректировки   = 0;
		СтрокаТабличнойЧасти.СуммаАкцизаДоКорректировки = 0;
		ЗаполнитьЗаголовкиСтрок(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные.КоличествоДоКорректировки > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Вместо удаления строки исходного документа очистите суммовые и количественные показатели.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,
			"Товары[" + Формат(ТекущиеДанные.НомерСтроки - 1, "ЧН=0") + "].Количество", "Объект", Отказ)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	СтруктураРеквизитов = РеквизитыНоменклатуры(СтрокаТаблицы.Номенклатура);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураРеквизитов);
	
	КлиентЭДОКлиентСервер.ПриИзмененииСтавкаНДС(СтрокаТаблицы, Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	КлиентЭДОКлиентСервер.ПриИзмененииКоличествоЦена(Элементы.Товары.ТекущиеДанные, Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	КлиентЭДОКлиентСервер.ПриИзмененииКоличествоЦена(Элементы.Товары.ТекущиеДанные, Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	КлиентЭДОКлиентСервер.ПриИзмененииСумма(Элементы.Товары.ТекущиеДанные, Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	КлиентЭДОКлиентСервер.ПриИзмененииСтавкаНДС(Элементы.Товары.ТекущиеДанные, Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	КлиентЭДОКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ТоварыНоменклатура");
	КлиентЭДОКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ТоварыЕдиницаИзмерения");
	КлиентЭДОКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ТоварыСтавкаНДС");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор,
		"Объект.Товары.КоличествоДоКорректировки", ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	КлиентЭДОКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ТоварыКоличество");
	КлиентЭДОКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ТоварыЦена");
	КлиентЭДОКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ТоварыСумма");
	КлиентЭДОКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ТоварыСтавкаНДС");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор,
		"Объект.Товары.КоличествоДоКорректировки", ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВалютуДокумента()
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДокументыОснования.Количество() Тогда
		Основание = Объект.ДокументыОснования[0].ДокументОснование;
		Объект.Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Валюта");
	Иначе
		Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	СформироватьЗаголовокФормы();
	УстановитьСтатусДокумента();
	УстановитьПредставлениеСчетаФактурыОснования();
	УстановитьПредставлениеДокументовОснования();
	УстановитьВидимостьПолейНДС();
	
	Если Объект.ВидОперации = Перечисления.ВидыОпераций.Реализация Тогда
		Элементы.ГруппаСчетФактураОснование.Видимость = Ложь;
		Элементы.ГруппаНомерИсправления.Видимость = Ложь;
		Элементы.ГруппаНомерДатаИсходногоДокумента.Видимость = Ложь;
		Элементы.ГруппаНомерДатаИсправленияИсходногоДокумента.Видимость = Ложь;
		Элементы.ГруппаНомерДатаИсправляемогоКорректировочногоДокумента.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОпераций.Исправление Тогда
		Элементы.СчетФактураОснованиеПредставление.Заголовок = НСтр("ru = 'Исправительный к'");
		Элементы.НомерЭД.ТолькоПросмотр = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОпераций.Корректировка Тогда
		Элементы.СчетФактураОснованиеПредставление.Заголовок = НСтр("ru = 'Корректировочный к'");
		Элементы.ГруппаНомерИсправления.Видимость = Ложь;
		Элементы.ГруппаНомерДатаИсправляемогоКорректировочногоДокумента.Видимость = Ложь;
		
	КонецЕсли;
	
	ЕстьДокументыОснования = Объект.ДокументыОснования.Количество() > 0;
	
	Элементы.Организация.ТолькоПросмотр        = ЕстьДокументыОснования;
	Элементы.Контрагент.ТолькоПросмотр         = ЕстьДокументыОснования;
	Элементы.ДоговорКонтрагента.ТолькоПросмотр = ЕстьДокументыОснования;
	
	Элементы.СтраницаТовары.Видимость = НЕ ЕстьДокументыОснования;
	Элементы.ГруппаИтоги.Видимость = НЕ ЕстьДокументыОснования;
	
	Элементы.СтраницаТоварыОснования.Видимость = ЕстьДокументыОснования;
	Элементы.ГруппаИтогиОснования.Видимость = ЕстьДокументыОснования;
	
	Элементы.ЦенаВключаетНДС.ТолькоПросмотр = ЕстьДокументыОснования;
	Элементы.ТоварыГруппаСуммаСНДС.Видимость = НЕ Объект.ЦенаВключаетНДС;
	Элементы.ТоварыОснованияГруппаСуммаСНДС.Видимость = НЕ Объект.ЦенаВключаетНДС;
	
	Элементы.ОблагаетсяНДСУПокупателя.ТолькоПросмотр = ЕстьДокументыОснования;
	
	Если ЕстьДокументыОснования Тогда
		ЗаполнитьТоварыОснования();
		УстановитьВидимостьПолейДоКорректировки(ТоварыОснования);
	Иначе
		УстановитьВидимостьПолейДоКорректировки(Объект.Товары);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыОснования();
	
	МассивОснований = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.ДокументыОснования Цикл
		МассивОснований.Добавить(СтрокаТаблицы.ДокументОснование);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугТовары.Характеристика КАК Характеристика,
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	РеализацияТоваровУслугТовары.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
		|	РеализацияТоваровУслугТовары.Количество КАК Количество,
		|	РеализацияТоваровУслугТовары.ЦенаДоКорректировки КАК ЦенаДоКорректировки,
		|	РеализацияТоваровУслугТовары.Цена КАК Цена,
		|	РеализацияТоваровУслугТовары.СуммаДоКорректировки КАК СуммаДоКорректировки,
		|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
		|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки,
		|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
		|	РеализацияТоваровУслугТовары.СуммаСНДСДоКорректировки КАК СуммаСНДСДоКорректировки,
		|	РеализацияТоваровУслугТовары.СуммаСНДС КАК СуммаСНДС,
		|	РеализацияТоваровУслугТовары.СуммаАкцизаДоКорректировки КАК СуммаАкцизаДоКорректировки,
		|	РеализацияТоваровУслугТовары.СуммаАкциза КАК СуммаАкциза,
		|	РеализацияТоваровУслугТовары.НомерГТД КАК НомерГТД,
		|	РеализацияТоваровУслугТовары.СтранаПроисхождения КАК СтранаПроисхождения
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка В (&Основания)";
	
	Запрос.УстановитьПараметр("Основания", МассивОснований);
	
	ТоварыОснования.Очистить();
	НомерСтроки = 1;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТоварыОснования.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Элементы.СтраницаТоварыОснования.Заголовок = СтрШаблон(НСтр("ru = 'Товары и услуги (%1)'"),
		ТоварыОснования.Количество());
	
	СуммаНДСДокумента = ТоварыОснования.Итог("СуммаНДС");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокФормы()
	
	ЭтотОбъект.Заголовок = КлиентЭДОКлиентСервер.ПредставлениеИсходящегоДокумента(Объект, Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусДокумента()
	
	СтатусДокумента = КлиентЭДО.СтатусДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеСчетаФактурыОснования()
	
	МассивСтрок = Новый Массив;
	Если ЗначениеЗаполнено(Объект.СчетФактураОснование) Тогда
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			Строка(Объект.СчетФактураОснование),,
			ЦветаСтиля.ГиперссылкаЦвет,,
			ПолучитьНавигационнуюСсылку(Объект.СчетФактураОснование)));
			
		МассивСтрок.Добавить("   ");
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Изменить'"), ,
			ЦветаСтиля.ГиперссылкаЦвет, ,
			"ВыборСчетаФактурыОснование"));
		
	Иначе
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Счет-фактура <не выбран>'"),,
			WebЦвета.Кирпичный,,
			"ВыборСчетаФактурыОснование"));
		
	КонецЕсли;
	
	СчетФактураОснованиеПредставление = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеДокументовОснования()
	
	КоличествоДокументов = Объект.ДокументыОснования.Количество();
	
	МассивСтрок = Новый Массив;
	Если КоличествоДокументов = 0 Тогда
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = '<Подбор>'"), ,
			ЦветаСтиля.ГиперссылкаЦвет, ,
			"ПодобратьДокументыОснования"));
		
	Иначе
		
		Если КоличествоДокументов = 1 Тогда
			
			ПервыйДокумент = Объект.ДокументыОснования[0].ДокументОснование;
			Если ЗначениеЗаполнено(ПервыйДокумент) Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
					Строка(ПервыйДокумент), , ЦветаСтиля.ГиперссылкаЦвет, , ПолучитьНавигационнуюСсылку(ПервыйДокумент)));
			Иначе
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
					НСтр("ru = '<не выбран>'"), , WebЦвета.Кирпичный));
			КонецЕсли;
			
			МассивСтрок.Добавить("   ");
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Изменить'"), ,
				ЦветаСтиля.ГиперссылкаЦвет, ,
				"ИзменитьДокументыОснования"));
		Иначе
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				СтрШаблон(НСтр("ru='Всего документов: %1'"), КоличествоДокументов) , ,
				ЦветаСтиля.ГиперссылкаЦвет, ,
				"ИзменитьДокументыОснования"));
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	ДокументыОснованияПредставление = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСчетаФактурыОснование()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормы.Вставить("ИсключитьСчетФактуру", Объект.Ссылка);
	Если Объект.ДокументыОснования.Количество() Тогда
		ОснованиеКорректировки = Объект.ДокументыОснования[0].ДокументОснование;
		ПараметрыФормы.Вставить("ОснованиеКорректировки", ОснованиеКорректировки);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВыборСчетаФактурыОснованиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СчетФактураВыданный.ФормаВыбора",
		ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСчетаФактурыОснованиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		МассивОснований = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Результат);
		ОбработкаИзмененияСпискаДокументовОснований(МассивОснований);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокументыОснования()
	
	Если Объект.Товары.Количество() Тогда
		ТекстВопроса = НСтр("ru = 'Документ будет перезаполнен данными документа основания.
			|Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодобратьДокументыОснованияПослеВопроса", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПодобратьДокументыОснованияПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокументыОснованияПослеВопроса(Результат, Контекст) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПодобратьДокументыОснованияПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокументыОснованияПродолжение()
	
	ПараметрыФормы = ПараметрыПодбораДокументовОснований();
	Оповещение = Новый ОписаниеОповещения("ПодобратьДокументыОснованияЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаПодбораОснованийСчетаФактуры",
		ПараметрыФормы, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокументыОснованияЗавершение(Результат, Контекст) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработкаИзмененияСпискаДокументовОснований(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДокументыОснования()
	
	ПараметрыФормы = ПараметрыПодбораДокументовОснований();
	Оповещение = Новый ОписаниеОповещения("ИзменитьДокументыОснованияЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаДокументыОснования", ПараметрыФормы,
		ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДокументыОснованияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработкаИзмененияСпискаДокументовОснований(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПодбораДокументовОснований()
	
	СписокОснований = Новый СписокЗначений;
	Для Каждого ЭлементКоллекции Из Объект.ДокументыОснования Цикл
		СписокОснований.Добавить(ЭлементКоллекции.ДокументОснование);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОперации",          Объект.ВидОперации);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент",           Объект.Контрагент);
	СтруктураПараметров.Вставить("СписокОснований",      СписокОснований);
	СтруктураПараметров.Вставить("СчетФактураОснование", Объект.СчетФактураОснование);
	
	Если ЗначениеЗаполнено(СписокОснований) Тогда
		СтруктураПараметров.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ОбработкаИзмененияСпискаДокументовОснований(МассивОснований)
	
	Модифицированность = Истина;
	
	Объект.СуммаДокумента = 0;
	Объект.ДокументыОснования.Очистить();
	
	КоличествоОснований = МассивОснований.Количество();
	Если КоличествоОснований Тогда
		Объект.Товары.Очистить();
		
		Основание = МассивОснований[0];
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.Заполнить(Основание);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		
		Если КоличествоОснований > 1 Тогда
			
			Для Счетчик = 1 По КоличествоОснований - 1 Цикл
				НоваяСтрока = Объект.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование = МассивОснований[Счетчик];
			КонецЦикла;
			
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Объект.СчетФактураОснование) Тогда
		ЗаполнитьТоварыПоСчетуФактуре();
		
	Иначе
		ТоварыОснования.Очистить();
		СуммаНДСДокумента = 0;
	КонецЕсли;
	
	ПодготовитьФормуНаСервере();
	
	Если Объект.ДокументыОснования.Количество() Тогда
		Объект.СуммаДокумента = ТоварыОснования.Итог("СуммаСНДС");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоСчетуФактуре();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданныйТовары.Номенклатура КАК Номенклатура,
		|	СчетФактураВыданныйТовары.Характеристика КАК Характеристика,
		|	СчетФактураВыданныйТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СчетФактураВыданныйТовары.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
		|	СчетФактураВыданныйТовары.Количество КАК Количество,
		|	СчетФактураВыданныйТовары.ЦенаДоКорректировки КАК ЦенаДоКорректировки,
		|	СчетФактураВыданныйТовары.Цена КАК Цена,
		|	СчетФактураВыданныйТовары.СуммаДоКорректировки КАК СуммаДоКорректировки,
		|	СчетФактураВыданныйТовары.Сумма КАК Сумма,
		|	СчетФактураВыданныйТовары.СтавкаНДС КАК СтавкаНДС,
		|	СчетФактураВыданныйТовары.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки,
		|	СчетФактураВыданныйТовары.СуммаНДС КАК СуммаНДС,
		|	СчетФактураВыданныйТовары.СуммаСНДСДоКорректировки КАК СуммаСНДСДоКорректировки,
		|	СчетФактураВыданныйТовары.СуммаСНДС КАК СуммаСНДС,
		|	СчетФактураВыданныйТовары.СуммаАкцизаДоКорректировки КАК СуммаАкцизаДоКорректировки,
		|	СчетФактураВыданныйТовары.СуммаАкциза КАК СуммаАкциза,
		|	СчетФактураВыданныйТовары.НомерГТД КАК НомерГТД,
		|	СчетФактураВыданныйТовары.СтранаПроисхождения КАК СтранаПроисхождения
		|ИЗ
		|	Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
		|ГДЕ
		|	СчетФактураВыданныйТовары.Ссылка = &СчетФактураОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугТовары.Характеристика КАК Характеристика,
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	РеализацияТоваровУслугТовары.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
		|	РеализацияТоваровУслугТовары.Количество КАК Количество,
		|	РеализацияТоваровУслугТовары.ЦенаДоКорректировки КАК ЦенаДоКорректировки,
		|	РеализацияТоваровУслугТовары.Цена КАК Цена,
		|	РеализацияТоваровУслугТовары.СуммаДоКорректировки КАК СуммаДоКорректировки,
		|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
		|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки,
		|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
		|	РеализацияТоваровУслугТовары.СуммаСНДСДоКорректировки КАК СуммаСНДСДоКорректировки,
		|	РеализацияТоваровУслугТовары.СуммаСНДС КАК СуммаСНДС,
		|	РеализацияТоваровУслугТовары.СуммаАкцизаДоКорректировки КАК СуммаАкцизаДоКорректировки,
		|	РеализацияТоваровУслугТовары.СуммаАкциза КАК СуммаАкциза,
		|	РеализацияТоваровУслугТовары.НомерГТД КАК НомерГТД,
		|	РеализацияТоваровУслугТовары.СтранаПроисхождения КАК СтранаПроисхождения
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|		ПО РеализацияТоваровУслугТовары.Ссылка = СчетФактураВыданныйДокументыОснования.ДокументОснование
		|			И (СчетФактураВыданныйДокументыОснования.Ссылка = &СчетФактураОснование)";
	
	Запрос.УстановитьПараметр("СчетФактураОснование", Объект.СчетФактураОснование);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если НЕ РезультатыЗапроса[0].Пустой() Тогда
		Объект.Товары.Загрузить(РезультатыЗапроса[0].Выгрузить());
		
	ИначеЕсли НЕ РезультатыЗапроса[1].Пустой() Тогда
		Объект.Товары.Загрузить(РезультатыЗапроса[1].Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПолейДоКорректировки(ТаблицаТовары);
	
	ВидимостьДоКорректировки = Объект.ВидОперации = Перечисления.ВидыОпераций.Корректировка
		ИЛИ (ЗначениеЗаполнено(Объект.НомерИсправляемогоКорректировочногоДокумента)
			И ЗначениеЗаполнено(Объект.ДатаИсправляемогоКорректировочногоДокумента));
	
	Элементы.ТоварыГруппаЗаголовкиСтрок.Видимость       = ВидимостьДоКорректировки;
	Элементы.ТоварыКоличествоДоКорректировки.Видимость  = ВидимостьДоКорректировки;
	Элементы.ТоварыЦенаДоКорректировки.Видимость        = ВидимостьДоКорректировки;
	Элементы.ТоварыСуммаДоКорректировки.Видимость       = ВидимостьДоКорректировки;
	Элементы.ТоварыСуммаНДСДоКорректировки.Видимость    = ВидимостьДоКорректировки;
	Элементы.ТоварыСуммаСНДСДоКорректировки.Видимость   = ВидимостьДоКорректировки
		И НЕ Объект.ЦенаВключаетНДС;
	Элементы.ТоварыСуммаАкцизаДоКорректировки.Видимость = ВидимостьДоКорректировки;
	
	Элементы.ТоварыОснованияГруппаЗаголовкиСтрок.Видимость       = ВидимостьДоКорректировки;
	Элементы.ТоварыОснованияКоличествоДоКорректировки.Видимость  = ВидимостьДоКорректировки;
	Элементы.ТоварыОснованияЦенаДоКорректировки.Видимость        = ВидимостьДоКорректировки;
	Элементы.ТоварыОснованияСуммаДоКорректировки.Видимость       = ВидимостьДоКорректировки;
	Элементы.ТоварыОснованияСуммаНДСДоКорректировки.Видимость    = ВидимостьДоКорректировки;
	Элементы.ТоварыОснованияСуммаСНДСДоКорректировки.Видимость   = ВидимостьДоКорректировки
		И НЕ Объект.ЦенаВключаетНДС;
	Элементы.ТоварыОснованияСуммаАкцизаДоКорректировки.Видимость = ВидимостьДоКорректировки;
	
	Элементы.ПлатежноРасчетныеДокументы.ТолькоПросмотр = ВидимостьДоКорректировки;
	
	Если ВидимостьДоКорректировки Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
			ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы)
	
	СтрокаТаблицы.НадписьДоКорректировки    = НСтр("ru = 'До корректировки:'");
	СтрокаТаблицы.НадписьПослеКорректировки = НСтр("ru = 'После корректировки:'");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПолейНДС()
	
	ВидимостьНДС = НЕ Объект.ОблагаетсяНДСУПокупателя;
	Элементы.ЦенаВключаетНДС.Видимость = ВидимостьНДС;
	
	Элементы.ТоварыСтавкаНДС.Видимость = ВидимостьНДС;
	Элементы.ТоварыГруппаСуммаНДС.Видимость  = ВидимостьНДС;
	Элементы.ТоварыГруппаСуммаСНДС.Видимость = ВидимостьНДС;
	Элементы.ИтогиВсегоНДС.Видимость = ВидимостьНДС;
	
	Элементы.ТоварыОснованияСтавкаНДС.Видимость = ВидимостьНДС;
	Элементы.ТоварыОснованияГруппаСуммаНДС.Видимость  = ВидимостьНДС;
	Элементы.ТоварыОснованияГруппаСуммаСНДС.Видимость = ВидимостьНДС;
	Элементы.ИтогиОснованияВсегоНДС.Видимость = ВидимостьНДС;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыНоменклатуры(СсылкаНаОбъект);
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, "ЕдиницаИзмерения, СтавкаНДС");
	
КонецФункции

&НаСервере
Процедура ПриИзмененииОблагаетсяНДСУПокупателя();
	
	УстановитьВидимостьПолейНДС();
	
	Если НЕ Объект.ЦенаВключаетНДС Тогда
		Объект.ЦенаВключаетНДС = Истина;
		КлиентЭДОКлиентСервер.ПриИзмененииЦенаВключаетНДС(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти
#Область ОписаниеПеременных

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Перем ПодменюПечать;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация)
		И НЕ Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		ПриИзмененииОрганизации(ЭтотОбъект);
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		ПодготовитьФормуНаСервере();
		ЗаполнитьПоследнийКорректирующийДокумент();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ПоследнийКорректирующийДокумент) Тогда
		ТекстВопроса = НСтр("ru = 'Для указанного документа существуют более поздние исправления.
			|Использовать последнее введенное исправление?'");
			
		Оповещение = Новый ОписаниеОповещения("ВопросИспользоватьПоследнееИсправление", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ПодменюПечать = Элементы.Найти("ПодменюПечать");
	ОбновитьВидимостьКомандПечати();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СчетФактураВыданный"
		И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		СчетФактура = Параметр.Ссылка;
		УстановитьПредставлениеСчетаФактуры(ЭтотОбъект);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СформироватьЗаголовокФормы();
	
	УстановитьСтатусДокумента();
	
	УстановитьВидимостьПолейДоКорректировки();
	
	УстановитьПредставлениеСчетаФактуры(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбменСКонтрагентамиКлиент.ОповеститьОбИзмененииТекущихДелПоЭДО();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументОснованиеПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ВыборДокументаОснования" Тогда
		СтандартнаяОбработка = Ложь;
		ВыборДокументаОснования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетФактураПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ВвестиСчетФактуру" Тогда
		СтандартнаяОбработка = Ложь;
		ВвестиСчетФактуру();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОблагаетсяНДСУПокупателяПриИзменении(Элемент)
	
	ПриИзмененииОблагаетсяНДСУПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	КлиентЭДОКлиентСервер.ПриИзмененииЦенаВключаетНДС(ЭтотОбъект);
	Элементы.ТоварыСуммаСНДС.Видимость = НЕ Объект.ЦенаВключаетНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьВидимостьКомандПечати(); 

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		СтрокаТабличнойЧасти.КоличествоДоКорректировки  = 0;
		СтрокаТабличнойЧасти.ЦенаДоКорректировки        = 0;
		СтрокаТабличнойЧасти.СуммаДоКорректировки       = 0;
		СтрокаТабличнойЧасти.СуммаНДСДоКорректировки    = 0;
		СтрокаТабличнойЧасти.СуммаСНДСДоКорректировки   = 0;
		СтрокаТабличнойЧасти.СуммаАкцизаДоКорректировки = 0;
		ЗаполнитьЗаголовкиСтрок(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные.КоличествоДоКорректировки > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Вместо удаления строки исходного документа очистите суммовые и количественные показатели.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,
			"Товары[" + Формат(ТекущиеДанные.НомерСтроки - 1, "ЧН=0") + "].Количество", "Объект", Отказ)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	СтруктураРеквизитов = РеквизитыНоменклатуры(СтрокаТаблицы.Номенклатура);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураРеквизитов);
	
	КлиентЭДОКлиентСервер.ПриИзмененииСтавкаНДС(СтрокаТаблицы, Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	КлиентЭДОКлиентСервер.ПриИзмененииКоличествоЦена(Элементы.Товары.ТекущиеДанные, Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	КлиентЭДОКлиентСервер.ПриИзмененииКоличествоЦена(Элементы.Товары.ТекущиеДанные, Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	КлиентЭДОКлиентСервер.ПриИзмененииСумма(Элементы.Товары.ТекущиеДанные, Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	КлиентЭДОКлиентСервер.ПриИзмененииСтавкаНДС(Элементы.Товары.ТекущиеДанные, Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	КлиентЭДОКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ТоварыНоменклатура");
	КлиентЭДОКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ТоварыЕдиницаИзмерения");
	КлиентЭДОКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ТоварыСтавкаНДС");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор,
		"Объект.Товары.КоличествоДоКорректировки", ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	КлиентЭДОКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ТоварыКоличество");
	КлиентЭДОКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ТоварыЦена");
	КлиентЭДОКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ТоварыСумма");
	КлиентЭДОКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, "ТоварыСтавкаНДС");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор,
		"Объект.Товары.КоличествоДоКорректировки", ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если Объект.ВидДокумента = Перечисления.ВидыДокументов.ТоварнаяНакладная Тогда
		ПодготовитьФормуТоварнаяНакладная();
		
	ИначеЕсли Объект.ВидДокумента = Перечисления.ВидыДокументов.АктВыполненныхРабот Тогда
		ПодготовитьФормуАктВыполненныхРабот();
		
	ИначеЕсли Объект.ВидДокумента = Перечисления.ВидыДокументов.АктНаПередачуПрав Тогда
		ПодготовитьФормуАктНаПередачуПрав();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуТоварнаяНакладная()
	
	ПодготовитьФормуДокумента();
	
	УстановитьВидимостьПолейНДС();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуАктВыполненныхРабот()
	
	ПодготовитьФормуДокумента();
	
	Элементы.СтраницаТовары.Заголовок = НСтр("ru = 'Услуги'");
	Элементы.ТоварыГруппаСуммаАкциза.Видимость    = Ложь;
	Элементы.ТоварыНомерГТД.Видимость             = Ложь;
	Элементы.ТоварыСтранаПроисхождения.Видимость  = Ложь;
	Элементы.СтраницаСведенияОбОтгрузке.Видимость = Ложь;
	Элементы.ОблагаетсяНДСУПокупателя.Видимость   = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуАктНаПередачуПрав()
	
	ПодготовитьФормуДокумента();
	
	Элементы.ТоварыГруппаСуммаАкциза.Видимость    = Ложь;
	Элементы.ТоварыНомерГТД.Видимость             = Ложь;
	Элементы.ТоварыСтранаПроисхождения.Видимость  = Ложь;
	Элементы.СтраницаСведенияОбОтгрузке.Видимость = Ложь;
	Элементы.ОблагаетсяНДСУПокупателя.Видимость   = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуДокумента()
	
	СформироватьЗаголовокФормы();
	
	УстановитьСтатусДокумента();
	
	Элементы.ТоварыСуммаСНДС.Видимость = НЕ Объект.ЦенаВключаетНДС;
	
	УстановитьВидимостьПолейДоКорректировки();
	
	СчетФактура = Документы.СчетФактураВыданный.СчетФактураДокумента(Объект.Ссылка);
	УстановитьПредставлениеСчетаФактуры(ЭтотОбъект);
	
	Если Объект.ВидОперации = Перечисления.ВидыОпераций.Реализация Тогда
		Элементы.ГруппаОснование.Видимость =  Ложь;
		Элементы.ГруппаНомерИсправления.Видимость = Ложь;
		Элементы.ГруппаНомерДатаИсходногоДокумента.Видимость = Ложь;
		Элементы.ГруппаНомерДатаИсправленияИсходногоДокумента.Видимость = Ложь;
		Элементы.ГруппаНомерДатаИсправляемогоКорректировочногоДокумента.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОпераций.Исправление Тогда
		Элементы.НомерЭД.ТолькоПросмотр = Истина;
		Элементы.ЦенаВключаетНДС.ТолькоПросмотр = Истина;
		УстановитьПредставлениеДокументаОснования();
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОпераций.Корректировка Тогда
		Элементы.ГруппаНомерИсправления.Видимость = Ложь;
		Элементы.ЦенаВключаетНДС.ТолькоПросмотр = Истина;
		Элементы.СтраницаСведенияОбОтгрузке.Видимость = Ложь;
		Элементы.ГруппаНомерДатаИсправляемогоКорректировочногоДокумента.Видимость = Ложь;
		УстановитьПредставлениеДокументаОснования();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокФормы()
	
	ЭтотОбъект.Заголовок = КлиентЭДОКлиентСервер.ПредставлениеИсходящегоДокумента(Объект, Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусДокумента()
	
	СтатусДокумента = КлиентЭДО.СтатусДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеСчетаФактуры(Форма)
	
	Если ЗначениеЗаполнено(Форма.СчетФактура) Тогда
		Форма.СчетФактураПредставление = Новый ФорматированнаяСтрока(
			Строка(Форма.СчетФактура),,,,ПолучитьНавигационнуюСсылку(Форма.СчетФактура));
	Иначе
		Форма.СчетФактураПредставление = Новый ФорматированнаяСтрока(
			НСтр("ru='Оформить счет-фактуру'"),,,,"ВвестиСчетФактуру");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСчетФактуру()
	
	Если НЕ Объект.Проведен ИЛИ Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Ввод счета-фактуры возможен только после проведения документа,
			|Выполнить проведение документа и продолжить?'");
		Обработчик = Новый ОписаниеОповещения(
			"ВвестиСчетФактуруПослеПодтверждениеПроведения", ЭтотОбъект);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки);
	Иначе
		ВвестиСчетФактуруПослеПроведения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСчетФактуруПослеПодтверждениеПроведения(Результат, Контекст) Экспорт
	
	ДокументПроведен = Ложь;
	Если Результат = КодВозвратаДиалога.Да Тогда
		Попытка
			ДокументПроведен = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Исключение
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось выполнить проведение документа'"));
		КонецПопытки;
		
		Если ДокументПроведен Тогда
			ВвестиСчетФактуруПослеПроведения();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСчетФактуруПослеПроведения()
	
	ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.СчетФактураВыданный.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеДокументаОснования()
	
	МассивСтрок = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			Строка(Объект.ДокументОснование), ,
			ЦветаСтиля.ГиперссылкаЦвет, ,
			ПолучитьНавигационнуюСсылку(Объект.ДокументОснование)));
			
		МассивСтрок.Добавить("   ");
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Изменить'"), ,
			ЦветаСтиля.ГиперссылкаЦвет, ,
			"ВыборДокументаОснования"));
		
	Иначе
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru='%1 <не выбран>'"), Объект.ВидДокумента), ,
			WebЦвета.Кирпичный, ,
			"ВыборДокументаОснования"));
		
	КонецЕсли;
	
	ДокументОснованиеПредставление = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаОснования()
	
	ЗначениеОтбора = Новый Структура;
	ЗначениеОтбора.Вставить("ВидДокумента", Объект.ВидДокумента);
	ЗначениеОтбора.Вставить("Проведен", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИсключитьДокумент", Объект.Ссылка);
	ПараметрыФормы.Вставить("Отбор", ЗначениеОтбора);
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПослеВыбораДокумента", ЭтотОбъект);
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаВыбора",
		ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПослеВыбораДокумента(Результат, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ЗаполнитьПослеВыбораДокументаНаСервере(Результат);
		
		Если ЗначениеЗаполнено(ПоследнийКорректирующийДокумент) Тогда
			ТекстВопроса = НСтр("ru = 'Для указанного документа существуют более поздние исправления.
				|Использовать последнее введенное исправление?'");
				
			Оповещение = Новый ОписаниеОповещения("ВопросИспользоватьПоследнееИсправление", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПослеВыбораДокументаНаСервере(ВыбранноеЗначение)
	
	Модифицированность = Истина;
	ДанныеЗаполнения = Новый Структура("Основание, ВидОперации", ВыбранноеЗначение, Объект.ВидОперации);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	УстановитьПредставлениеДокументаОснования();
	УстановитьВидимостьПолейДоКорректировки();
	
	ЗаполнитьПоследнийКорректирующийДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИспользоватьПоследнееИсправление(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПослеВыбораДокументаНаСервере(ПоследнийКорректирующийДокумент);
		ПоследнийКорректирующийДокумент = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПолейДоКорректировки();
	
	ВидимостьДоКорректировки = Объект.ВидОперации = Перечисления.ВидыОпераций.Корректировка
		ИЛИ (ЗначениеЗаполнено(Объект.НомерИсправляемогоКорректировочногоДокумента)
			И ЗначениеЗаполнено(Объект.ДатаИсправляемогоКорректировочногоДокумента));
	
	Элементы.ТоварыГруппаЗаголовкиСтрок.Видимость       = ВидимостьДоКорректировки;
	Элементы.ТоварыКоличествоДоКорректировки.Видимость  = ВидимостьДоКорректировки;
	Элементы.ТоварыЦенаДоКорректировки.Видимость        = ВидимостьДоКорректировки;
	Элементы.ТоварыСуммаДоКорректировки.Видимость       = ВидимостьДоКорректировки;
	Элементы.ТоварыСуммаНДСДоКорректировки.Видимость    = ВидимостьДоКорректировки;
	Элементы.ТоварыСуммаСНДСДоКорректировки.Видимость   = ВидимостьДоКорректировки
		И НЕ Объект.ЦенаВключаетНДС;
	Элементы.ТоварыСуммаАкцизаДоКорректировки.Видимость = ВидимостьДоКорректировки;
	
	Если ВидимостьДоКорректировки Тогда
		Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
			ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы)
	
	СтрокаТаблицы.НадписьДоКорректировки    = НСтр("ru = 'До корректировки:'");
	СтрокаТаблицы.НадписьПослеКорректировки = НСтр("ru = 'После корректировки:'");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПолейНДС()
	
	ВидимостьНДС = НЕ Объект.ОблагаетсяНДСУПокупателя;
	Элементы.ЦенаВключаетНДС.Видимость = ВидимостьНДС;
	Элементы.ТоварыСтавкаНДС.Видимость = ВидимостьНДС;
	Элементы.ТоварыГруппаСуммаНДС.Видимость  = ВидимостьНДС;
	Элементы.ТоварыГруппаСуммаСНДС.Видимость = ВидимостьНДС;
	Элементы.ИтогиВсегоНДС.Видимость = ВидимостьНДС;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииОрганизации(Форма);
	
	Объект = Форма.Объект;
	Объект.БанковскийСчетОрганизации = ОсновнойБанковскийСчет(Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОблагаетсяНДСУПокупателя();
	
	УстановитьВидимостьПолейНДС();
	
	Если НЕ Объект.ЦенаВключаетНДС Тогда
		Объект.ЦенаВключаетНДС = Истина;
		КлиентЭДОКлиентСервер.ПриИзмененииЦенаВключаетНДС(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОсновнойБанковскийСчет(Организация)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Организация, "ОсновнойБанковскийСчет", Истина);
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитыНоменклатуры(СсылкаНаОбъект);
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, "ЕдиницаИзмерения, СтавкаНДС");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоследнийКорректирующийДокумент()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		КорректирующийДокумент = Документы.РеализацияТоваровУслуг.ПоследнийКорректирующийДокумент(
			Объект.ДокументОснование);
		
		Если КорректирующийДокумент <> Объект.ДокументОснование
			И КорректирующийДокумент <> Объект.Ссылка Тогда
			ПоследнийКорректирующийДокумент = КорректирующийДокумент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьКомандПечати()
	
	Если ПодменюПечать <> Неопределено Тогда
		ПодменюПечать.Доступность = Объект.Товары.Количество() > 0;
	КонецЕсли;

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти

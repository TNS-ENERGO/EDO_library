#Область ОписаниеПеременных

&НаКлиенте
Перем ДанныеSMSАвторизации;

&НаКлиенте
Перем ИдентификаторСессии;

#КонецОбласти

#Область ОбработчикиСобытийФорм

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Организация) 
		И ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НастройкаОбмена = НастройкаОбмена(Организация, БанковскийСчетОрганизации);
	КонецЕсли;
	
	НастроитьОформлениеЭтаповТестирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ДанныеЗагружены Тогда
		
		ЗагрузитьПоставляемыеДанныеДляТестирования();
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДанныеДляТестирования;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура БанковскийСчетОрганизацииПриИзменении(Элемент)
	
	НастройкаОбмена = НастройкаОбмена(Организация, БанковскийСчетОрганизации);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьДанныеВФайл(Команда)
	
	Адрес = ВыгрузитьТестовыеДанные();
	
	Если ЗначениеЗаполнено(Адрес) Тогда
		
	#Если ВебКлиент Тогда
		ПолучитьФайл(Адрес, "TestData.json", Истина);
	#Иначе
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.Заголовок          = НСтр("ru = 'Выберите файл для сохранения'"); 
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		ДиалогВыбораФайла.Фильтр             = НСтр("ru = 'Файл json|*.json'");;
		ДиалогВыбораФайла.Расширение         = "json";
		ДиалогВыбораФайла.ПолноеИмяФайла     = "TestData.json";

		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(, Адрес));
		Оповещение = Новый ОписаниеОповещения("ПустойОбработчик", ЭтотОбъект);
		НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, ДиалогВыбораФайла);
	#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзФайла(Команда)
	
#Если ВебКлиент Тогда
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьДанныеПослеПомещенияФайла", ЭтотОбъект);
	НачатьПомещениеФайла(Оповещение,,,Истина);
#Иначе
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок          = НСтр("ru = 'Выберите файл для загрузки'"); 
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Фильтр             = НСтр("ru = 'Файл json|*.json'");;
	ДиалогВыбораФайла.Расширение         = "json";
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьДанныеПослеВыбораВДиалоге", ЭтотОбъект);
	НачатьПомещениеФайлов(Оповещение,,ДиалогВыбораФайла);
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Logon(Команда)
	
	ПолучитьИдентификаторСессииБазоваяАутентификация();
	
КонецПроцедуры

&НаКлиенте
Процедура LogonOTP(Команда)
	
	ВводДанныхSMSАвторизации();
	
КонецПроцедуры

&НаКлиенте
Процедура GetSettings(Команда)
	
	ПолучитьНастройкиОбменаССервераБанка();
	
КонецПроцедуры

&НаКлиенте
Процедура SendPackPayDocRu(Команда)
	
	ОтправитьПлатежныйДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура GetPackListPayDocRu(Команда)
	
	РезультатОтправкиПлатежногоДокумента();

КонецПроцедуры

&НаКлиенте
Процедура SendPackStatusRequest(Команда)
	
	ОтправитьЗапросСостоянияЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура GetPackListStatusRequest(Команда)
	
	РезультатЗапросаСостояния();
	
КонецПроцедуры

&НаКлиенте
Процедура SendPackStatementRequest(Команда)
	
	ЗапросВыпискиБанка();
	
КонецПроцедуры

&НаКлиенте
Процедура GetPackListStatementRequest(Команда)
	
	РезультатЗапросаВыписки();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТестовыеДанные

&НаСервере
Функция ПоставляемыеТестовыеДанные(ЕстьОшибка = Ложь)
	
	СтруктураДанных = Неопределено;
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТестовыеДанные = ТекОбъект.ПолучитьМакет("ТестовыеДанные");
	ТестовыеДанныеJSON = ТестовыеДанные.ПолучитьТекст();
	
	Если ПустаяСтрока(ТестовыеДанныеJSON) Тогда
		Возврат СтруктураДанных;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТестовыеДанныеJSON);
	
	Попытка
		СтруктураДанных = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ЕстьОшибка = Истина;
		ТекстСообщения = НСтр("ru = 'Ошибка загрузки данных для тестирования.
					|Заполните данные на вкладке ""Данные для тестирования"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение поставляемых тестовых данных'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервере
Функция ВыгрузитьТестовыеДанные()
	
	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетОрганизации, "Банк");
	БанкКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетКонтрагента, "Банк");
	
	СтруктураДанных = Новый Структура;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураДанных.Вставить("Организация", Организация.ПолучитьОбъект());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		СтруктураДанных.Вставить("Контрагент",  Контрагент.ПолучитьОбъект());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		БанкОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетОрганизации, "Банк");
		БанкОрганизацииОбъект = БанкОрганизации.ПолучитьОбъект();
		БанкОрганизацииОбъект.Родитель = Справочники.КлассификаторБанков.ПустаяСсылка();
		СтруктураДанных.Вставить("БанкОрганизации", БанкОрганизацииОбъект);
		СтруктураДанных.Вставить("БанковскийСчетОрганизации", БанковскийСчетОрганизации.ПолучитьОбъект());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
		БанкКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетКонтрагента, "Банк");
		БанкКонтрагентаОбъект = БанкКонтрагента.ПолучитьОбъект();
		БанкКонтрагентаОбъект.Родитель = Справочники.КлассификаторБанков.ПустаяСсылка();
		СтруктураДанных.Вставить("БанкКонтрагента", БанкКонтрагентаОбъект);
		СтруктураДанных.Вставить("БанковскийСчетКонтрагента", БанковскийСчетКонтрагента.ПолучитьОбъект());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСервера) Тогда
		СтруктураДанных.Вставить("АдресСервера", АдресСервера);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Логин) Тогда
		СтруктураДанных.Вставить("Логин", Логин);
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("json");
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ИмяВременногоФайла);
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, СтруктураДанных, НазначениеТипаXML.Явное);
	ЗаписьJSON.Закрыть();
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат АдресХранилища;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьТестовыеДанные(ДанныеФайла)
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла);
	ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("json");
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла);
	
	Попытка
		СтруктураДанных = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка чтения JSON. Неверный формат файла.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		УдалитьФайлы(ИмяВременногоФайла);
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда
		ЗаполнитьДанныеФормы(СтруктураДанных);
	Иначе
		ТекстСообщения = НСтр("ru = 'Ошибка чтения JSON. Неверные данные.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормы(СтруктураДанных)
	
	ЗаполнитьРеквизитФормы(СтруктураДанных, "Организация");
	ЗаполнитьРеквизитФормы(СтруктураДанных, "Контрагент");
	
	БанкОрганизации = Неопределено;
	Если СтруктураДанных.Свойство("БанкОрганизации", БанкОрганизации)
		И СтруктураДанных.Свойство("БанковскийСчетОрганизации") Тогда
		
		БанкИзКлассификатора = Справочники.КлассификаторБанков.НайтиПоКоду(БанкОрганизации.Код);
		Если ЗначениеЗаполнено(БанкИзКлассификатора) Тогда
			СтруктураДанных.БанковскийСчетОрганизации.Банк = БанкИзКлассификатора;
		Иначе
			Попытка
				БанкОрганизации.Записать();
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение поставляемых тестовых данных'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
		ЗаполнитьРеквизитФормы(СтруктураДанных, "БанковскийСчетОрганизации");
		
	КонецЕсли;
	
	БанкКонтрагента = Неопределено;
	Если СтруктураДанных.Свойство("БанкКонтрагента", БанкКонтрагента)
		И СтруктураДанных.Свойство("БанковскийСчетКонтрагента") Тогда
		
		БанкИзКлассификатора = Справочники.КлассификаторБанков.НайтиПоКоду(БанкКонтрагента.Код);
		Если ЗначениеЗаполнено(БанкИзКлассификатора) Тогда
			СтруктураДанных.БанковскийСчетКонтрагента.Банк = БанкИзКлассификатора;
		Иначе
			Попытка
				БанкКонтрагента.Записать();
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение поставляемых тестовых данных'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
		ЗаполнитьРеквизитФормы(СтруктураДанных, "БанковскийСчетКонтрагента");
		
	КонецЕсли;
	
	СтруктураДанных.Свойство("АдресСервера", АдресСервера);
	СтруктураДанных.Свойство("Логин", Логин);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитФормы(СтруктураДанных, Реквизит)
	
	ОбъектДанных = Неопределено;
	Если СтруктураДанных.Свойство(Реквизит, ОбъектДанных) Тогда
		Если НЕ ЗначениеЗаполнено(ОбъектДанных.Ссылка) Тогда
			ОбъектДанных.УстановитьНовыйКод();
		КонецЕсли;
		Попытка
			ОбъектДанных.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение поставляемых тестовых данных'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		ЭтотОбъект[Реквизит] = ОбъектДанных.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеПослеПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ВыбранноеИмяФайла);
		Если РасширениеФайла = "json" Тогда
			ЗагрузитьТестовыеДанные(Адрес);
		Иначе
			ТекстСообщения = НСтр("ru = 'Ошибка загрузки данных. Неверный формат файла. Ожидается JSON.'");
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
		КонецЕсли;
	 КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеПослеВыбораВДиалоге(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ПомещенныеФайлы) Тогда
		
		ЗагрузитьТестовыеДанные(ПомещенныеФайлы[0].Хранение);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоставляемыеДанныеДляТестирования()
	
	ЕстьОшибка = Ложь;
	СтруктураДанных = ПоставляемыеТестовыеДанные(ЕстьОшибка);
	Если ЗначениеЗаполнено(СтруктураДанных) Тогда
		ЗаполнитьДанныеФормы(СтруктураДанных);
	КонецЕсли;
	
	НастроитьОформлениеЭтаповТестирования();
	
	ДанныеЗагружены = НЕ ЕстьОшибка;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеДанныхДляТестирования()
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Организация"" не заполнено.'"), ,
			"Организация", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Счет организации"" не заполнено.'"), ,
			"БанковскийСчетОрганизации", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Контрагент"" не заполнено.'"), ,
			"Контрагент", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Счет контрагента"" не заполнено.'"), ,
			"БанковскийСчетКонтрагента", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресСервера) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Адрес сервера"" не заполнено.'"), ,
			"АдресСервера", , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Логин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Логин"" не заполнено.'"), ,
			"Логин", , Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

#КонецОбласти

#Область АутентификацияНаСервере

&НаКлиенте
Процедура ПолучитьИдентификаторСессииБазоваяАутентификация()
	
	Если НЕ ПроверитьЗаполнениеДанныхДляТестирования() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеSMSАвторизации = Неопределено;
	ДанныеАутентификации = Новый Структура("Логин, Пароль", Логин, Пароль);
	БазоваяВерсияФорматаАсинхронногоОбмена = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
	ИдентификаторСессии = ОбменСБанкамиСлужебныйВызовСервера.МаркерБанкаБазоваяАутентификация(АдресСервера,
		"0", ДанныеАутентификации, БазоваяВерсияФорматаАсинхронногоОбмена, ДанныеSMSАвторизации);
	
	ЕстьОшибка = Истина;
	Если ЗначениеЗаполнено(ДанныеSMSАвторизации) Тогда
		Элементы.Команда2.Доступность = Истина;
		ЕстьОшибка = Ложь;
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		Элементы.Команда2.Доступность = Ложь;
		ЕстьОшибка = Ложь;
		Если НомерТекущейКнопки = 1 Тогда
			НомерТекущейКнопки = 3;
			ЗафиксироватьВыполнениеКомандыНаСервере(ТекущийЭлемент.ИмяКоманды);
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьРезультатВыполненияКоманды(ТекущийЭлемент, ЕстьОшибка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводДанныхSMSАвторизации()
	
	Если НЕ ПроверитьЗаполнениеДанныхДляТестирования() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеSMSАвторизации) Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствуют данные SMS авторизации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	БазоваяВерсияФорматаАсинхронногоОбмена = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
	
	Оповещение = Новый ОписаниеОповещения("АутентификацияНаСервереБанкаЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПараметрыФормы.Вставить("Телефон", ДанныеSMSАвторизации.МаскаТелефона);
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияИдентификатораСессии", Оповещение);
	ДополнительныеПараметры.Вставить("НеподтвержденныйИдентификаторСессии", ИдентификаторСессии);
	ДополнительныеПараметры.Вставить("АдресСервера", АдресСервера);
	ДополнительныеПараметры.Вставить("ИдентификаторОрганизации", "0");
	ДополнительныеПараметры.Вставить("ВерсияAPI", БазоваяВерсияФорматаАсинхронногоОбмена);
	ОО = Новый ОписаниеОповещения("ОтправитьОдноразовыйПарольПослеВводаИзSMS", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросОдноразовогоПароля", ПараметрыФормы, , , , , ОО);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОдноразовыйПарольПослеВводаИзSMS(ОдноразовыйПароль, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ОдноразовыйПароль) Тогда
		ИдентификаторСессии = ОбменСБанкамиСлужебныйВызовСервера.МаркерБанкаПоSMS(ДополнительныеПараметры.АдресСервера,
			ДополнительныеПараметры.ИдентификаторОрганизации, ДополнительныеПараметры.НеподтвержденныйИдентификаторСессии,
			ОдноразовыйПароль, ДополнительныеПараметры.ВерсияAPI);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеПослеПолученияИдентификатораСессии, ИдентификаторСессии);
	
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияНаСервереБанкаЗавершение(ИдентификаторСессии, ДополнительныеПараметры) Экспорт
	
	ЕстьОшибка = НЕ ЗначениеЗаполнено(ИдентификаторСессии);
	ОбработатьРезультатВыполненияКоманды(ТекущийЭлемент, ЕстьОшибка);
	Элементы.Команда2.Доступность = ЕстьОшибка;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеНастроекОбмена

&НаКлиенте
Процедура ПолучитьНастройкиОбменаССервераБанка();
	
	Если НЕ ПроверитьЗаполнениеДанныхДляТестирования() Тогда
		Возврат;
	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("ПолучитьНастройкиОбменаПослеПолученияИдентификатораСессии", ЭтотОбъект);
	ПолучитьМаркерБанкаПоЛогинуИПаролю(Обработчик, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНастройкиОбменаПослеПолученияИдентификатораСессии(ИдентификаторСессии, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЕстьОшибка = Ложь;
	ЗагрузитьНастройкиОбменаНаСервере(ИдентификаторСессии, ЕстьОшибка);
	ОбработатьРезультатВыполненияКоманды(ТекущийЭлемент, ЕстьОшибка);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиОбменаНаСервере(ИдентификаторСессии, ЕстьОшибка)
	
	ПараметрыСчета = ЗначенияРеквизитовОбъекта(БанковскийСчетОрганизации, "Банк, НомерСчета");
	ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
	
	ПараметрыПолученияНастроек = Новый Структура;
	ПараметрыПолученияНастроек.Вставить("АдресСервера", АдресСервера);
	ПараметрыПолученияНастроек.Вставить("Организация", Организация);
	ПараметрыПолученияНастроек.Вставить("Банк", ПараметрыСчета.Банк);
	ПараметрыПолученияНастроек.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПараметрыПолученияНастроек.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыПолученияНастроек.Вставить("ПробнаяОперация", Ложь);
	ПараметрыПолученияНастроек.Вставить("НомерБанковскогоСчета", ПараметрыСчета.НомерСчета);
	ПараметрыПолученияНастроек.Вставить("ИдентификаторОрганизации", "0");
	ПараметрыПолученияНастроек.Вставить("ВерсияФормата", ВерсияФормата);
	
	АдресФайлаНастроекОбмена = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	Попытка
		Справочники.НастройкиОбменСБанками.ПолучитьНастройкиОбменаССервераБанка(ПараметрыПолученияНастроек, АдресФайлаНастроекОбмена);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЕстьОшибка = Истина;
		Возврат;
	КонецПопытки;
	
	ДанныеСертификатов = Неопределено;
	
	Попытка
		НастройкаОбмена = ОбменСБанкамиСлужебный.СоздатьНастройкуОбменаИзФайла(
			АдресФайлаНастроекОбмена, Организация, Ложь, Ложь, ДанныеСертификатов, Ложь);
	Исключение
		ЕстьОшибка = Истина;
		Возврат;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(НастройкаОбмена) Тогда
		ЕстьОшибка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаПлатежногоДокумента

&НаКлиенте
Процедура ОтправитьПлатежныйДокумент()
	
	Если НЕ ПроверитьЗаполнениеДанныхДляТестирования() Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОтправитьПлатежныйДокументПослеПолученияИдентификатораСессии", ЭтотОбъект);
	ПолучитьМаркерБанкаПоЛогинуИПаролю(Обработчик);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПлатежныйДокументПослеПолученияИдентификатораСессии(ИдентификаторСессии, ДополнительныеПараметры) Экспорт
	
	ЕстьОшибка = Ложь;
	ОтправитьПлатежныйДокументНаСервере(ИдентификаторСессии, ЕстьОшибка);
	ОбработатьРезультатВыполненияКоманды(ТекущийЭлемент, ЕстьОшибка);
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПлатежныйДокументНаСервере(ИдентификаторСессии, ЕстьОшибка)
		
	СсылкаНаОбъект = СоздатьПлатежныйДокумент();
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	НастройкиОбменаЭД = Новый Структура;
	НастройкиОбменаЭД.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение);
	НастройкиОбменаЭД.Вставить("НастройкаОбмена", НастройкаОбмена);
	НастройкиОбменаЭД.Вставить("ПрограммаБанка", Перечисления.ПрограммыБанка.АсинхронныйОбмен);
	НастройкиОбменаЭД.Вставить("Подписывать", Ложь);
	НастройкиОбменаЭД.Вставить("Организация", Организация);
	
	ПараметрыОбмена = Новый Соответствие;
	ПараметрыОбмена.Вставить(СсылкаНаОбъект, НастройкиОбменаЭД);
	
	МассивСообщенийОбмена = ОбменСБанкамиСлужебный.СформироватьСообщенияОбмена(МассивОбъектов, ПараметрыОбмена);
	
	НовыйПакет = Неопределено;
	ОбменСБанкамиСлужебный.СоздатьПакетОбменСБанками(НастройкаОбмена, МассивСообщенийОбмена, НовыйПакет);
	
	ОбменСБанкамиСлужебный.СоздатьЭДПакетаAsync(НовыйПакет, ЕстьОшибка);
	
	МассивПакетов = Новый Массив;
	МассивПакетов.Добавить(НовыйПакет);
	
	ПараметрыАвторизации = Новый Структура("ИдентификаторСессии", ИдентификаторСессии);
	
	СоотвНастроекОбменаИПараметровСертификатов = Новый Соответствие;
	СоотвНастроекОбменаИПараметровСертификатов.Вставить(НастройкаОбмена, ПараметрыАвторизации);
	
	ТекстОшибки = "";
	
	ОбменСБанкамиСлужебный.ОтправкаПакетовЭДО(МассивПакетов, СоотвНастроекОбменаИПараметровСертификатов, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЕстьОшибка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьПлатежныйДокумент()
	
	ДокументОбъект = Документы._ДемоПлатежныйДокумент.СоздатьДокумент();
	
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.Организация = Организация;
	ДокументОбъект.СчетОрганизации = БанковскийСчетОрганизации;
	ДокументОбъект.Контрагент = Контрагент;
	ДокументОбъект.СчетКонтрагента = БанковскийСчетКонтрагента;
	ДокументОбъект.ВидПлатежа = "Электронно";
	ДокументОбъект.СуммаДокумента = 1000;
	ДокументОбъект.НазначениеПлатежа = "НДС 12%";
	ДокументОбъект.ТипПлатежногоДокумента = Перечисления._ДемоТипыПлатежныхДокументов.ПлатежноеПоручение;
	ДокументОбъект.ОчередностьПлатежа = 5;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

#КонецОбласти

#Область РезультатОтправкиПлатежногоДокумента

&НаКлиенте
Процедура РезультатОтправкиПлатежногоДокумента()
	
	Если НЕ ПроверитьЗаполнениеДанныхДляТестирования() Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("РезультатОтправкиПлатежногоДокументаПослеПолученияИдентификатораСессии", ЭтотОбъект);	
	ПолучитьМаркерБанкаПоЛогинуИПаролю(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтправкиПлатежногоДокументаПослеПолученияИдентификатораСессии(ИдентификаторСессии, ДополнительныеПараметры) Экспорт
	
	ЕстьОшибка = Ложь;
	РезультатОтправкиПлатежногоДокументаНаСервере(ИдентификаторСессии, ЕстьОшибка);
	ОбработатьРезультатВыполненияКоманды(ТекущийЭлемент, ЕстьОшибка);
	
КонецПроцедуры

&НаСервере
Процедура РезультатОтправкиПлатежногоДокументаНаСервере(ИдентификаторСессии, ЕстьОшибка)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	СтруктураПараметров.Вставить("НастройкаОбмена", НастройкаОбмена);
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено);
	
	Попытка
		ОбменСБанкамиСлужебный.ПолучитьНовыеДокументыИзБанка(СтруктураПараметров, АдресРезультата);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЕстьОшибка = Истина;
		Возврат;
	КонецПопытки;
	
	ДанныеВозврата = ПолучитьИзВременногоХранилища(АдресРезультата);

	Если ДанныеВозврата.КолПолученныхПакетов = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Нет новых пакетов для получения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЕстьОшибка = Истина;
		Возврат;
	КонецЕсли;
	
	ДокументСсылка = ТекущийПлатежныйДокумент();
	
	СтатусДокумента = ДанныеВозврата.ПараметрОповещения.Получить(ДокументСсылка);
	
	Если СтатусДокумента = Неопределено
		ИЛИ СтатусДокумента <> Перечисления.СостоянияОбменСБанками.ОжидаетсяИсполнение Тогда
		ТекстОшибки = НСтр("ru = 'Не выполнено условие: Код статуса платежного документа ""01""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЕстьОшибка = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗапросСостоянияЭД

&НаКлиенте
Процедура ОтправитьЗапросСостоянияЭД()
	
	Если НЕ ПроверитьЗаполнениеДанныхДляТестирования() Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОтправитьЗапросСостоянияЭДПослеПолученияИдентификатораСессии", ЭтотОбъект);	
	ПолучитьМаркерБанкаПоЛогинуИПаролю(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросСостоянияЭДПослеПолученияИдентификатораСессии(ИдентификаторСессии, ДополнительныеПараметры) Экспорт
	
	ЕстьОшибка = Ложь;
	ОтправитьЗапросСостоянияЭДНаСервере(ИдентификаторСессии, ЕстьОшибка);
	ОбработатьРезультатВыполненияКоманды(ТекущийЭлемент, ЕстьОшибка);
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьЗапросСостоянияЭДНаСервере(ИдентификаторСессии, ЕстьОшибка)
	
	СообщениеОбменаПлатежныйДокумент = СообщениеОбменаПлатежныйДокумент();
	
	ЗапросСостоянияЭД = Неопределено;
	СформироватьЗапросСостоянияЭД(НастройкаОбмена, СообщениеОбменаПлатежныйДокумент, Ложь, ЗапросСостоянияЭД);
	
	МассивСообщенийОбмена = Новый Массив;
	МассивСообщенийОбмена.Добавить(ЗапросСостоянияЭД);
	
	НовыйПакет = Неопределено;
	ОбменСБанкамиСлужебный.СоздатьПакетОбменСБанками(НастройкаОбмена, МассивСообщенийОбмена, НовыйПакет);
	
	ОбменСБанкамиСлужебный.СоздатьЭДПакетаAsync(НовыйПакет, ЕстьОшибка);
	
	МассивПакетов = Новый Массив;
	МассивПакетов.Добавить(НовыйПакет);
	
	ПараметрыАвторизации = Новый Структура("ИдентификаторСессии", ИдентификаторСессии);
	
	СоотвНастроекОбменаИПараметровСертификатов = Новый Соответствие;
	СоотвНастроекОбменаИПараметровСертификатов.Вставить(НастройкаОбмена, ПараметрыАвторизации);
	
	ТекстОшибки = "";
	
	ОбменСБанкамиСлужебный.ОтправкаПакетовЭДО(МассивПакетов, СоотвНастроекОбменаИПараметровСертификатов, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ТекстОшибки);
		ЕстьОшибка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьЗапросСостоянияЭД(Знач НастройкаОбмена, Знач СообщениеОбменаПлатежныйДокумент, Знач ТребуетсяПодпись, ЗапросСостоянияЭД, Знач МассивОтпечатковСертификатов = Неопределено, МассивСертификатов = Неопределено)
	
	Если ТребуетсяПодпись Тогда
		// Определение сертификатов подписи
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Сертификаты.СертификатЭП КАК Сертификат,
		|	Сертификаты.СертификатЭП.Отпечаток КАК Отпечаток
		|ИЗ
		|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК Сертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭД
		|		ПО (ВидыЭД.СертификатЭП = Сертификаты.СертификатЭП)
		|ГДЕ
		|	НЕ Сертификаты.СертификатЭП.ПометкаУдаления
		|	И НЕ Сертификаты.СертификатЭП.Отозван
		|	И ВидыЭД.ВидЭД = &ВидЭД
		|	И &ПроверкаПользователя
		|	И ВидыЭД.Использовать
		|	И Сертификаты.Ссылка = &НастройкаОбмена";
		
		Запрос.УстановитьПараметр("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД);
		Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
		
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
		Иначе
			Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
			Запрос.УстановитьПараметр("Пользователь",  Пользователи.АвторизованныйПользователь());
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
				"Сертификаты.СертификатЭП.Пользователь В (&Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)");
		КонецЕсли;
			
		ТаблицаСертификатов = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаСертификатов.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не найден подходящий сертификат подписи для документа Запрос состояния электронного документа.
										|Проверьте настройки обмена через сервис 1С:ДиректБанк.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ПрограммаБанка");
		
		МассивСертификатов = Новый Массив;
		Если ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда 
			Для Каждого Строка Из ТаблицаСертификатов Цикл
				МассивСертификатов.Добавить(Строка.Сертификат);
			КонецЦикла;
		ИначеЕсли МассивОтпечатковСертификатов <> Неопределено Тогда
			Для Каждого Строка Из ТаблицаСертификатов Цикл
				Если МассивОтпечатковСертификатов.Найти(Строка.Отпечаток) <> Неопределено Тогда
					МассивСертификатов.Добавить(Строка.Сертификат);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если МассивСертификатов.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'На компьютере не установлен ни один сертификат, указанный в настройке обмена.
										|Установите сертификаты или обратитесь к администратору.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Формирование электронного документа
	ТекстОшибки = "";
	ВерсияПрограммы = ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка();
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "Организация, ИдентификаторОрганизации, Банк, Недействительна, ВерсияФормата");
	Если РеквизитыНастройкиОбмена.Недействительна Тогда
		ШаблонСообщения = НСтр("ru = 'Настройка обмена с банком %1 недействительна'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, НастройкаОбмена);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыНастройкиОбмена.ВерсияФормата) Тогда
		ВерсияФормата = РеквизитыНастройкиОбмена.ВерсияФормата;
	Иначе
		ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);
	
	Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
	
	ИдентификаторОрганизации = РеквизитыНастройкиОбмена.ИдентификаторОрганизации;
	
	ОтправительНаименование = ЭлектронноеВзаимодействиеСлужебный.СокращенноеНаименованиеОрганизации(
		РеквизитыНастройкиОбмена.Организация);
	РеквизитыОрганизации = Неопределено; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(
		РеквизитыНастройкиОбмена.Организация, РеквизитыОрганизации);
	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыНастройкиОбмена.Банк, "Код, Наименование");
	
	ИдентификаторПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбменаПлатежныйДокумент, "Идентификатор");
	Попытка
			
		УникальныйИдЭД = Новый УникальныйИдентификатор;

		ЗапросОСостоянииЭД = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "StatusRequest", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросОСостоянииЭД, "id", Строка(УникальныйИдЭД), Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросОСостоянииЭД, "ExtID", ИдентификаторПлатежа, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросОСостоянииЭД, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(
			ЗапросОСостоянииЭД, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросОСостоянииЭД, "userAgent", ВерсияПрограммы, , ТекстОшибки);
		Отправитель = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "CustomerPartyType", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(
			Отправитель, "id", РеквизитыНастройкиОбмена.ИдентификаторОрганизации, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "name", ОтправительНаименование, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "inn", РеквизитыОрганизации.ИНН, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "kpp", РеквизитыОрганизации.КПП, , ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросОСостоянииЭД, "Sender", Отправитель, Истина, ТекстОшибки);
		
		Получатель = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "BankPartyType", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Получатель, "bic", РеквизитыБанка.Код, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Получатель, "name", РеквизитыБанка.Наименование, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросОСостоянииЭД, "Recipient", Получатель, Истина, ТекстОшибки);
		ЗапросОСостоянииЭД.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстСообщения = ТекстОшибки;
			Операция = НСтр("ru = 'Формирование электронного документа'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				Операция, ТекстОшибки, ТекстСообщения, 1, СообщениеОбменаПлатежныйДокумент);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбменСБанкамиСлужебный.ДвоичныеДанныеИзXDTO(Фабрика, ЗапросОСостоянииЭД, Ложь);
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Формирование электронного документа'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, "ОбменСБанками", СообщениеОбменаПлатежныйДокумент);
		Возврат;
	КонецПопытки;
	
	
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	НазваниеЭД = НСтр("ru = 'Запрос состояния электронного документа'");
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ПредставлениеДокумента", НазваниеЭД);
	Реквизиты.Вставить("Расширение", "xml");
	Реквизиты.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	Реквизиты.Вставить("Идентификатор", Строка(УникальныйИдЭД));
	Реквизиты.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	Реквизиты.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД);
	Реквизиты.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	Реквизиты.Вставить("Организация", РеквизитыНастройкиОбмена.Организация);
	Реквизиты.Вставить("Банк", РеквизитыНастройкиОбмена.Банк);
	Реквизиты.Вставить("СообщениеРодитель", СообщениеОбменаПлатежныйДокумент);
	Реквизиты.Вставить("НастройкаОбмена", НастройкаОбмена);
	
	ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(Реквизиты, ЗапросСостоянияЭД);

	
КонецПроцедуры

#КонецОбласти

#Область РезультатЗапросаСостояния

&НаКлиенте
Процедура РезультатЗапросаСостояния()
	
	Если НЕ ПроверитьЗаполнениеДанныхДляТестирования() Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("РезультатЗапросаСостоянияПослеПолученияИдентификатораСессии", ЭтотОбъект);	
	ПолучитьМаркерБанкаПоЛогинуИПаролю(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатЗапросаСостоянияПослеПолученияИдентификатораСессии(ИдентификаторСессии, ДополнительныеПараметры) Экспорт
	
	ЕстьОшибка = Ложь;
	РезультатЗапросаСостоянияНаСервере(ИдентификаторСессии, ЕстьОшибка);
	ОбработатьРезультатВыполненияКоманды(ТекущийЭлемент, ЕстьОшибка);
	
КонецПроцедуры

&НаСервере
Процедура РезультатЗапросаСостоянияНаСервере(ИдентификаторСессии, ЕстьОшибка)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	СтруктураПараметров.Вставить("НастройкаОбмена", НастройкаОбмена);

	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено);
	
	Попытка
		ОбменСБанкамиСлужебный.ПолучитьНовыеДокументыИзБанка(СтруктураПараметров, АдресРезультата);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЕстьОшибка = Истина;
		Возврат;
	КонецПопытки;
	
	ДанныеВозврата = ПолучитьИзВременногоХранилища(АдресРезультата);

	Если ДанныеВозврата.КолПолученныхПакетов = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Нет новых пакетов для получения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЕстьОшибка = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверка, что был получен ответ на запрос о состоянии ЭД (поиск по StatusDocNotice.ExtIDStatusRequest).
	СтатусЗапроса = СтатусЗапросаОСостоянииЭД();
	Если СтатусЗапроса <> Перечисления.СтатусыОбменСБанками.ПолученоИзвещение
		И СтатусЗапроса <> Перечисления.СтатусыОбменСБанками.Принят Тогда
		ТекстОшибки = НСтр("ru = 'Не выполнено условие: StatusDocNotice.ExtIDStatusRequest = PayDocRu.ID'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЕстьОшибка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатусЗапросаОСостоянииЭД()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	_ДемоПлатежныйДокумент.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТПлатежныйДокумент
		|ИЗ
		|	Документ._ДемоПлатежныйДокумент КАК _ДемоПлатежныйДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	_ДемоПлатежныйДокумент.МоментВремени УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СообщениеОбменСБанками.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлатежныйДокумент КАК ВТПлатежныйДокумент
		|		ПО СостоянияОбменСБанками.СсылкаНаОбъект = ВТПлатежныйДокумент.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
		|		ПО (СостоянияОбменСБанками.СообщениеОбмена = СообщениеОбменСБанками.СообщениеРодитель)
		|			И (СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД))
		|
		|УПОРЯДОЧИТЬ ПО
		|	СообщениеОбменСБанками.МоментВремени УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Статус;
	
КонецФункции

#КонецОбласти

#Область ПолучениеВыписки

&НаКлиенте
Процедура ЗапросВыпискиБанка()
	
	Если НЕ ПроверитьЗаполнениеДанныхДляТестирования() Тогда
		Возврат;
	КонецЕсли;
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапросВыпискиБанкаПослеВыбораПериода", ЭтотОбъект);
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Новый СтандартныйПериод(НачалоДня(ДатаСеанса), КонецДня(ДатаСеанса));
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросВыпискиБанкаПослеВыбораПериода(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ЗапросВыпискиБанкаПослеПолученияИдентификатораСессии", ЭтотОбъект, РезультатВыбора);	
	ПолучитьМаркерБанкаПоЛогинуИПаролю(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросВыпискиБанкаПослеПолученияИдентификатораСессии(ИдентификаторСессии, ПериодЗапроса) Экспорт
	
	ЕстьОшибка = Ложь;
	ЗапросВыпискиБанкаНаСервере(ИдентификаторСессии, ПериодЗапроса, ЕстьОшибка);
	ОбработатьРезультатВыполненияКоманды(ТекущийЭлемент, ЕстьОшибка);
	
КонецПроцедуры

&НаСервере
Процедура ЗапросВыпискиБанкаНаСервере(ИдентификаторСессии, ПериодЗапроса, ЕстьОшибка)
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
	НомерСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетОрганизации, "НомерСчета"); 
	
	МассивБанковскихСчетов = Новый Массив;
	МассивБанковскихСчетов.Добавить(НомерСчета);

	МассивЗапросов = МассивЗапросовВыпискиAsync(НастройкаОбмена, ИдентификаторОрганизации,
		ПериодЗапроса.ДатаНачала, ПериодЗапроса.ДатаОкончания, МассивБанковскихСчетов);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	СтруктураПараметров.Вставить("МассивСообщенийОбмена", МассивЗапросов);
	СтруктураПараметров.Вставить("НастройкаОбмена", НастройкаОбмена);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ЗапроситьВыпискуБанкаАсинхронно(СтруктураПараметров, АдресХранилища);
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ЕстьОшибка = СтруктураВозврата.ЕстьОшибка;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивЗапросовВыпискиAsync(НастройкаОбмена, ИдентификаторОрганизации, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов)
	
	МассивЗапросов = Новый Массив;
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "Организация, Банк, ИдентификаторОрганизации, ИспользуетсяКриптография, ВерсияФормата");
	
	ОтправительНаименование = ЭлектронноеВзаимодействиеСлужебный.СокращенноеНаименованиеОрганизации(
		РеквизитыНастройкиОбмена.Организация);
	РеквизитыОрганизации = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(
		РеквизитыНастройкиОбмена.Организация, РеквизитыОрганизации);
	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыНастройкиОбмена.Банк, "Код, Наименование");

	Если ЗначениеЗаполнено(РеквизитыНастройкиОбмена.ВерсияФормата) Тогда
		ВерсияФормата = РеквизитыНастройкиОбмена.ВерсияФормата;
	Иначе
		ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);
	Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
	
	Для Каждого НомерСчета Из МассивБанковскихСчетов Цикл
	
		ТекстОшибки = "";
		Попытка
			
			Идентификатор = Новый УникальныйИдентификатор;
			
			ЭД = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "StatementRequest", ПространствоИмен);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "id", Строка(Идентификатор), Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);

			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "userAgent", 
				ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка(), , ТекстОшибки);
			
			Отправитель = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "CustomerPartyType", ПространствоИмен);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "id", ИдентификаторОрганизации, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "name", ОтправительНаименование, , ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "inn", РеквизитыОрганизации.ИНН, , ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "kpp", РеквизитыОрганизации.КПП, , ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "Sender", Отправитель, Истина, ТекстОшибки);
			
			Получатель = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "BankPartyType", ПространствоИмен);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Получатель, "bic", РеквизитыБанка.Код, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Получатель, "name", РеквизитыБанка.Наименование, , ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "Recipient", Получатель, Истина, ТекстОшибки);
			
			ДанныеЗапроса = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "StatementRequest.Data", ПространствоИмен);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "StatementType", "0", Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "DateFrom", ДатаНачала, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "DateTo", ДатаОкончания, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "Account", НомерСчета, Истина, ТекстОшибки);
			
			БанкСчета = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "BankType", ПространствоИмен);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(БанкСчета, "BIC", РеквизитыБанка.Код, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(БанкСчета, "Name", РеквизитыБанка.Наименование, , ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "Bank", БанкСчета, Истина, ТекстОшибки);
			
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "Data", ДанныеЗапроса, Истина, ТекстОшибки);
			
			ЭД.Проверить();
		
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ФайлСформирован = Ложь;
			Иначе
				ДвоичныеДанные = ОбменСБанкамиСлужебный.ДвоичныеДанныеИзXDTO(Фабрика, ЭД, Ложь);
				ФайлСформирован = Истина;
			КонецЕсли;

		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Операция = НСтр("ru = 'Формирование ЭД'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, "ОбменСБанками", НастройкаОбмена);
			ФайлСформирован = Ложь;
		КонецПопытки;
		
		Если Не ФайлСформирован Тогда
			Продолжить;
		КонецЕсли;
		
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);

		Шаблон = НСтр("ru = 'Запрос выписки с %1 по %2'");
	
		ИмяФайла = СтрШаблон(
			Шаблон, Формат(ДатаНачала, "ДЛФ=D"), Формат(ДатаОкончания, "ДЛФ=D"));
			
		СтруктураРеквизитов = Новый Структура;
		
		Если РеквизитыНастройкиОбмена.ИспользуетсяКриптография Тогда
			СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
		Иначе
			СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
		КонецЕсли;
		
		СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки);
		СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
		СтруктураРеквизитов.Вставить("Организация", РеквизитыНастройкиОбмена.Организация);
		СтруктураРеквизитов.Вставить("Банк", РеквизитыНастройкиОбмена.Банк);
		СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
		СтруктураРеквизитов.Вставить("ПредставлениеДокумента", ИмяФайла);
		СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
		СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);
		СтруктураРеквизитов.Вставить("Идентификатор", Идентификатор);
		СообщениеЗапрос = Неопределено;
		ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеЗапрос);

		МассивЗапросов.Добавить(СообщениеЗапрос);
		
	КонецЦикла;
	
	Возврат МассивЗапросов;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗапроситьВыпискуБанкаАсинхронно(СтруктураПараметров, АдресХранилища)
	
	МассивСообщенийОбмена = СтруктураПараметров.МассивСообщенийОбмена;
	ТекстСообщения = "";
	
	НовыйПакет = Неопределено;
	ОбменСБанкамиСлужебный.СоздатьПакетОбменСБанками(СтруктураПараметров.НастройкаОбмена, МассивСообщенийОбмена, НовыйПакет);
	
	Если НЕ ЗначениеЗаполнено(НовыйПакет) Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ЗапросОтправлен", Ложь);
		СтруктураВозврата.Вставить("ЕстьОшибка", Истина);
		Возврат;
	КонецЕсли;
	
	ЕстьОшибка = Ложь;
	ОбменСБанкамиСлужебный.СоздатьЭДПакетаAsync(НовыйПакет, ЕстьОшибка);
	
	Если ЕстьОшибка Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ЗапросОтправлен", Ложь);
		СтруктураВозврата.Вставить("ЕстьОшибка", Истина);
		Возврат;
	КонецЕсли;
	
	МассивПакетов = Новый Массив;
	МассивПакетов.Добавить(НовыйПакет);
	СоотвНастроекОбменаИПараметровСертификатов = Новый Соответствие;
	СоотвНастроекОбменаИПараметровСертификатов.Вставить(СтруктураПараметров.НастройкаОбмена, СтруктураПараметров);
	Результат = ОбменСБанкамиСлужебный.ОтправкаПакетовЭДО(
		МассивПакетов, СоотвНастроекОбменаИПараметровСертификатов, ТекстСообщения);
							
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЗапросОтправлен", Результат.КоличествоОтправлено > 0);
	СтруктураВозврата.Вставить("ЕстьОшибка", ЗначениеЗаполнено(ТекстСообщения));
	СтруктураВозврата.Вставить("ВыпискаБанка", Неопределено);
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область РезультатЗапросаВыписки

&НаКлиенте
Процедура РезультатЗапросаВыписки()
	
	Если НЕ ПроверитьЗаполнениеДанныхДляТестирования() Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("РезультатЗапросаВыпискиПослеПолученияИдентификатораСессии", ЭтотОбъект);	
	ПолучитьМаркерБанкаПоЛогинуИПаролю(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатЗапросаВыпискиПослеПолученияИдентификатораСессии(ИдентификаторСессии, ДополнительныеПараметры) Экспорт
	
	ЕстьОшибка = Ложь;
	РезультатЗапросаВыпискиНаСервере(ИдентификаторСессии, ЕстьОшибка);
	ОбработатьРезультатВыполненияКоманды(ТекущийЭлемент, ЕстьОшибка);
	
КонецПроцедуры

&НаСервере
Процедура РезультатЗапросаВыпискиНаСервере(ИдентификаторСессии, ЕстьОшибка)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	СтруктураПараметров.Вставить("НастройкаОбмена", НастройкаОбмена);
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено);
	Попытка
		ОбменСБанкамиСлужебный.ПолучитьНовыеДокументыИзБанка(СтруктураПараметров, АдресРезультата);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЕстьОшибка = Истина;
		Возврат;
	КонецПопытки;
	
	ДанныеВозврата = ПолучитьИзВременногоХранилища(АдресРезультата);

	Если ДанныеВозврата.КолПолученныхПакетов = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Нет новых пакетов для получения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЕстьОшибка = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверка, что пришла выписка по платежному документу.
	// Поиск сообщения обмена с видом ПлатежноеПоручение/ПлатежноеТребование по Идентификатор = Operation.ExtID.
	СообщениеОбмена = СообщениеОбменаПлатежныйДокумент();
	СтатусЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Статус");
	Если СтатусЗапроса <> Перечисления.СтатусыОбменСБанками.Подтвержден Тогда
		ТекстОшибки = НСтр("ru = 'Платеж не исполнен. Возможные причины:
								|- Выписка не содержит операций
								|- Не выполнено условие: Document.extID = PayDocRu.ID'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЕстьОшибка = Истина;
	КонецЕсли;
	
	// Проверка, что был получен ответ на запрос выписки.
	// Поиск сообщения обмена с видом ЗапросВыписки по Идентификатор = Statement.ExtIDStatementRequest.
	СтатусЗапроса = СтатусЗапросаВыписки(НастройкаОбмена);
	Если СтатусЗапроса <> Перечисления.СтатусыОбменСБанками.Обработан Тогда
		ТекстОшибки = НСтр("ru = 'Запрос выписке не перешел в конечный статус. Возможные причины:
							|Не получено Извещение о состоянии по статусом 02 (Исполнен)
							|Не выполнено условие: Statement.ExtIDStatementRequest = StatementRequest.ID'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЕстьОшибка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатусЗапросаВыписки(НастройкаОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СообщениеОбменСБанками.Статус КАК Статус
		|ИЗ
		|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
		|ГДЕ
		|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
		|	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ЗапросВыписки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СообщениеОбменСБанками.МоментВремени УБЫВ";
	
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Статус;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПолучитьМаркерБанкаПоЛогинуИПаролю(Обработчик, ЗапросНастроек = Ложь)

	Если ЗапросНастроек Тогда
		ИдентификаторОрганизации = "0";
	ИначеЕсли НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
		ТекстСообщения = НСтр("ru = 'Не найдена действующая настройка обмена с банком.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	Иначе
		РеквизитыНастройкиОбмена = ЗначенияРеквизитовОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
		ИдентификаторОрганизации = РеквизитыНастройкиОбмена.ИдентификаторОрганизации;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьПолучениеИдентификатораСессииБанка", ЭтотОбъект, Обработчик);
	
	Если АутентификацияПередЗапросом Тогда
		ДанныеАутентификации = Новый Структура("Логин, Пароль", Логин, Пароль);
		БазоваяВерсияФорматаАсинхронногоОбмена = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
		ОбменСБанкамиСлужебныйКлиент.ПолучитьМаркерБанкаПоЛогинуИПаролю(Оповещение, АдресСервера, ИдентификаторОрганизации,
			ДанныеАутентификации, БазоваяВерсияФорматаАсинхронногоОбмена, НастройкаОбмена);
	Иначе
		ПроверитьПолучениеИдентификатораСессииБанка(ИдентификаторСессии, Обработчик);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПолучениеИдентификатораСессииБанка(ИдентификаторСессии, Обработчик) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		ТекстСообщения = НСтр("ru = 'Требуется повторная аутентификация на сервере банка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Обработчик, ИдентификаторСессии);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкаОбмена(Организация, БанковскийСчет)
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(БанковскийСчет) Тогда
		Банк = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Банк");
		Возврат ОбменСБанками.НастройкаОбмена(Организация, Банк);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВыполненияКоманды(Элемент, ЕстьОшибка = Ложь)
	
	ТекстОповещения = Элемент.Родитель.Заголовок;
	
	Если ЕстьОшибка Тогда
		ШаблонПояснения = НСтр("ru = 'Команда %1 не выполнена.'");
		ТекстПояснения  = СтрШаблон(ШаблонПояснения, Элемент.ИмяКоманды);
		ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, БиблиотекаКартинок.Ошибка32);
		Возврат;
	КонецЕсли;
	
	ШаблонПояснения = НСтр("ru = 'Команда %1 выполнена успешно.'");
	ТекстПояснения  = СтрШаблон(ШаблонПояснения, Элемент.ИмяКоманды);
	ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, БиблиотекаКартинок.Успешно32);
	ИмяКнопки = Элемент.Имя; 
	НомерСледующейКнопки = Число(Прав(ИмяКнопки, СтрДлина(ИмяКнопки) - 7)) + 1;
	
	Если НомерСледующейКнопки > НомерТекущейКнопки Тогда
		НомерТекущейКнопки = НомерСледующейКнопки;
		ЗафиксироватьВыполнениеКомандыНаСервере(Элемент.ИмяКоманды);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьВыполнениеКомандыНаСервере(ИмяКоманды)
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'DirectBank'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,,
		ИмяКоманды);
	
	НастроитьОформлениеЭтаповТестирования();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОформлениеЭтаповТестирования()
	
	ЭтапыТестирования = Элементы.СтраницаЭтапыТестирования.ПодчиненныеЭлементы;
	
	НомерТекущейКнопки = Макс(НомерТекущейКнопки, 1);
	
	ТекущаяКнопка = Элементы.Найти("Команда" + НомерТекущейКнопки);
	Если ТекущаяКнопка = Неопределено Тогда
		ИндексЭтапа  = ЭтапыТестирования.Количество();
		Элементы.Команда1.КнопкаПоУмолчанию = Истина;
		Элементы.Команда1.КнопкаПоУмолчанию = Ложь;
	Иначе
		ГруппаКнопки = ТекущаяКнопка.Родитель;
		ИндексЭтапа  = ГруппаКнопки.Родитель.ПодчиненныеЭлементы.Индекс(ГруппаКнопки);
	КонецЕсли;
	
	Для Счетчик = 0 По ЭтапыТестирования.Количество() - 1 Цикл 
		Этап = ЭтапыТестирования[Счетчик];
		Если Счетчик < ИндексЭтапа Тогда
			Этап.Доступность = Истина;
			Этап.ЦветФона = WebЦвета.НейтральноЗеленый;
		ИначеЕсли Счетчик = ИндексЭтапа Тогда
			Этап.Доступность = Истина;
			Этап.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
			ДоступностьЭлемента = Истина;
			Для Каждого ЭлементГруппы Из Этап.ПодчиненныеЭлементы Цикл
				Если ЭлементГруппы = ТекущаяКнопка Тогда
					ЭлементГруппы.Доступность = Истина;
					ЭлементГруппы.КнопкаПоУмолчанию = Истина;
					ДоступностьЭлемента = Ложь;
				Иначе
					ЭлементГруппы.Доступность = ДоступностьЭлемента;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Этап.Доступность = Ложь;
			Этап.ЦветФона = ЦветаСтиля.ИтогиФонГруппы;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПустойОбработчик(Результат, ДополнительныеПараметры) Экспорт
	
	// Действий не требуется.
	Возврат;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, Реквизиты)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, Реквизиты);
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекущийПлатежныйДокумент()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	_ДемоПлатежныйДокумент.Ссылка КАК Ссылка
		|ИЗ
		|	Документ._ДемоПлатежныйДокумент КАК _ДемоПлатежныйДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	_ДемоПлатежныйДокумент.МоментВремени УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Документы._ДемоПлатежныйДокумент.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщениеОбменаПлатежныйДокумент()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	_ДемоПлатежныйДокумент.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТПлатежныйДокумент
		|ИЗ
		|	Документ._ДемоПлатежныйДокумент КАК _ДемоПлатежныйДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	_ДемоПлатежныйДокумент.МоментВремени УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвязанныеОбъектыОбменСБанками.СообщениеОбмена КАК СообщениеОбмена
		|ИЗ
		|	РегистрСведений.СвязанныеОбъектыОбменСБанками КАК СвязанныеОбъектыОбменСБанками
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлатежныйДокумент КАК ВТПлатежныйДокумент
		|		ПО СвязанныеОбъектыОбменСБанками.СсылкаНаОбъект = ВТПлатежныйДокумент.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
		|		ПО (СвязанныеОбъектыОбменСБанками.СообщениеОбмена = СообщениеОбменСБанками.Ссылка)
		|			И (СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ПлатежноеПоручение))";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Документы.СообщениеОбменСБанками.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СообщениеОбмена;
	
КонецФункции

#КонецОбласти

#КонецОбласти
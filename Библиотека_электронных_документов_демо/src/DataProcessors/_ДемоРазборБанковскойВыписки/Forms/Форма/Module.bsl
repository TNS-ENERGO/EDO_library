
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Организация = Параметры.Организация;
	Если ТипЗнч(Параметры.МассивСчетов) = Тип("Массив")
		И Параметры.МассивСчетов.Количество() Тогда  
		БанковскийСчет = Параметры.МассивСчетов[0];
	КонецЕсли;
	
	ИспользуетсяНесколькоОрганизацийЭД = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЭД");

	Если Не ИспользуетсяНесколькоОрганизацийЭД Тогда
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	// Разбор выписки при открытии из формы электронного документа
	Если Параметры.Свойство("ЭлектроннаяВыпискаБанка")
		И ЗначениеЗаполнено(Параметры.ЭлектроннаяВыпискаБанка)
		И ТипЗнч(Параметры.ЭлектроннаяВыпискаБанка) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		
		СообщениеБанка = Параметры.ЭлектроннаяВыпискаБанка;
		ВыпискиБанка.Добавить(СообщениеБанка);
		Если ЗначениеЗаполнено(СообщениеБанка.ДатаСообщения) Тогда 
			ДатаСообщения = СообщениеБанка.ДатаСообщения;
			НачалоПериода = ДатаСообщения;
			КонецПериода = ДатаСообщения;
			ЭлектроннаяВыпискаБанка = ТекстСсылкиНаЭлектронныеВыписки(НачалоПериода, КонецПериода);
		Иначе
			ЭлектроннаяВыпискаБанка = СообщениеБанка.ПредставлениеДокумента;
		КонецЕсли;
		АдресФайлаВыписки = Параметры.ФайлСсылка;
		
		ЗаполнитьФормуДаннымиИзФайла();
		
		Заголовок = НСтр("ru = 'Демо: Разбор банковской выписки'");
		
	Иначе //Режим загрузки выписки
		
		РежимЗагрузки = Истина;
		Заголовок = НСтр("ru = 'Демо: Обмен с банком'");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаБанковскийСчетаОрганизация",
		"ТолькоПросмотр",
		Не РежимЗагрузки);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаВыпискаПоПрямомуОбмену",
		"Видимость",
		РежимЗагрузки);
		
	Если РежимЗагрузки Тогда 
		Если НЕ (Параметры.Свойство("НачалоПериода") И Параметры.Свойство("КонецПериода")) Тогда
			НачалоПериода = ОбщегоНазначения.ТекущаяДатаПользователя();
			КонецПериода  = ОбщегоНазначения.ТекущаяДатаПользователя();
		КонецЕсли;
		ЗагрузитьНастройкиОбменаСБанками();
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ОбменСБанкамиКлиентСервер.ПоказатьРекламуДиректБанк(
		Элементы.ГруппаРекламаДиректБанкГоризонтально, Элементы.ТекстДиректБанкГоризонтально);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ВыпискиБанка.Очистить();
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СообщениеОбменСБанками")
		И ЗначениеЗаполнено(НастройкаОбменаСБанком) Тогда
		
		ВыпискиБанка.Добавить(ВыбранноеЗначение);
		МассивВыписок = ВыпискиБанка.ВыгрузитьЗначения();
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() > 0 Тогда
		
		МассивВыписок = ВыбранноеЗначение;
		Для Каждого Выписка Из ВыбранноеЗначение Цикл
			ВыпискиБанка.Добавить(Выписка);
		КонецЦикла;
		
		
	КонецЕсли;
	
	Если ВыпискиБанка.Количество() > 0 Тогда
		
		
		ЭлектроннаяВыпискаБанка = ТекстСсылкиНаЭлектронныеВыписки(НачалоПериода, КонецПериода);
		
		АдресФайлаВыписки = ПолучитьДанныеВыпискиБанкаВФайл(МассивВыписок);
		ЗаполнитьФормуДаннымиИзФайла();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ОбменСБанкамиКлиент.ОбновитьРекламуДиректБанк(ИмяСобытия,
		Элементы.ГруппаРекламаДиректБанкГоризонтально, Элементы.ТекстДиректБанкГоризонтально);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	ЗагрузитьНастройкиОбменаСБанками();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура();
	Отбор = Новый Структура();
	Если ЗначениеЗаполнено(Организация) Тогда  
		Отбор.Вставить("Владелец", Организация);
	КонецЕсли;
	Отбор.Вставить("ТипВладельцаСтрокой", "СправочникСсылка.Организации");
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент,,,,);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьБанковскийСчетОрганизации(БанковскийСчет, Организация);
	ЗагрузитьНастройкиОбменаСБанками();

КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяВыпискаБанкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыпискиБанка.Количество() > 1 Тогда
		
		ОбработкаВыбораВыпискиИзМеню = Новый ОписаниеОповещения("ОбработкаВыбораВыпискиИзМеню", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОбработкаВыбораВыпискиИзМеню, ВыпискиБанка, Элементы.ЭлектроннаяВыпискаБанка);
		
	ИначеЕсли ВыпискиБанка.Количество() = 1 Тогда
		
		ОбменСБанкамиКлиент.ОткрытьФормуПросмотраЭлектронногоДокумента(ВыпискиБанка[0].Значение);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВыпискиИзМеню(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт 
	
	Если Не ВыбранныйЭлемент = Неопределено Тогда 
		
		ОбменСБанкамиКлиент.ОткрытьФормуПросмотраЭлектронногоДокумента(ВыбранныйЭлемент.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДиректБанкГоризонтальноОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбменСБанкамиКлиент.ОбработкаНавигационнойСсылкиРекламыДиректБанк(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Новый СтандартныйПериод(НачалоПериода, КонецПериода);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры


&НаКлиенте
Процедура ДокументыКИмпортуОтметитьВсе(Команда)
	
	Для Каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = Истина;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуСнятьОтметкуСоВсех(Команда)
	
	Для Каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если ДокументыКИмпорту.Количество() > 0 Тогда
		ЗагрузитьДокументыКИмпорту();
		ЗаполнитьФормуДаннымиИзФайла();
		
		ОповеститьОбИзменении(Тип("ДокументСсылка._ДемоОперацииПоБанковскомуСчету"));
		
	Иначе
				
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Список документов для загрузки пуст.%1Необходимо прочитать данные из файла.'"), Символы.ПС);
				
		ПоказатьПредупреждение( , ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗапроситьЭлектроннуюВыпискуБанка(Команда)
	ЗапроситьЭлектроннуюВыпискуБанка();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыНаЭкспорт(Команда)
	
	ЗаполнитьФормуДаннымиИзФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагентов(Команда)
	
	Если ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьНовогоКонтрагента();
	
	Если ЗаполнитьФормуДаннымиИзФайла() Тогда
		
		Элементы.СтраницаНенайденныеОбъекты.Видимость = (ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0);
		
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПрямойОбмен

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = РезультатВыбора.ДатаНачала;
	КонецПериода  = РезультатВыбора.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьЭлектроннуюВыпискуБанка()
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбменаСБанком) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не выбран банковский счет'")
			,, "БанковскийСчет");
		Возврат;
	КонецЕсли;
	
	// Проверим период
	Если НЕ ЗначениеЗаполнено(НачалоПериода) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена дата начала периода'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НачалоПериода");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена дата окончания периода'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонецПериода");
		Возврат;
	КонецЕсли;
	
	ОбменСБанкамиКлиент.ПолучитьВыпискуБанка(
		НастройкаОбменаСБанком, НачалоПериода, КонецПериода, ЭтотОбъект, ПолучитьНомерСчета(БанковскийСчет));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомерСчета(Знач БанковскийСчет)
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "НомерСчета");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ТекстСсылкиНаЭлектронныеВыписки(НачалоПериода, КонецПериода)
	
	ШаблонСтроки = НСтр("ru = 'Выписка банка за период с %1 по %2'");
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
		Формат(НачалоПериода, "ДЛФ=D"), Формат(КонецПериода, "ДЛФ=D"));
	
КонецФункции // СсылкаНаЭлектронныеВыписки()
	
	
&НаСервереБезКонтекста
Функция ПолучитьДанныеВыпискиБанкаВФайл(Знач МассивВыписок)
	
	МассивСчетов      = Новый Массив;
	СсылкаНаХранилище = "";
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(МассивВыписок, СсылкаНаХранилище, МассивСчетов);
	
	Возврат СсылкаНаХранилище;
	
КонецФункции

#Область Настройки

&НаСервере
Процедура ЗагрузитьНастройкиОбменаСБанками()
	
	НастройкаОбменаСБанком = Перечисления.ПрограммыБанка.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Владелец");
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(БанковскийСчет) Тогда
		
		Настройки = ПолучитьНастройкуОбменаСБанком(Организация, БанковскийСчет);
		НастройкаОбменаСБанком = Настройки.НастройкаОбменаСБанком;
		
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"КомандаЗапроситьЭлектроннуюВыпискуБанка",
		"Доступность",
		ЗначениеЗаполнено(НастройкаОбменаСБанком));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкуОбменаСБанком(Знач Организация, Знач БанковскийСчет)

	Возврат Обработки._ДемоРазборБанковскойВыписки.ПолучитьНастройкуОбменаСБанком(Организация, БанковскийСчет);
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьБанковскийСчетОрганизации(БанковскийСчет, Знач Организация)
	
	Возврат Обработки._ДемоРазборБанковскойВыписки.УстановитьБанковскийСчетОрганизации(БанковскийСчет, Организация);
	
КонецФункции


#КонецОбласти

#КонецОбласти

#Область РазборФайлаВыписки

&НаСервере
Функция ЗаполнитьФормуДаннымиИзФайла()
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайлаВыписки);
	ДанныеФайла.Записать(ИмяФайла);
	
	РезультатЧтения = Обработки._ДемоРазборБанковскойВыписки.ПрочитатьДанныеИзФайла(ИмяФайла, БанковскийСчет);
	
	Если РезультатЧтения.Ошибка = Истина Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	// Заполнение реквизитов формы результатом чтения
	Импорт_Заголовок = РезультатЧтения.Импорт_Заголовок;
	
	ДокументыКИмпорту.Загрузить(РезультатЧтения.ДокументыКИмпорту);
	Импорт_РасчетныеСчета.Загрузить(РезультатЧтения.Импорт_РасчетныеСчета);
	
	Дерево = РеквизитФормыВЗначение("ТаблицаКонтрагентов", Тип("ДеревоЗначений"));
	Дерево = РезультатЧтения.ТаблицаКонтрагентов;
	ЗначениеВРеквизитФормы(Дерево, "ТаблицаКонтрагентов");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"СтраницаНенайденныеОбъекты",
		"Видимость",
		(ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0));	
		
	ИтогиПоступило = ДокументыКИмпорту.Итог("СуммаПоступило");
	ИтогиСписано = ДокументыКИмпорту.Итог("СуммаСписано");
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СозданиеДокументов

&НаСервере
Процедура ЗагрузитьДокументыКИмпорту()
	
	ДанныеДляЗагрузки = Новый Структура();
	ДанныеДляЗагрузки.Вставить("Импорт_Заголовок", 		Импорт_Заголовок);
	ДанныеДляЗагрузки.Вставить("ДокументыКИмпорту", 	ДокументыКИмпорту.Выгрузить()); 
	ДанныеДляЗагрузки.Вставить("БанковскийСчет", 		БанковскийСчет);
	
	Обработки._ДемоРазборБанковскойВыписки.СоздатьДокументы(ДанныеДляЗагрузки)
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеКонтрагентов

&НаСервере
Процедура СоздатьНовогоКонтрагента()
	
	Обработки._ДемоРазборБанковскойВыписки.СоздатьКонтрагентов(РеквизитФормыВЗначение("ТаблицаКонтрагентов", Тип("ДеревоЗначений")));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


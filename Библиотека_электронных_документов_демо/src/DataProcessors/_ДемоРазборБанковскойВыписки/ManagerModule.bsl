#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Интерфейсные

// Получает действующую настройку для организации и банковского счета. Возвращает структуру настроек.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация для которой необходимо получить настройки;
//  БанковскийСчет - СправочникСсылка.БанковскиеСчета - Банковский счет для которого необходимо получить настройки,
//                   если не указан, будет попытка определить счет автоматически и вернуть его через параметр.
//
// Возвращаемое значение:
//  Структура - структура настроек с ключами:
//		* НастройкаОбменаСБанком - СправочникСсылка.НастройкиОбменСБанками - настройка обмена.
//		* БанкДляПрямогоОбмена   - СправочникСсылка.КлассификаторБанков  - банк из настройки обмена.
//		* БанковскийСчет 		 - СправочникСсылка.БанковскиеСчета   - банковский счет, по которому была найдена настройка.
//		* Организация 			 - СправочникСсылка.Организации       - организация, по которой была найдена настройка.
//
Функция ПолучитьНастройкуОбменаСБанком(Знач Организация, БанковскийСчет) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		// Определим организацию
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			// Из банковского счета
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Владелец");
		ИначеЕсли НЕ Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
			// По умолчанию
			Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) И ЗначениеЗаполнено(Организация) Тогда
		// Определим банковский счет, если он один
		УстановитьБанковскийСчетОрганизации(БанковскийСчет, Организация)
	КонецЕсли;
	
	Настройки = Новый Структура;
	Настройки.Вставить("НастройкаОбменаСБанком",            		Справочники.НастройкиОбменСБанками.ПустаяСсылка());
	Настройки.Вставить("БанкДляПрямогоОбмена",                      Справочники.КлассификаторБанков.ПустаяСсылка());
	Настройки.Вставить("БанковскийСчет",                            БанковскийСчет);
	Настройки.Вставить("Организация",                               Организация);
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками") = Истина Тогда
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("БанковскийСчет", БанковскийСчет);
		Запрос.Параметры.Вставить("Организация", Организация);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиОбменСБанками.Ссылка КАК НастройкаОбменаСБанком,
		|	НастройкиОбменСБанками.Банк
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
		|		ПО БанковскиеСчета.Банк = НастройкиОбменСБанками.Банк
		|ГДЕ
		|	БанковскиеСчета.Ссылка = &БанковскийСчет
		|	И НастройкиОбменСБанками.Организация = &Организация
		|	И НЕ НастройкиОбменСБанками.ПометкаУдаления
		|	И НЕ НастройкиОбменСБанками.Недействительна";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Настройки.Вставить("НастройкаОбменаСБанком", 		Выборка.НастройкаОбменаСБанком);
			Настройки.Вставить("БанкДляПрямогоОбмена",          Выборка.Банк);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

// Устанавливает банковский счет по умолчанию. Возвращает состояние установлен/не установлен.
//
// Параметры:
//  БанковскийСчет - СправочникСсылка.БанковскиеСчета - текущее значение счета;
//  Организация - СправочникСсылка.Организации - Организация счет которой нужно получить.
//
// Возвращаемое значение:
//  Булево - установлен / не установлен счет по умолчанию.
//
Функция УстановитьБанковскийСчетОрганизации(БанковскийСчет, Знач Организация) Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	(ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Организации)) = &Организация
	|	И БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации
	|	И НЕ БанковскиеСчета.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 
		И Выборка.Следующий() Тогда
		БанковскийСчет = Выборка.БанковскийСчет;	
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции		

#КонецОбласти

#Область РазборВыписки

// Получает выписку банка в текстовом формате.
//
// Параметры:
//  МассивВыписок - Массив - содержит ссылку или массив ссылок на выписки банка.
//
// Возвращаемое значение:
//  Строка - адрес в хранилище на данные выписки в текстовом формате.
//
Функция ПолучитьДанныеВыпискиБанкаВФайл(Знач МассивВыписок) Экспорт 
	
	МассивСчетов      = Новый Массив;
	СсылкаНаХранилище = "";
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(МассивВыписок, СсылкаНаХранилище, МассивСчетов);
	
	Возврат СсылкаНаХранилище;
	
КонецФункции

// Читает данные выписки из файла и возвращает результат в виде структуры.
//
// Параметры:
//  ИмяФайла - Строка - Имя файла с данными выписки.
//  БанковскийСчет - СправочникСсылка.БанковскиеСчета - Банковский счет разбираемой выписки.
//  Загружать - Булево - признак того, что в результате разбора документы нужно будет создать (проставляет пометку Загружать напротив документов).
//
// Возвращаемое значение:
//  Структура - результат чтения данных, вида:
//    * Ошибка - Булево - признак того, что при чтении была обнаружена ошибка;
//    * ДокументыКИмпорту - ТаблицаЗначений - Таблица документов по оборотам;
//    * Импорт_РасчетныеСчета - ТаблицаЗначений - Таблица расчетных счетов из выписки;
//    * ТаблицаКонтрагентов - ДеревоЗначений - Дерево контрагентов которые не найдены в базе и их надо создать;
//    * Импорт_Заголовок - Структура - структура заголовков импорта.
//
Функция ПрочитатьДанныеИзФайла(Знач ИмяФайла, БанковскийСчет, Загружать = Ложь) Экспорт 
	
	РезультатЧтения = СтруктураРезультатаЧтения();
	
	ПроверитьДанные(ИмяФайла, БанковскийСчет, РезультатЧтения.Ошибка);

	Если РезультатЧтения.Ошибка Тогда 
		Возврат РезультатЧтения;
	КонецЕсли;
	
	РезультатЧтения.Вставить("БанковскийСчет", БанковскийСчет);
	
	ЗаполнитьДокументыНаИмпорт(РезультатЧтения, ПрочитатьФайл(ИмяФайла), Загружать);                                                              
	
	Возврат РезультатЧтения;
			
КонецФункции

// Создает документы на основании результатов разбора выписки.
//
// Параметры:
//  Данные - Структура - результат разбора выписки, содержащий ключи:
//    * ДокументыКИмпорту - ТаблицаЗначений - Таблица документов по оборотам;
//    * Импорт_Заголовок - Структура - структура заголовков импорта;
//    * БанковскийСчет - СправочникСсылка.БанковскиеСчета - Банковский счет для которого необходимо получить и создать документы.
//
Процедура СоздатьДокументы(Знач Данные) Экспорт 
	
	ЗагрузитьДокументы(Данные);
	
КонецПроцедуры

// Создает контрагентов на основании таблицы не найденных контрагентов в результате разбора выписки.
//
// Параметры:
//  ТаблицаКонтрагентов - ДеревоЗначений - Дерево контрагентов которые не найдены в базе и их надо создать.
//
Процедура СоздатьКонтрагентов(Знач ТаблицаКонтрагентов) Экспорт 
	
	СоздатьНовогоКонтрагента(ТаблицаКонтрагентов);	
	
КонецПроцедуры

// Процедура которая в фоновом режиме производит разбор выписки, создает контрагентов, а затем и документы.
//
// Параметры:
//  СтруктураПараметров - Структура - структура параметров загрузки вида:
//    * ФайлЗагрузки - путь к файлу с данными выписки;
//    * ДвоичныеДанные - двоичные данные выписки, используется, если пустое значение ФайлЗагрузки;
//    * СведенияОВладельцеБанковскогоСчетаИзКонтекста - структура данных о владельце банковского счета;
//  АдресХранилища - Строка - Адрес во временном хранилище куда будет передан результат загрузки.
//
Процедура ФоноваяЗагрузкаБанковскойВыпискиИзЖурнала(СтруктураПараметров, АдресХранилища) Экспорт 
	
	
	ИмяФайла  		= СтруктураПараметров.ФайлЗагрузки; 
	ДвоичныеДанные  = СтруктураПараметров.ДвоичныеДанные;
	БанковскийСчет  = СтруктураПараметров.СведенияОВладельцеБанковскогоСчетаИзКонтекста.БанковскийСчетОрганизации;
	
	РезультатЗагрузки = Новый Структура();
	
	Если ПустаяСтрока(ИмяФайла)
		И ЗначениеЗаполнено(ДвоичныеДанные) Тогда 
 		ИмяФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные.Записать(ИмяФайла);
	КонецЕсли;	
	
	// 1. Прочитаем данные из файла
	
	РезультатЧтения = ПрочитатьДанныеИзФайла(ИмяФайла, БанковскийСчет, Истина);
	
	Если РезультатЧтения.Ошибка = Истина Тогда 
		РезультатЗагрузки.Вставить("РезультатВыполнения",  "ЕстьОшибкиЧтенияФайла");
	Иначе	
	
	Если РезультатЧтения.ТаблицаКонтрагентов.Строки.Количество() Тогда  
		// 2. Создадим контрагентов
		СоздатьКонтрагентов(РезультатЧтения.ТаблицаКонтрагентов);
		// заполним созданными контрагентами
		РезультатЧтения = ПрочитатьДанныеИзФайла(ИмяФайла, БанковскийСчет, Истина);
	КонецЕсли;
	
	УдалитьВременныеФайлы(ИмяФайла);
	
	// 3. Создадим документы
	СоздатьДокументы(РезультатЧтения);
	
	КонецЕсли;
	
	РезультатЗагрузки.Вставить("СообщенияПользователю", ПолучитьСообщенияПользователю(Истина)); 
	РезультатЗагрузки.Вставить("РезультатВыполнения",   "УспешнаяЗагрузка");	
	
	ПоместитьВоВременноеХранилище(РезультатЗагрузки, АдресХранилища); 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедуры

#Область ЧтениеДанныхИзФайла

Функция СтруктураРезультатаЧтения()
	
	Результат = Новый Структура();
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ДокументыКИмпорту", 	ТаблицаДокументыКИмпорту());
	Результат.Вставить("Импорт_РасчетныеСчета", ТаблицаИмпорт_РасчетныеСчета());
	Результат.Вставить("ТаблицаКонтрагентов", 	ТаблицаКонтрагентов());
	Результат.Вставить("Импорт_Заголовок", 		Неопределено);
	
	Возврат Результат;
	
КонецФункции	

Функция ТаблицаДокументыКИмпорту()
	
	ТаблицаДокументыКИмпорту = Новый ТаблицаЗначений;
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Проведен", Новый ОписаниеТипов("Булево"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Загружать", Новый ОписаниеТипов("Булево"), НСтр("ru = '-'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Готовность", Новый ОписаниеТипов("Число",
															Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Любой)), НСтр("ru = 'Готовность'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число",
															Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)), НСтр("ru = 'Номер строки'"));	
	ТаблицаДокументыКИмпорту.Колонки.Добавить("НомерДок", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = '№ Документа'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Номер'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ДатаДок", Новый ОписаниеТипов("Дата", , ,
														 Новый КвалификаторыДаты(ЧастиДаты.Дата)), "Дата");
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Дата", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Дата (из файла)'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Операция", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Операция'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("СчетОрганизации", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета, Строка", ,
														   Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Р/с организации'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("СуммаДокумента", Новый ОписаниеТипов("Число",
															Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)), НСтр("ru = 'Сумма'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("СуммаСписано", Новый ОписаниеТипов("Число",
															Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)), НСтр("ru = 'Сумма списания'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("СуммаПоступило", Новый ОписаниеТипов("Число",
															Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)), НСтр("ru = 'Сумма поступления'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Сумма (из файла)'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты, СправочникСсылка.Организации"), НСтр("ru = 'Контрагент'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("СчетКонтрагента", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета, Строка", ,
														   Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Р/с контрагента'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("УдалитьКвитанцияДата", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Дата форм. квитанции'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("УдалитьКвитанцияВремя", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Время форм. квитанции'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("УдалитьКвитанцияСодержание", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Содержание квитанции'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Списано", Новый ОписаниеТипов("Дата", , ,
														 Новый КвалификаторыДаты(ЧастиДаты.Дата)), НСтр("ru = 'Списано'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ДатаСписано", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Списано'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Поступило", Новый ОписаниеТипов("Дата", , ,
														 Новый КвалификаторыДаты(ЧастиДаты.Дата)), НСтр("ru = 'Поступило'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ДатаПоступило", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Поступило'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ДатаПроведения", Новый ОписаниеТипов("Дата", , ,
														 Новый КвалификаторыДаты(ЧастиДаты.Дата)), НСтр("ru = 'Дата проведения по счету'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПлательщикСчет", Новый ОписаниеТипов("Строка", ,
															   Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)), НСтр("ru = 'Расчетный счет плательщика'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Плательщик", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Плательщик'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПлательщикИНН", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(12, ДопустимаяДлина.Переменная)), НСтр("ru = 'ИНН плательщика'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Плательщик1", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Наименование плательщика'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Плательщик2", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)), НСтр("ru = 'Расчетный счет плательщика'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Плательщик3", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Банк плательщика'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Плательщик4", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Город банка плательщика'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПлательщикРасчСчет", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)), НСтр("ru = 'Корсчет банка плательщика'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПлательщикБанк1", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'РЦ банка плательщика'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПлательщикБанк2", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Город РЦ банка плательщика'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПлательщикБИК", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(9, ДопустимаяДлина.Переменная)), НСтр("ru = 'БИК РЦ банка плательщика'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПлательщикКорсчет", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)), НСтр("ru = 'Корсчет РЦ банка плат.'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПолучательСчет", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)), НСтр("ru = 'Расчетный счет получателя'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Получатель", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Получатель'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПолучательИНН", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(12, ДопустимаяДлина.Переменная)), НСтр("ru = 'ИНН получателя'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Получатель1", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Наименование получателя'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Получатель2", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)), НСтр("ru = 'Расчетный счет получателя'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Получатель3", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Банк получателя'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Получатель4", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Город банка получателя'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПолучательРасчСчет", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)), НСтр("ru = 'Корсчет банка получателя'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПолучательБанк1", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'РЦ банка получателя'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПолучательБанк2", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Город РЦ банка получателя'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПолучательБИК", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(9, ДопустимаяДлина.Переменная)), НСтр("ru = 'БИК РЦ банка получателя'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПолучательКорсчет", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)), НСтр("ru = 'Корсчет РЦ банка пол.'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ВидПлатежа", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Вид платежа'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ВидОплаты", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(2, ДопустимаяДлина.Переменная)), НСтр("ru = 'Вид оплаты'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("СтатусСоставителя", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(2, ДопустимаяДлина.Переменная)), НСтр("ru = 'Статус составителя'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПлательщикКПП", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(9, ДопустимаяДлина.Переменная)), НСтр("ru = 'КПП плательщика'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПолучательКПП", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(9, ДопустимаяДлина.Переменная)), НСтр("ru = 'КПП получателя'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПоказательКБК", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)), НСтр("ru = 'Показатель КБК'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ОКАТО", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(11, ДопустимаяДлина.Переменная)), НСтр("ru = 'ОКАТО'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПоказательОснования", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(2, ДопустимаяДлина.Переменная)), НСтр("ru = 'Показатель основания'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПоказательПериода", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(10, ДопустимаяДлина.Переменная)), НСтр("ru = 'Показатель налогового периода'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПоказательНомера", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Показатель номера док.'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПоказательДатыДок", Новый ОписаниеТипов("Дата", , ,
														 Новый КвалификаторыДаты(ЧастиДаты.Дата)), НСтр("ru = 'Показатель даты док.'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПоказательДаты", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Показатель даты'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПоказательТипа", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(2, ДопустимаяДлина.Переменная)), НСтр("ru = 'Показатель типа платежа'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("СрокПлатежаДок", Новый ОписаниеТипов("Дата", , ,
														 Новый КвалификаторыДаты(ЧастиДаты.Дата)), НСтр("ru = 'Срок действия аккредитива'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("СрокПлатежа", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Срок действия аккредитива'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Очередность", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(2, ДопустимаяДлина.Переменная)), НСтр("ru = 'Очередность (из файла)'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ОчередностьПлатежа", Новый ОписаниеТипов("Число",
															Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Любой)), НСтр("ru = 'Очередность'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("НазначениеПлатежа", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Назначение платежа'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("НазначениеПлатежа1", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Назначение платежа, стр. 1'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("НазначениеПлатежа2", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Назначение платежа, стр. 2'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("НазначениеПлатежа3", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Назначение платежа, стр. 3'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("НазначениеПлатежа4", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Назначение платежа, стр. 4'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("НазначениеПлатежа5", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Назначение платежа, стр. 5'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("НазначениеПлатежа6", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Назначение платежа, стр. 6'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("СрокАкцептаДок", Новый ОписаниеТипов("Число",
															Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)), НСтр("ru = 'Срок акцепта'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("СрокАкцепта", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Срок акцепта (из файла)'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ВидАккредитива", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Вид аккредитива'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("УсловиеОплаты1", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Условие оплаты, стр. 1'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("УсловиеОплаты2", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Условие оплаты, стр. 2'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("УсловиеОплаты3", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Условие оплаты, стр. 3'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПлатежПоПредст", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Платеж по представлению'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ДополнУсловия", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Дополнительные условия'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("НомерСчетаПоставщика", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = '№ счета поставщика'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ДатаОтсылки", Новый ОписаниеТипов("Дата", , ,
														 Новый КвалификаторыДаты(ЧастиДаты.Дата)), НСтр("ru = 'Дата отсылки'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ДатаОтсылкиДок", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Дата отсылки документов'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументСсылка._ДемоПлатежныйДокумент, ДокументСсылка._ДемоОперацииПоБанковскомуСчету"), НСтр("ru = 'Платежный документ'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ПлатежныйОрдер", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), "Ордер");
	ТаблицаДокументыКИмпорту.Колонки.Добавить("СекцияДокумент", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), "Выгрузка");
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ОписаниеОшибок", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Описание ошибок'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("Число",
															Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)), НСтр("ru = 'Тип пл. документа'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Вид документа'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ИмяДокумента", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), НСтр("ru = 'Имя документа'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("ТипПлатежногоДокумента", Новый ОписаниеТипов("ОписаниеТипов"), НСтр("ru = 'Тип платежного документа'"));
	ТаблицаДокументыКИмпорту.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), "Код");
	Возврат ТаблицаДокументыКИмпорту;													  
КонецФункции

Функция ТаблицаИмпорт_РасчетныеСчета()
	
	ТаблицаИмпорт_РасчетныеСчета = Новый ТаблицаЗначений;
    ТаблицаИмпорт_РасчетныеСчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная))); 
    ТаблицаИмпорт_РасчетныеСчета.Колонки.Добавить("ДатаКонца", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная))); 
    ТаблицаИмпорт_РасчетныеСчета.Колонки.Добавить("РасчСчет", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная))); 
    ТаблицаИмпорт_РасчетныеСчета.Колонки.Добавить("НачальныйОстаток", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная))); 
    ТаблицаИмпорт_РасчетныеСчета.Колонки.Добавить("ВсегоПоступило", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная))); 
    ТаблицаИмпорт_РасчетныеСчета.Колонки.Добавить("ВсегоСписано", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная))); 
    ТаблицаИмпорт_РасчетныеСчета.Колонки.Добавить("КонечныйОстаток", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная))); 
	ТаблицаИмпорт_РасчетныеСчета.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата", , ,
														 Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаИмпорт_РасчетныеСчета.Колонки.Добавить("Конец", Новый ОписаниеТипов("Дата", , ,
														 Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаИмпорт_РасчетныеСчета.Колонки.Добавить("РасчетныйСчет", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТаблицаИмпорт_РасчетныеСчета.Колонки.Добавить("НачальнаяСумма", Новый ОписаниеТипов("Число",
															Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТаблицаИмпорт_РасчетныеСчета.Колонки.Добавить("Поступило", Новый ОписаниеТипов("Число",
															Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТаблицаИмпорт_РасчетныеСчета.Колонки.Добавить("Списано", Новый ОписаниеТипов("Число",
															Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТаблицаИмпорт_РасчетныеСчета.Колонки.Добавить("КонечнаяСумма", Новый ОписаниеТипов("Число",
															Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
														  
	Возврат ТаблицаИмпорт_РасчетныеСчета;
	
КонецФункции 

Функция ТаблицаКонтрагентов()
	
	ТаблицаКонтрагентов = Новый ДеревоЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", ,
														  Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная)));
	ТаблицаКонтрагентов.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка", ,
													 Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная)));
	ТаблицаКонтрагентов.Колонки.Добавить("Реквизит", Новый ОписаниеТипов("СправочникСсылка.Контрагенты, Строка", ,
													 Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ТаблицаКонтрагентов.Колонки.Добавить("НомСтроки", Новый ОписаниеТипов("Строка", ,
													  Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная)));
														  
	Возврат ТаблицаКонтрагентов;														  
КонецФункции

Процедура ПроверитьДанные(Знач Файл, Знач БанковскийСчет, Отказ)
	
	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Банковский счет не выбран'");
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ФайлЗагрузки = Новый Файл(Файл);
	
	Если НЕ ФайлЗагрузки.Существует() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Файла %1 не существует.'"), Файл);
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ПотокЧтения = Новый ТекстовыйДокумент();
	
	Попытка
		
		ПотокЧтения.Прочитать(Файл);
		
	Исключение
				
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Файл не прочитан.'");
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
		
	КонецПопытки;
	
	ПотокЧтения.Прочитать(Файл, "windows-1251");

	Если ПотокЧтения.КоличествоСтрок() < 1 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Файл загрузки не содержит данных.'");
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;

	Если НЕ СокрЛП(ПотокЧтения.ПолучитьСтроку(1)) = "1CClientBankExchange" Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Указанный файл не является файлом обмена, или неверно указана кодировка.'");
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьФайл(Файл)
	
	ФайлЗагрузки = Новый Файл(Файл);
	
	ПотокЧтения = Новый ТекстовыйДокумент();
	ПотокЧтения.Прочитать(Файл, "windows-1251");
	
	Возврат ПотокЧтения.ПолучитьТекст();

КонецФункции

Процедура ЗаполнитьДокументыНаИмпорт(РезультатЧтения, Знач Импорт_ТекстДляРазбора, Загружать = Ложь)
	
	БанковскийСчет = РезультатЧтения.БанковскийСчет;
	Организация = БанковскийСчет.Владелец;
	
	Импорт_ВидыДокументов = Новый Массив;
	
	// Подготавливаем структуры обработки данных.
	Импорт_ПризнакОбмена = Ложь;
	НайденКонецФайла     = Ложь;
	
	СписокДокументов = Новый СписокЗначений;
	
	РезультатЧтения.ДокументыКИмпорту.Очистить();
	РезультатЧтения.Импорт_РасчетныеСчета.Очистить();
	
	// Заполняем первичные структуры данных.
	Импорт_КоличествоСтрок = СтрЧислоСтрок(Импорт_ТекстДляРазбора);
	Импорт_ТекущаяСтрока = 1;
	
	Пока Импорт_ТекущаяСтрока <= Импорт_КоличествоСтрок Цикл
		
		Стр = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
		
		Если Лев(ВРег(СокрЛП(Стр)), 14) = "СЕКЦИЯДОКУМЕНТ" Тогда
			
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "СЕКЦИЯДОКУМЕНТ" Тогда
				
				НоваяСтрокаДокументов = РезультатЧтения.ДокументыКИмпорту.Добавить();
				НоваяСтрокаДокументов.Операция  = Значение;
				НоваяСтрокаДокументов.Загружать = Загружать;
				Если НЕ ЗагрузитьСекциюДокумента(НоваяСтрокаДокументов,
												 Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора) Тогда
					Возврат;
				КонецЕсли;
				
			Иначе
				
				Сообщение = Новый СообщениеПользователю;
		
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Нарушена структура файла импорта, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, Стр);
					
				Сообщение.Сообщить();
				
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Лев(ВРег(СокрЛП(Стр)), 14) = "СЕКЦИЯРАСЧСЧЕТ" Тогда
			
			СтрокаРССчетов = РезультатЧтения.Импорт_РасчетныеСчета.Добавить();
			
			СекцияЗагружена = ЗагрузитьСекциюРасчетныеСчета(СтрокаРССчетов,
													   Импорт_ТекущаяСтрока,
													   Импорт_КоличествоСтрок,
													   Импорт_ТекстДляРазбора);
			
			Если НЕ СекцияЗагружена Тогда
				
				Сообщение = Новый СообщениеПользователю;
		
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Нарушена структура файла импорта в секции описания расчетного счета. Строка: %1'"),
					Импорт_ТекущаяСтрока - 1);
					
				Сообщение.Сообщить();
				
				Возврат;
				
			КонецЕсли;
			
			Если СокрЛП(БанковскийСчет.НомерСчета) <> СокрЛП(СтрокаРССчетов.РасчСчет) Тогда
				РезультатЧтения.Импорт_РасчетныеСчета.Удалить(СтрокаРССчетов);
			КонецЕсли;
				
		ИначеЕсли Лев(ВРег(СокрЛП(Стр)), 8) = "РАСЧСЧЕТ" Тогда
			
			Значение = "";
			Тег = "";
			
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "РАСЧСЧЕТ" Тогда
				
				Если СокрЛП(БанковскийСчет.НомерСчета) = СокрЛП(Значение) Тогда
					
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("РасчСчет", Значение);
					
					СтрокаРССчетов = РезультатЧтения.Импорт_РасчетныеСчета.НайтиСтроки(ПараметрыОтбора);
					
					Если СтрокаРССчетов.Количество() = 0 Тогда
						СтрокаРССчетов = РезультатЧтения.Импорт_РасчетныеСчета.Добавить();
						СтрокаРССчетов.РасчСчет = Значение;
					КонецЕсли;
				Иначе

					Сообщение = Новый СообщениеПользователю;

					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='В заголовке файла указан счет (%1), отличный от указанного, расчеты по которому загружаться не будут.'"),
						Значение);
					
					Сообщение.Сообщить();
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Лев(ВРег(СокрЛП(Стр)), 8) = "ДОКУМЕНТ" Тогда
			
			Импорт_ВидыДокументов.Добавить(Значение);

		ИначеЕсли Лев(ВРег(СокрЛП(Стр)), 10) = "КОНЕЦФАЙЛА" Тогда
			
			Если НЕ Импорт_ПризнакОбмена Тогда
								
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = НСтр("ru='В файле импорта отсутствует признак обмена ""1CClientBankExchange"".'");
				
				Сообщение.Сообщить();
				
				Возврат;
				
			КонецЕсли;
			
			НайденКонецФайла = Истина;
			НомерСтроки = 0;
			
			// Формируем объектные структуры данных.
			Для Каждого СтрокаДокумента Из РезультатЧтения.ДокументыКИмпорту Цикл
				// Последовательно обрабатываем каждую загруженную строку.
				
				// Распознаем реквизиты.
				// Если в файле находятся выписки пл. документов по нескольким счетам, то распознаем и отображаем
				// только те, которые выгружены по указанному банковскому счету.
				Если СокрЛП(СтрокаДокумента.ПлательщикСчет) = СокрЛП(БанковскийСчет.НомерСчета)
				 ИЛИ СокрЛП(СтрокаДокумента.ПолучательСчет) = СокрЛП(БанковскийСчет.НомерСчета) Тогда
					РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, БанковскийСчет, Организация);
					НомерСтроки = НомерСтроки + 1;
					СтрокаДокумента.НомерСтроки = НомерСтроки;
					// Для каждого реквизита (= колонка) надо проверить на пустое значение.
					Для Каждого КолонкаИмпорта Из РезультатЧтения.ДокументыКИмпорту.Колонки Цикл
						Заголовок = КолонкаИмпорта.Заголовок;
						ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента,
														 КолонкаИмпорта.Имя,
														 Заголовок);
					КонецЦикла;
					
					Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("Строка")
					 ИЛИ ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка") Тогда
						
						// Добавляем реквизиты в табличную часть для дальнейшего использования.
						СписокНенайденных(СтрокаДокумента, БанковскийСчет, РезультатЧтения.ТаблицаКонтрагентов);
						
					КонецЕсли;
				Иначе
					// Остальные помечаем для последующего удаления.
					СтрокаДокумента.НомерСтроки = 0;
				КонецЕсли;
			КонецЦикла;
			
			// Удалим ненужные строки из таблицы.
			Количество = РезультатЧтения.ДокументыКИмпорту.Количество() - 1;
			Для Счетчик = 0 По Количество Цикл
				Если РезультатЧтения.ДокументыКИмпорту[Количество - Счетчик].НомерСтроки = 0 Тогда
					РезультатЧтения.ДокументыКИмпорту.Удалить(Количество - Счетчик);
				КонецЕсли;
			КонецЦикла;
			
			Возврат;
			
		ИначеЕсли Лев(ВРег(СокрЛП(Стр)), 20) = "1CCLIENTBANKEXCHANGE" Тогда
			
			Импорт_ПризнакОбмена = Истина;
			
		Иначе
			
			ЗагрузитьСтрокуЗаголовка(Стр, Импорт_ТекущаяСтрока, РезультатЧтения.Импорт_Заголовок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ НайденКонецФайла Тогда
		
		РезультатЧтения.Импорт_РасчетныеСчета.Очистить();
		РезультатЧтения.ДокументыКИмпорту.Очистить();
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Файл загрузки не соответствует стандарту (не найдена секция КонецФайла).'");
		
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора)
	
	Буфер = "";
	
	Пока ПустаяСтрока(Буфер)
	 ИЛИ Лев(Буфер, 2) = "//" Цикл
		
		Если Импорт_ТекущаяСтрока > Импорт_КоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
			
		Буфер = СокрЛП(СтрПолучитьСтроку(Импорт_ТекстДляРазбора, Импорт_ТекущаяСтрока));
		Импорт_ТекущаяСтрока = Импорт_ТекущаяСтрока + 1;
		
	КонецЦикла;
	
	Возврат Буфер;
	
КонецФункции

Функция РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение)
	
	ПозицияПрисваивания = СтрНайти(СтрокаРазбора, "=");
	
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = ВРЕГ(СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1)));
	
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат НЕ ПустаяСтрока(Тег);
	
КонецФункции

Функция ЗагрузитьСекциюДокумента(СтрокаДокумента, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора)
	
	Импорт_Загружаемые = СоздатьСоответствиеИзСтроки(ВРЕГ(
	   "Номер,Дата,Сумма,"
	 + "ВидПлатежа,ВидОплаты,Код,"
	 + "КвитанцияДата,КвитанцияВремя,КвитанцияСодержание,"
	 + "ДатаСписано,"
	 + "ДатаПоступило,"
	 + "ПлательщикСчет,Плательщик,ПлательщикИНН,Плательщик1,"
	 + "ПлательщикРасчСчет,ПлательщикБанк1,ПлательщикБанк2,ПлательщикБИК,ПлательщикКорсчет,"
	 + "Плательщик2,Плательщик3,Плательщик4,"
	 + "ПолучательСчет,Получатель,ПолучательИНН,Получатель1,"
	 + "ПолучательРасчСчет,ПолучательБанк1,ПолучательБанк2,ПолучательБИК,ПолучательКорсчет,"
	 + "Получатель2,Получатель3,Получатель4,"
	 + "СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования,ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа,"
	 + "НазначениеПлатежа,"
	 + "НазначениеПлатежа1,НазначениеПлатежа2,НазначениеПлатежа3,НазначениеПлатежа4,НазначениеПлатежа5,НазначениеПлатежа6,"
	 + "СрокПлатежа,Очередность,"
	 + "УсловиеОплаты1,УсловиеОплаты2,УсловиеОплаты3,"
	 + "СрокАкцепта,ВидАккредитива,ПлатежПоПредст,ДополнУсловия,НомерСчетаПоставщика,ДатаОтсылкиДок"));
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
	
	Пока Лев(ВРег(СокрЛП(СтрокаРазбора)), 14) <> "КОНЕЦДОКУМЕНТА" Цикл
		
		Значение = "";
		Тег = "";
		
		Если РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
			
			Если Импорт_Загружаемые[Тег] = Истина Тогда
				
				СтрокаДокумента[Тег] = Значение;
				
			Иначе
				
				Сообщение = Новый СообщениеПользователю;
						
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Неверный реквизит платежного документа, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, СтрокаРазбора);
									
				Сообщение.Сообщить();
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
						
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Нарушена структура платежного документа, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, СтрокаРазбора);
						
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую)
	
	НовоеСоответствие = Новый Соответствие;

	ПозицияРазделителя = СтрНайти(СтрокаЧерезЗапятую, ",");
	
	Пока ПозицияРазделителя > 0 Цикл
		
		ИмяТема = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НовоеСоответствие.Вставить(ИмяТема, Истина);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = СтрНайти(СтрокаЧерезЗапятую, ",");
		
	КонецЦикла;
	
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		
		НовоеСоответствие.Вставить(СтрокаЧерезЗапятую, Истина);
		
	КонецЕсли;
		
	Возврат НовоеСоответствие;
	
КонецФункции

Процедура РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, БанковскийСчет, Организация)
	
	ОперацияПоОплатеДСВДругуюОрганизацию = Ложь;
	
	НайденДокументСписания = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// 1) Определим вид платежа - входящий или исходящий.
	НазваниеДокумента   = СтрЗаменить(ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")), "Ё", "Е");
	ПлатежноеПоручение  = ВРЕГ(СтрЗаменить(СокрЛП(НазваниеДокумента), " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ"  ИЛИ ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ";
	ПлатежноеТребование = ВРЕГ(СтрЗаменить(СокрЛП(НазваниеДокумента), " ", "")) = "ПЛАТЕЖНОЕТРЕБОВАНИЕ" ИЛИ ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕТРЕБОВАНИЕ";
	ПлатежныйОрдер      = ВРЕГ(СтрЗаменить(СокрЛП(НазваниеДокумента), " ", "")) = "ПЛАТЕЖНЫЙОРДЕР" 		ИЛИ ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНЫЙОРДЕР";
	БанковскийОрдер     = ВРЕГ(СтрЗаменить(СокрЛП(НазваниеДокумента), " ", "")) = "БАНКОВСКИЙОРДЕР" 	ИЛИ ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "БАНКОВСКИЙОРДЕР";
	ИнкассовоеПоручение = ВРЕГ(СтрЗаменить(СокрЛП(НазваниеДокумента), " ", "")) = "ИНКАССОВОЕПОРУЧЕНИЕ" ИЛИ ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ИНКАССОВОЕПОРУЧЕНИЕ";
	МемориальныйОрдер   = ВРЕГ(СтрЗаменить(СокрЛП(НазваниеДокумента), " ", "")) = "МЕМОРИАЛЬНЫЙОРДЕР"   ИЛИ ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "МЕМОРИАЛЬНЫЙОРДЕР";
			
	Исходящий = (СокрЛП(СтрокаДокумента.ПлательщикСчет) = СокрЛП(БанковскийСчет.НомерСчета));
	
	ИмяДокумента = ?(Исходящий, НСтр("ru = 'Списание безналичных денежных средств'"), НСтр("ru = 'Поступление безналичных денежных средств'"));
	
	// 2) Определим вид документа в программе.
	Если ПлатежноеПоручение Тогда
		ВидДокумента = "ПлатежноеПоручение";
	ИначеЕсли ПлатежноеТребование Тогда
		ВидДокумента = "ПлатежноеТребование";
	ИначеЕсли ПлатежныйОрдер Тогда
		ВидДокумента = "ПлатежныйОрдер";
	ИначеЕсли БанковскийОрдер Тогда
		ВидДокумента = "БанковскийОрдер";
	ИначеЕсли ИнкассовоеПоручение Тогда
		ВидДокумента = "ИнкассовоеПоручение";
	ИначеЕсли МемориальныйОрдер Тогда 
		ВидДокумента = "МемориальныйОрдер";
	КонецЕсли;
		
	СтрокаДокумента.ИмяДокумента = ИмяДокумента;
	СтрокаДокумента.ВидДокумента = ВидДокумента;
		
	// 4) Найдем ранее загруженный (введенный вручную) документ.
	// Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.

	// Распознаем дату документа.
	ВсеРеквизитыПоискаЕсть = Ложь;
	ДокументНайден         = Ложь;
	ДатаДок                = Дата("00010101");
	
	Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.Дата);

	Если ЗначениеЗаполнено(Результат) Тогда
		
		СтрокаДокумента.ДатаДок = Результат;
		
		Если СтрокаДокумента.ВидДокумента = "ПлатежноеПоручение"
		 ИЛИ СтрокаДокумента.ВидДокумента = "ПлатежноеТребование"
		 ИЛИ СтрокаДокумента.ВидДокумента = "ПлатежныйОрдер"
		 ИЛИ СтрокаДокумента.ВидДокумента = "БанковскийОрдер"
		 ИЛИ СтрокаДокумента.ВидДокумента = "ИнкассовоеПоручение" 
		 ИЛИ СтрокаДокумента.ВидДокумента = "МемориальныйОрдер" Тогда
		
		 	Если НЕ ЕстьНеЦифры(СтрокаДокумента.Номер)
			 ИЛИ НЕ СтрокаДокумента.ВидДокумента = "ПлатежноеПоручение" Тогда
			 
				НомерДляПоискаДок = СтрокаДокумента.Номер;
				ВсеРеквизитыПоискаЕсть = Истина;
				
			Иначе
								
				Стр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Указан неправильный номер документа(%1).'"), СтрокаДокумента.Номер);
								
				ДобавитьЗамечание(СтрокаДокумента, 4, Стр);
				ВсеРеквизитыПоискаЕсть = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДокумента.НомерДок = СтрокаДокумента.Номер;
	
	Если ВсеРеквизитыПоискаЕсть Тогда
	
		// При наличии нескольких предпочтение отдается первому с совпадающим номером счета.
		ЗапросПоискаДокумента = Новый Запрос;
		
		Если ИмяДокумента = НСтр("ru = 'Поступление безналичных денежных средств'") Тогда
			
			ЗапросПоискаДокумента.Текст =
			"ВЫБРАТЬ
			|	ПоступлениеДенежныхСредств.Ссылка,
			|	ПоступлениеДенежныхСредств.Проведен,
			|	ПоступлениеДенежныхСредств.НомерВходящегоДокумента КАК Номер,
			|	ПоступлениеДенежныхСредств.Дата КАК Дата,
			|	БанковскиеСчетаКонтрагентов.НомерСчета КАК НомерСчета,
			|	ПоступлениеДенежныхСредств.Организация
			|ИЗ
			|	Документ._ДемоОперацииПоБанковскомуСчету КАК ПоступлениеДенежныхСредств
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчетаКонтрагентов
			|		ПО ПоступлениеДенежныхСредств.Контрагент = БанковскиеСчетаКонтрагентов.Владелец
			|ГДЕ
			|	НАЧАЛОПЕРИОДА(ПоступлениеДенежныхСредств.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаДок
			|	И ПоступлениеДенежныхСредств.СчетОрганизации = &БанковскийСчет
			|	И ПоступлениеДенежныхСредств.Организация = &Организация
			|	И ПоступлениеДенежныхСредств.НаправлениеПлатежа = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)";
			
		ИначеЕсли ИмяДокумента = НСтр("ru = 'Списание безналичных денежных средств'") Тогда
			
			ЗапросПоискаДокумента.Текст = "ВЫБРАТЬ
			|	СписаниеБезналичныхДенежныхСредств.Ссылка,
			|	СписаниеБезналичныхДенежныхСредств.Проведен,
			| СписаниеБезналичныхДенежныхСредств.НомерВходящегоДокумента КАК Номер,
			|	СписаниеБезналичныхДенежныхСредств.Дата КАК Дата,
			| СписаниеБезналичныхДенежныхСредств.СчетКонтрагента.НомерСчета КАК НомерСчета,
			| СписаниеБезналичныхДенежныхСредств.Организация
			|ИЗ
			|	Документ._ДемоОперацииПоБанковскомуСчету КАК СписаниеБезналичныхДенежныхСредств
			|ГДЕ
			|	НАЧАЛОПЕРИОДА(СписаниеБезналичныхДенежныхСредств.Дата, ДЕНЬ) = &ДатаДок
			|	И СписаниеБезналичныхДенежныхСредств.СчетОрганизации = &БанковскийСчет
			|	И СписаниеБезналичныхДенежныхСредств.НаправлениеПлатежа = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
			|	И СписаниеБезналичныхДенежныхСредств.Организация = &Организация";
			
		КонецЕсли;
		
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаДок", ДатаДок);
		ЗапросПоискаДокумента.УстановитьПараметр("Организация", Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
		Результат = ЗапросПоискаДокумента.Выполнить().Выбрать();
		
		Если Результат.Количество() = 0
			И ИмяДокумента = НСтр("ru = 'Поступление безналичных денежных средств'") Тогда
		
			ЗапросПоискаДокумента.Текст =
			"ВЫБРАТЬ
			|	ПоступлениеБезналичныхДенежныхСредств.Ссылка,
			|	ПоступлениеБезналичныхДенежныхСредств.Проведен,
			|	ПоступлениеБезналичныхДенежныхСредств.НомерВходящегоДокумента КАК Номер,
			|	ПоступлениеБезналичныхДенежныхСредств.Дата КАК Дата,
			|	ПоступлениеБезналичныхДенежныхСредств.СчетКонтрагента.НомерСчета КАК НомерСчета,
			|	ПоступлениеБезналичныхДенежныхСредств.Организация
			|ИЗ
			|	Документ._ДемоОперацииПоБанковскомуСчету КАК ПоступлениеБезналичныхДенежныхСредств
			|ГДЕ
			|	НАЧАЛОПЕРИОДА(ПоступлениеБезналичныхДенежныхСредств.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаДок
			|	И ПоступлениеБезналичныхДенежныхСредств.СчетОрганизации = &БанковскийСчет
			|	И ПоступлениеБезналичныхДенежныхСредств.Организация = &Организация
			|	И ПоступлениеБезналичныхДенежныхСредств.НаправлениеПлатежа = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)";
		
		КонецЕсли;
		
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаДок", ДатаДок);
		ЗапросПоискаДокумента.УстановитьПараметр("Организация", Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
		Результат = ЗапросПоискаДокумента.Выполнить().Выбрать();
						
		СчетДляПоискаДок = ?(Исходящий, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
		ДлинаНомера = СтрДлина(НомерДляПоискаДок);
		КоличествоДок = 0;
		
		Пока Результат.Следующий() Цикл
			
			ВыборкаНомер = Прав(СокрЛП(Результат.Номер), ДлинаНомера);
						
			Если ВыборкаНомер = НомерДляПоискаДок
			   И (НЕ ЗначениеЗаполнено(Результат.НомерСчета) ИЛИ Результат.НомерСчета = СчетДляПоискаДок) Тогда
				
				Если КоличествоДок = 0 Тогда
					СтрокаДокумента.Документ = Результат.Ссылка;
					СтрокаДокумента.Проведен = Результат.Проведен;
					СтрокаДокумента.НомерДок = Результат.Номер;
					СтрокаДокумента.ДатаДок  = Результат.Дата;
				КонецЕсли;
				
				КоличествоДок = КоличествоДок + 1;
				
			КонецЕсли;
		КонецЦикла;
		
		// Если документ уже есть в ИБ, то берем все данные из него.
		ДокументНайден = ЗначениеЗаполнено(СтрокаДокумента.Документ);
		
		Если ДокументНайден
		 И (ТипЗнч(СтрокаДокумента.Документ) = Тип("ДокументСсылка._ДемоОперацииПоБанковскомуСчету")) Тогда
			
			Документ = СтрокаДокумента.Документ; 
					
			СтрокаДокумента.СчетОрганизации = БанковскийСчет;
			СтрокаДокумента.Контрагент      = Документ.Контрагент;
						
		КонецЕсли;
		
	КонецЕсли;
	
	// 5) Определяем банковский счет организации.
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетОрганизации) Тогда
		СтрокаДокумента.СчетОрганизации = БанковскийСчет;
	КонецЕсли;
	
	// 6) Определяем банковский счет контрагента.
	Если Не ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
		
		ЗапросПоискаСчета = Новый Запрос;

		Если Исходящий Тогда
						
			СчетКонтрагента = СтрокаДокумента.ПолучательСчет;
			ИННКонтрагента = СтрокаДокумента.ПолучательИНН;
			КППКонтрагента = СтрокаДокумента.ПолучательКПП;
			Если СтрокаДокумента.Получатель1 <> "" Тогда
				ИмяКонтрагента = СтрокаДокумента.Получатель1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Получатель;
			КонецЕсли;
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПолучательСчет);
						
		Иначе
			
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПлательщикСчет);
			СчетКонтрагента = СтрокаДокумента.ПлательщикСчет;
			ИННКонтрагента = СтрокаДокумента.ПлательщикИНН;
			КППКонтрагента = СтрокаДокумента.ПлательщикКПП;
			Если СтрокаДокумента.Плательщик1 <> "" Тогда
				ИмяКонтрагента = СтрокаДокумента.Плательщик1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Плательщик;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗапросПоискаСчета.УстановитьПараметр("ИННКонтрагента", ИННКонтрагента);
		
		ЗапросПоискаСчета.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БанковскиеСчета.Владелец,
			|	БанковскиеСчета.Ссылка,
			|	БанковскиеСчета.НомерСчета
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец.ИНН = &ИННКонтрагента
			|	И БанковскиеСчета.НомерСчета = &НомерСчета";
			
		ВыборкаПоиска = ЗапросПоискаСчета.Выполнить().Выбрать();
		
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			
		Если ВыборкаПоиска.Следующий() Тогда
			
			СтрокаДокумента.СчетКонтрагента = ВыборкаПоиска.Ссылка;
			Контрагент = ВыборкаПоиска.Владелец;
			
		Иначе
			ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не найден счет контрагента (%1).'"), СчетКонтрагента);
			ДобавитьЗамечание(СтрокаДокумента, 2, ТекстЗамечания);
			
			СтрокаДокумента.СчетКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не найден (%1)'"), СчетКонтрагента);
		КонецЕсли;
		
		Если ВыборкаПоиска.Количество() > 1 Тогда
			ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В информационной базе найдено несколько (%1) одинаковых банковских счетов.'"),
				ВыборкаПоиска.Количество());
			ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечания);
		КонецЕсли;
	КонецЕсли;
	
	// Проверка на корректность БИКа плательщика/получателя.
	Если ЗначениеЗаполнено(СтрокаДокумента.ПлательщикБИК) Тогда
		
		Длина = СтрДлина(СтрокаДокумента.ПлательщикБИК);
		
		Если (Длина = 9 И Лев(СтрокаДокумента.ПлательщикБИК, 2) <> "04")
		 ИЛИ (Длина = 8 И Лев(СтрокаДокумента.ПлательщикБИК, 1) <> "4")
		 ИЛИ (Длина < 8) Тогда
			ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Некорректный БИК (%1) плательщика.'"), СтрокаДокумента.ПлательщикБИК);
			ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечания);
		ИначеЕсли Длина = 8 Тогда
			СтрокаДокумента.ПлательщикБИК = "0" + СтрокаДокумента.ПлательщикБИК;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.ПолучательБИК) Тогда
		
		Длина = СтрДлина(СтрокаДокумента.ПолучательБИК);
		
		Если (Длина = 9 И Лев(СтрокаДокумента.ПолучательБИК, 2) <> "04")
		 ИЛИ (Длина = 8 И Лев(СтрокаДокумента.ПолучательБИК, 1) <> "4")
		 ИЛИ (Длина < 8) Тогда
			ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Некорректный БИК (%1) получателя.'"), СтрокаДокумента.ПолучательБИК);
			ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечания);
		ИначеЕсли Длина = 8 Тогда
			СтрокаДокумента.ПолучательБИК = "0" + СтрокаДокумента.ПолучательБИК;
		КонецЕсли;
		
	КонецЕсли;
		
	// 7) Определим контрагента.
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			СтрокаДокумента.Контрагент = Контрагент;
			
		ИначеЕсли НЕ ПустаяСтрока(ИННКонтрагента) Тогда
			
			СтрокаДокумента.Контрагент = Контрагент;
			
			ЗапросПоискаКонтрагента = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
													|	Контрагенты.Ссылка,
													|	Контрагенты.ИНН,
													|	Контрагенты.Наименование,
													|	Контрагенты.КПП
													|ИЗ
													|	Справочник.Организации КАК Контрагенты
													|ГДЕ
													|	Контрагенты.ИНН = &КонтрагентИНН");
			ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентИНН", ИННКонтрагента);
			ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выгрузить();
								
			Если (ВыборкаПоиска.Количество() = 0)
			 И НЕ НайденДокументСписания Тогда
				
				ЗапросПоискаКонтрагента = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
				                                       |	Контрагенты.Ссылка,
				                                       |	Контрагенты.ИНН,
				                                       |	Контрагенты.Наименование,
				                                       |	Контрагенты.КПП
				                                       |ИЗ
				                                       |	Справочник.Контрагенты КАК Контрагенты
				                                       |ГДЕ
				                                       |	Контрагенты.ИНН = &КонтрагентИНН");
				ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентИНН", ИННКонтрагента);
				ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выгрузить();
				
			КонецЕсли;
						
			// Ищем контрагента по ИНН, если указан КПП, то и по нему.
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ИНН", ИННКонтрагента);
			Если Не ПустаяСтрока(КППКонтрагента)Тогда
				ПараметрыОтбора.Вставить("КПП", КППКонтрагента);
			КонецЕсли;
			НайденныеКонтрагенты = ВыборкаПоиска.НайтиСтроки(ПараметрыОтбора);
			
			// Если не нашли по ИНН и по КПП, то попробуем поискать только по ИНН.
			Если НайденныеКонтрагенты.Количество() = 0
			   И НЕ ПустаяСтрока(КППКонтрагента) Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИНН", ИННКонтрагента);
				НайденныеКонтрагенты = ВыборкаПоиска.НайтиСтроки(ПараметрыОтбора);
			КонецЕсли;
			
			Если НайденныеКонтрагенты.Количество() > 0 Тогда
				
				СтрокаДокумента.Контрагент = НайденныеКонтрагенты[0].Ссылка;
				
			КонецЕсли;
			
			Если НайденныеКонтрагенты.Количество() > 1 Тогда
				ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В информационной базе найдено несколько (%1) контрагентов с одинаковым ИНН.'"),
					НайденныеКонтрагенты.Количество());
				ДобавитьЗамечание(СтрокаДокумента, 2, ТекстЗамечания);
			ИначеЕсли НайденныеКонтрагенты.Количество() = 0 Тогда
				ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не найден контрагент (%1, ИНН %2).'"), ИмяКонтрагента, ИННКонтрагента);
				ДобавитьЗамечание(СтрокаДокумента, 2, ТекстЗамечания);
				СтрокаДокумента.Контрагент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не найден (%1, ИНН %2)'"), ИмяКонтрагента, ИННКонтрагента);
			КонецЕсли;
			
		Иначе
			
			ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru='Не указан ИНН контрагента.'"));
			СтрокаДокумента.Контрагент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не найден (%1, не указан ИНН)'"), ИмяКонтрагента);
				
		КонецЕсли;
		
	КонецЕсли;
		
	// 11) Определим сумму.
	
	// Преобразуем из строки в число.
	Буфер = СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", ""));
	
	Если НЕ ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(Буфер, ".", ""), "-", ""), ",", "")) Тогда
		
		Если ПустаяСтрока(Буфер) Тогда
			Сумма = 0;
		Иначе
			Сумма = Число(Буфер);
		КонецЕсли;

		
		Если Сумма < 0 Тогда
			Сумма = - Сумма;
		КонецЕсли;
		
		СтрокаДокумента.СуммаДокумента = Сумма;
		Если Исходящий Тогда
			СтрокаДокумента.СуммаСписано = Сумма;
		Иначе
			СтрокаДокумента.СуммаПоступило = Сумма;
		КонецЕсли;
		
	Иначе
		
		ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Указана неверная сумма документа (%1).'"), Буфер);
		ДобавитьЗамечание(СтрокаДокумента, 4, ТекстЗамечания);
		
	КонецЕсли;
		
	// 12) ДатаСписано и ДатаПоступило, ДатаПроведения
	// Преобразуем в дату из строки, если не пустая.
	Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаСписано) Тогда
		
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Списано, СтрокаДокумента.ДатаСписано);
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Списано = Дата("00010101");
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
		КонецЕсли;
		
	Иначе
		
		СтрокаДокумента.Списано = Дата("00010101");
		
	КонецЕсли;
	
	// Преобразуем в дату из строки, если не пустая.
	Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаПоступило) Тогда
		
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Поступило, СтрокаДокумента.ДатаПоступило);
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Поступило = Дата("00010101");
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
		КонецЕсли;
		
	Иначе
		
		СтрокаДокумента.Поступило = Дата("00010101");
		
	КонецЕсли;
	
	// 13) Определим очередность платежа
	
	// Преобразуем из строки в число
	Буфер = СокрЛП(СтрокаДокумента.Очередность);
	Если Буфер <> "" И НЕ ЕстьНеЦифры(Буфер) Тогда
		СтрокаДокумента.ОчередностьПлатежа = Число(Буфер);
	Иначе
		СтрокаДокумента.ОчередностьПлатежа = 0;
	КонецЕсли;
			
КонецПроцедуры

Функция ЗагрузитьСекциюРасчетныеСчета(СтрокаРССчета, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора)
	
	СтрокаТегов = ВРЕГ("ДатаНачала,ДатаКонца,РасчСчет,НачальныйОстаток,ВсегоПоступило,ВсегоСписано,КонечныйОстаток,КонецРасчСчет");
	ТегиРасчетногоСчета = СоздатьСоответствиеИзСтроки(СтрокаТегов);
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
	
	Значение = "";
	Тег = "";
	
	Пока РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Цикл
		
		Если ТегиРасчетногоСчета[Тег] = Истина Тогда
			
			СтрокаРССчета[Тег] = Значение;
			
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
						
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Неверный реквизит в секции описания расчетного счета, строка %1 : %2'"),
				Импорт_ТекущаяСтрока - 1,
				СтрокаРазбора);
						
			Сообщение.Сообщить();
						
			Возврат Ложь;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
		
		Значение = "";
		Тег = "";
		
	КонецЦикла;
	
	Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьНаПустоеЗначениеИмпорта(СтрокаИмпорта, ИмяСвойства, ПредставлениеСвойства)
	
	ИмпортНеПустые_ПлатежноеПоручение = СоздатьСоответствиеИзСтроки(
	"Номер,Дата,Сумма,ПлательщикСчет,ПлательщикИНН,ПолучательСчет,ПолучательИНН");
	
	// По наличию статуса составителя определяется, что платеж налоговый.
	ИмпортНеПустые_ПлатежноеПоручениеБюджет = СоздатьСоответствиеИзСтроки(
	"Номер,Дата,Сумма,ПлательщикСчет,ПлательщикИНН,ПолучательСчет,ПолучательИНН,"
	+ "СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования,"
	+ "ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа");
	
	Импорт_НеПустые = Новый Массив;
	
	Импорт_НеПустые.Добавить(ИмпортНеПустые_ПлатежноеПоручение);
	Импорт_НеПустые.Добавить(ИмпортНеПустые_ПлатежноеПоручениеБюджет);
	
	ВариантНеПустых = ПолучитьВариантНеПустых(СтрокаИмпорта.ТипДокумента);
	Если Импорт_НеПустые[ВариантНеПустых][ИмяСвойства] = Истина Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаИмпорта[ИмяСвойства]) Тогда
						
			Стр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не заполнен реквизит ""%1"".'"),
																		  ПредставлениеСвойства);
						
			ДобавитьЗамечание(СтрокаИмпорта, 3, Стр);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокНеНайденных(СтрокаДокумента, БанковскийСчет, ТаблицаКонтрагентов)

	НайденКонтрагент = ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка");
	НайденСчет       = ТипЗнч(СтрокаДокумента.СчетКонтрагента) <> Тип("Строка");
		
	ТипКонтрагента = ?(СокрЛП(СтрокаДокумента.ПлательщикСчет) = СокрЛП(БанковскийСчет.НомерСчета),
					   "ПОЛУЧАТЕЛЬ",
					   "ПЛАТЕЛЬЩИК");
					   
	НайденнаяЗаписьОКонтрагенте = НайтиЭлементДерева(ТаблицаКонтрагентов.Строки,
													 "Значение",
													 СтрокаДокумента[ТипКонтрагента + "ИНН"]);
	
	// Контрагент
	Если НайденнаяЗаписьОКонтрагенте = Неопределено Тогда
		                                                            
		НовыйКонтрагент = ТаблицаКонтрагентов.Строки.Добавить();
		
		Окончание = ?(СтрокаДокумента[ТипКонтрагента + "1"] = "", "", "1");
		
		НовыйКонтрагент.Представление = СтрокаДокумента[ТипКонтрагента + Окончание];
		НовыйКонтрагент.НомСтроки     = СтрокаДокумента.НомерСтроки;
	
		ДобавитьОписаниеНовогоРеквизита("Наименование",
										Окончание,
										ТипКонтрагента,
										НовыйКонтрагент.Строки,
										СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("ИНН",
										"ИНН",
										ТипКонтрагента,
										НовыйКонтрагент.Строки,
										СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("КПП",
										"КПП",
										ТипКонтрагента,
										НовыйКонтрагент.Строки,
										СтрокаДокумента);
				
		Если НайденКонтрагент Тогда
			НовыйКонтрагент.Реквизит = СтрокаДокумента.Контрагент;
		КонецЕсли;

	Иначе
		
		НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте.Родитель;
		
		Если НовыйКонтрагент = Неопределено Тогда
			НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте;
		КонецЕсли;
			
	КонецЕсли;
	
	НайденныеСтроки = НайтиЭлементДерева(ТаблицаКонтрагентов.Строки,
										 "Значение",
										 СтрокаДокумента[ТипКонтрагента + "СЧЕТ"]);
	
	Если НЕ НайденСчет И НайденныеСтроки = Неопределено Тогда
			
		РеквизитыНовогоКонтрагента = ДобавитьОписаниеНовогоРеквизита("Р/счет",
																	 "СЧЕТ",
																	 ТипКонтрагента,
																	 НовыйКонтрагент.Строки,
																	 СтрокаДокумента);
				
		ПрямыеРасчеты = ПустаяСтрока(СтрокаДокумента[ТипКонтрагента + "2"]);
		
		Если ПрямыеРасчеты Тогда
			
			ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'Банк'"),
											"БАНК1",
											ТипКонтрагента,
											РеквизитыНовогоКонтрагента.Строки,
											СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'Город банка'"),
											"БАНК2",
											ТипКонтрагента,
											РеквизитыНовогоКонтрагента.Строки,
											СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'Код банка'"),
											"БИК",
											ТипКонтрагента,
											РеквизитыНовогоКонтрагента.Строки,
											СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'Кор. счет банка'"),
											"КОРСЧЕТ",
											ТипКонтрагента,
											РеквизитыНовогоКонтрагента.Строки,
											СтрокаДокумента);
			
		Иначе
			
			ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'Банк'"),
											"3",
											ТипКонтрагента,
											РеквизитыНовогоКонтрагента.Строки,
											СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'Город банка'"),
											"4",
											ТипКонтрагента,
											РеквизитыНовогоКонтрагента.Строки,
											СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'Кор. счет банка'"),
											"РАСЧСЧЕТ",
											ТипКонтрагента,
											РеквизитыНовогоКонтрагента.Строки,
											СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'РЦ банка'"),
											"БАНК1",
											ТипКонтрагента,
											РеквизитыНовогоКонтрагента.Строки,
											СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'Местонахождение РЦ банка'"),
											"БАНК2",
											ТипКонтрагента,
											РеквизитыНовогоКонтрагента.Строки,
											СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'Код РЦ банка'"),
											"БИК",
											ТипКонтрагента,
											РеквизитыНовогоКонтрагента.Строки,
											СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'Кор. счет РЦ банка'"),
											"КОРСЧЕТ",
											ТипКонтрагента,
											РеквизитыНовогоКонтрагента.Строки,
											СтрокаДокумента);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьСтрокуЗаголовка(ТекстСтрокиЗаголовка, Импорт_ТекущаяСтрока, Импорт_Заголовок)
	
	СтрокаТегов = ВРЕГ("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца");
	ТегиЗаголовка = СоздатьСоответствиеИзСтроки(СтрокаТегов);
	
	Если ТипЗнч(Импорт_Заголовок) = Тип("Неопределено") Тогда
		Импорт_Заголовок = Новый Структура(СтрокаТегов);
	КонецЕсли;
	
	Значение = "";
	Тег = "";
	РазобратьТеговуюСтроку(ТекстСтрокиЗаголовка, Тег, Значение);
	
	Если ТегиЗаголовка[Тег] = Истина Тогда
		
		Импорт_Заголовок[Тег] = Значение;
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Неверный реквизит заголовка, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, ТекстСтрокиЗаголовка);
					
		Сообщение.Сообщить();
		
	КонецЕсли;
		
КонецФункции

Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания);
	
КонецПроцедуры

Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)

	Если ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьВСтроку(Буфер, НоваяСтрока)
	
	Если ПустаяСтрока(Буфер) Тогда
		
		Буфер = НоваяСтрока;
		
	Иначе
		
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВариантНеПустых(ТипДокумента)
	
	Если ТипДокумента < 3
	 ИЛИ ТипДокумента = 11
	 ИЛИ ТипДокумента = 12 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

Функция ДобавитьОписаниеНовогоРеквизита(Представление, Реквизит, ТипКонтрагента, НовыйКонтрагент, СтрокаДокумента)

	РеквизитыНовогоКонтрагента = НовыйКонтрагент.Добавить();
		
	РеквизитыНовогоКонтрагента.Представление = Представление;
	РеквизитыНовогоКонтрагента.Значение      = СтрокаДокумента[ТипКонтрагента + Реквизит];
	РеквизитыНовогоКонтрагента.Реквизит      = ТипКонтрагента + Реквизит;
	
    Возврат РеквизитыНовогоКонтрагента;
	
КонецФункции


#КонецОбласти

#Область СозданиеДокументов

Процедура ЗагрузитьДокументы(ДанныеДляЗагрузки)
	
	Импорт_Заголовок = ДанныеДляЗагрузки.Импорт_Заголовок;
	ДокументыКИмпорту = ДанныеДляЗагрузки.ДокументыКИмпорту;
	БанковскийСчет = ДанныеДляЗагрузки.БанковскийСчет;
	Организация = БанковскийСчет.Владелец;
	
	НачалоИнтервалаЗагрузки = Дата("00010101");
	КонецИнтервалаЗагрузки  = Дата("00010101");
		
	Результат = ПолучитьДатуИзСтроки(НачалоИнтервалаЗагрузки, Импорт_Заголовок.ДатаНачала);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = 
			НСтр("ru='В заголовке файла загрузки неверно указана дата начала интервала. Файл не может быть загружен.'");
		
		Сообщение.Сообщить();
				
		Возврат;
		
	КонецЕсли;
	
	Результат = ПолучитьДатуИзСтроки(КонецИнтервалаЗагрузки, Импорт_Заголовок.ДатаКонца);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
			
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='В заголовке файла импорта неверно указана дата окончания интервала.'");
		
		Сообщение.Сообщить();
				
	КонецЕсли;
	
	// Загружаем отмеченные секции документов.
	Для Каждого СтрокаСекции Из ДокументыКИмпорту Цикл
		
		Если СтрокаСекции.Загружать Тогда
			
			РезультатПроверки = ПроверитьДокументДляЗагрузки(СтрокаСекции);
			
			Если ПустаяСтрока(РезультатПроверки) Тогда
				
				
				
				Если Не ЗначениеЗаполнено(СтрокаСекции.Списано) И НЕ ЗначениеЗаполнено(СтрокаСекции.Поступило) Тогда
					Если СокрЛП(СтрокаСекции.ПлательщикСчет) = СокрЛП(БанковскийСчет.НомерСчета) Тогда
						СтрокаСекции.Списано        = СтрокаСекции.ДатаДок;
						СтрокаСекции.ДатаПроведения = СтрокаСекции.Списано;
					Иначе
						СтрокаСекции.Поступило      = СтрокаСекции.ДатаДок;
						СтрокаСекции.ДатаПроведения = СтрокаСекции.Поступило;
					КонецЕсли;
					
					Сообщение = Новый СообщениеПользователю;
					
					ТекстСообщения = НСтр("ru='В загружаемом файле не указана дата списания/поступления средств (реквизит ДатаСписано/ДатаПоступило) для платежного документа ""%1"" №%2 от %3.'");
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
																							  СтрокаСекции.Операция,
																							  СтрокаСекции.Номер,
																							  СтрокаСекции.ДатаДок);
						
					Сообщение.Сообщить();
				
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
					ОбъектДокумента = Документы._ДемоОперацииПоБанковскомуСчету.СоздатьДокумент();
				Иначе
					// В ИБ найден документ, необходимо получить его объект.
					ОбъектДокумента = СтрокаСекции.Документ.ПолучитьОбъект();
				КонецЕсли;
				
				ЭтоНовыйДокумент = ОбъектДокумента.ЭтоНовый();
				
				// Заполняем все реквизиты документа.
				Если ЗначениеЗаполнено(СтрокаСекции.Списано) Тогда
					
					ЗаполнитьРеквизитыДокументаСписаниеБезналичныхДенежныхСредств(
						ОбъектДокумента, ОбъектДокумента.Метаданные().Имя, СтрокаСекции, ЭтоНовыйДокумент, Организация);
					
				ИначеЕсли ЗначениеЗаполнено(СтрокаСекции.Поступило) Тогда
					
					ЗаполнитьРеквизитыДокументаПоступлениеБезналичныхДенежныхСредств(
						ОбъектДокумента, ОбъектДокумента.Метаданные().Имя, СтрокаСекции, ЭтоНовыйДокумент, Организация);
					
				КонецЕсли;

				Если ОбъектДокумента.ПометкаУдаления Тогда
					ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь);
				КонецЕсли;
				
				ЗаписатьОбъект(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент);
					
				Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
					
					Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
						
						СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
						СтрокаСекции.НомерДок = ОбъектДокумента["Номер"];
						
					КонецЕсли;
					
				КонецЕсли;
	
			Иначе
	
				Сообщение = Новый СообщениеПользователю;
								
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Платежный документ ""%1"" №%2 от %3 не может быть загружен:%4%5.'"),
					СтрокаСекции.Операция,
					СтрокаСекции.Номер,
					СтрокаСекции.Дата,
					Символы.ПС,
					РезультатПроверки);

				Сообщение.Сообщить();
				
			КонецЕсли;
	
		КонецЕсли;

	КонецЦикла;
	
	Сообщение = Новый СообщениеПользователю;
								
	Сообщение.Текст = НСтр("ru='Загрузка платежных документов в информационную базу завершена.'");
										
	Сообщение.Сообщить();
	
КонецПроцедуры

Процедура ЗаписатьОбъект(ОбъектДляЗаписи, СтрокаСекции, ЭтоНовыйДокумент)
	
	ТипДокумента = ОбъектДляЗаписи.Метаданные().Имя;
	
	Если ТипДокумента = "_ДемоПоступлениеБезналичныхДенежныхСредств" Тогда
		ИмяДокумента = НСтр("ru = 'Поступление безналичных денежных средств'");
	ИначеЕсли ТипДокумента = "_ДемоСписаниеБезналичныхДенежныхСредств" Тогда
		ИмяДокумента = НСтр("ru = 'Списание безналичных денежных средств'");
	КонецЕсли;

	Проводить = Истина;
						
	ОбъектМодифицирован = ОбъектДляЗаписи.Модифицированность();
	ОбъектПроведен = ОбъектДляЗаписи.Проведен;
	
	Если ОбъектМодифицирован Тогда
		
		Попытка
			
			Если ОбъектПроведен Тогда
				
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
				
			Иначе
				
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЕсли;
			
			Если ЭтоНовыйДокумент Тогда
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1%2.'"), ?(ЭтоНовыйДокумент, "Создан ", "Перезаписан "), ПолучитьНазваниеОбъекта(ОбъектДляЗаписи));
				
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		Исключение
			
			НазваниеОбъекта = ПолучитьНазваниеОбъекта(ОбъектДляЗаписи);
			
			// Запись события в журнал регистрации для системного администратора.
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись документа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
									 УровеньЖурналаРегистрации.Ошибка, ,
									 ВРег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2),
									 ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Сообщение = Новый СообщениеПользователю;
						
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1%2. Произошли ошибки при записи.'"),
				ВРег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2),
				" " + ?(ЭтоНовыйДокумент, НСтр("ru = 'не создан'"), НСтр("ru = 'не записан'")));
						
			Сообщение.Сообщить();
			
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	НазваниеОбъекта = ПолучитьНазваниеОбъекта(ОбъектДляЗаписи);

	Если Проводить
		И (ОбъектМодифицирован ИЛИ НЕ ОбъектПроведен) Тогда
	
		Если ОбъектДляЗаписи.ПроверитьЗаполнение() Тогда
		
			Попытка
			
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
			
				Если НЕ ОбъектПроведен Тогда
				
					Сообщение = Новый СообщениеПользователю;
					
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1%2'"), ?(ОбъектПроведен, "Перепроведен ", "Проведен "), НазваниеОбъекта);
				
					Сообщение.Сообщить();
				
				КонецЕсли;
			
				СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
			
			Исключение
			
				Сообщение = Новый СообщениеПользователю;
			
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1 не проведен. Произошли ошибки при проведении.'"),
					ВРег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2));
			
				Сообщение.Сообщить();
			
			КонецПопытки
		
		Иначе
	
			Сообщение = Новый СообщениеПользователю;
		
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 не проведен. Произошли ошибки при проведении.'"),
				ВРег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2));
		
			Сообщение.Сообщить();
		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьДокументДляЗагрузки(СтруктураДокумента)
	
	Результат = "";
	
	Если СтруктураДокумента.Готовность > 3 Тогда
		Результат = СтруктураДокумента.ОписаниеОшибок;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьРеквизитыДокументаСписаниеБезналичныхДенежныхСредств(ОбъектДокумента, ТипДокумента, СтрокаСекции, ЭтоНовыйДокумент, Организация)
	
	// Организация, дата, номер.
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация, ЭтоНовыйДокумент);
		
	Если ЭтоНовыйДокумент Тогда
		УстановитьСвойство(ОбъектДокумента, "Дата", КонецДня(СтрокаСекции.ДатаДок), ЭтоНовыйДокумент);
	КонецЕсли;
	
	УстановитьСвойство(ОбъектДокумента, "Контрагент", СтрокаСекции.Контрагент, ЭтоНовыйДокумент);
			
	УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", СтрокаСекции.СчетКонтрагента, ЭтоНовыйДокумент);
			
	// СчетОрганизации, Валюта.
	Если ТипЗнч(СтрокаСекции.Контрагент) = Тип("СправочникСсылка.Организации")
	   И ТипЗнч(СтрокаСекции.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", СтрокаСекции.СчетКонтрагента, ЭтоНовыйДокумент);
		
	Иначе
		
		УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", СтрокаСекции.СчетОрганизации, ЭтоНовыйДокумент);
		
	КонецЕсли;
		
	// СуммаДокумента.
	УстановитьСвойство(ОбъектДокумента, "Списание", СтрокаСекции.СуммаДокумента, ЭтоНовыйДокумент, Истина);
	
	// ДатаВходящегоДокумента.
	УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", СтрокаСекции.ДатаДок, ЭтоНовыйДокумент);
	
	// НомерВходящегоДокумента.
	УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", СтрокаСекции.НомерДок, ЭтоНовыйДокумент);
		
	// НазначениеПлатежа.
	Если ЗначениеЗаполнено(СтрокаСекции.НазначениеПлатежа1) Тогда
		
		НазначениеПлатежа = СтрокаСекции.НазначениеПлатежа1;
		
		Для Счетчик = 2 По 6 Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаСекции["НазначениеПлатежа" + Счетчик]) Тогда
				Прервать;
			КонецЕсли;
			
			НазначениеПлатежа = НазначениеПлатежа + Символы.ПС + СтрокаСекции["НазначениеПлатежа" + Счетчик];
			
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаСекции.НазначениеПлатежа) Тогда
		
		НазначениеПлатежа = СтрокаСекции.НазначениеПлатежа;	
		
		НазначениеПлатежа = СтрЗаменить(СтрЗаменить(СтрЗаменить(НазначениеПлатежа, Символы.ПС, ""), Символы.ВК, ""),
										Символы.ПФ,
										"");
		
	Иначе
		
		НазначениеПлатежа = "";
		
	КонецЕсли;
		
	УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, ЭтоНовыйДокумент, Истина);
	
	УстановитьСвойство(
		ОбъектДокумента, "НаправлениеПлатежа", Перечисления.НаправленияЭД.Исходящий, ЭтоНовыйДокумент, Истина);
	
	Если ОбъектДокумента.ЭтоНовый() Тогда
		
		ОбъектДокумента.УстановитьНовыйНомер();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументаПоступлениеБезналичныхДенежныхСредств(ОбъектДокумента,
																		   ТипДокумента,
																		   СтрокаСекции,
																		   ЭтоНовыйДокумент,
																		   Организация)
	
	// Организация, дата, номер.
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация, ЭтоНовыйДокумент);
	
	Если ЭтоНовыйДокумент Тогда

		ДатаДокумента = Дата("00010101");
		УстановитьСвойство(ОбъектДокумента,
						   "Дата",
						   КонецДня(ПолучитьДатуИзСтроки(ДатаДокумента, СтрокаСекции.ДатаПоступило)),
						   ЭтоНовыйДокумент);

	КонецЕсли;
		
	// Контрагент
	УстановитьСвойство(ОбъектДокумента, "Контрагент", СтрокаСекции.Контрагент, ЭтоНовыйДокумент);
			
	// СчетОрганизации.
	УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", СтрокаСекции.СчетОрганизации, ЭтоНовыйДокумент);

	// СчетКонтрагента.
	УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", СтрокаСекции.СчетКонтрагента, ЭтоНовыйДокумент);
	
	// СуммаДокумента.
	УстановитьСвойство(ОбъектДокумента, "Поступление", СтрокаСекции.СуммаДокумента, ЭтоНовыйДокумент, Истина);
		
	// ДатаВходящегоДокумента.
	УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", СтрокаСекции.ДатаДок, ЭтоНовыйДокумент);
	
	// НомерВходящегоДокумента.
	УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", СтрокаСекции.НомерДок, ЭтоНовыйДокумент);
	
	// НазначениеПлатежа.
	Если ЗначениеЗаполнено(СтрокаСекции.НазначениеПлатежа1) Тогда
		
		НазначениеПлатежа = СтрокаСекции.НазначениеПлатежа1;
		
		Для Счетчик = 2 По 6 Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаСекции["НазначениеПлатежа" + Счетчик]) Тогда
				Прервать;
			КонецЕсли;
			
			НазначениеПлатежа = НазначениеПлатежа + Символы.ПС + СтрокаСекции["НазначениеПлатежа" + Счетчик];
			
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаСекции.НазначениеПлатежа) Тогда
		
		НазначениеПлатежа = СтрокаСекции.НазначениеПлатежа;	
		
		НазначениеПлатежа = СтрЗаменить(СтрЗаменить(СтрЗаменить(НазначениеПлатежа, Символы.ПС, ""), Символы.ВК, ""),
										Символы.ПФ,
										"");
		
	Иначе
		
		НазначениеПлатежа = "";
		
	КонецЕсли;
		
	УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, ЭтоНовыйДокумент, Истина);
	
	УстановитьСвойство(ОбъектДокумента, "НаправлениеПлатежа", Перечисления.НаправленияЭД.Входящий, ЭтоНовыйДокумент, Истина);
	
	Если ОбъектДокумента.ЭтоНовый() Тогда
		
		ОбъектДокумента.УстановитьНовыйНомер();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗадатьПометкуНаУдаление(ОбъектДляПометки, Пометка)
	
	НазваниеОбъекта = ПолучитьНазваниеОбъекта(ОбъектДляПометки);
	НазваниеДействия = " " + ?(Пометка, НСтр("ru = 'помечен на удаление'"), НСтр("ru = 'отменена пометка на удаление'"));
		
	Попытка
		
		ОбъектДляПометки.Записать(РежимЗаписиДокумента.Запись);
		ОбъектДляПометки.УстановитьПометкуУдаления(Пометка);
		
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1:%2.'"), ВРег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2), НазваниеДействия);
						
		Сообщение.Сообщить();
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: не %2. Произошли ошибки при записи.'"), ВРег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2), НазваниеДействия);
								
		Сообщение.Сообщить();
		
	КонецПопытки
	
КонецПроцедуры

Функция ПолучитьНазваниеОбъекта(Объект)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект._ДемоОперацииПоБанковскомуСчету") Тогда
		Шаблон = НСтр("ru='документ ""Операция по банковскому счету"" № %1 от %2'");
		
		НазваниеОбъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СокрЛП(Объект.Номер), Объект.Дата);
		
	Иначе
		
		НазваниеОбъекта = НСтр("ru='объект'");
		
	КонецЕсли;
	
	Возврат НазваниеОбъекта;
	
КонецФункции

#КонецОбласти

#Область СозданиеКонтрагентов

Процедура СоздатьНовогоКонтрагента(ТаблицаКонтрагентов)
	
	Для Каждого Элемент Из ТаблицаКонтрагентов.Строки Цикл
							
		СоздатьКонтрагента(Элемент);
				
	КонецЦикла;
			
КонецПроцедуры

Функция СоздатьКонтрагента(СтрокаКонтрагент = Неопределено)
	
	СообщатьОСозданномКонтрагенте 	  = Ложь;
	СообщатьОСозданномБанковскомСчете = Ложь;
	
	// Эти элементы есть у всех справочников.
	Если НЕ ТипЗнч(СтрокаКонтрагент.Реквизит) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
		
		НовыйЭлемент.Наименование       = СтрокаКонтрагент.Представление;
		НовыйЭлемент.НаименованиеПолное = СтрокаКонтрагент.Представление;
		НовыйЭлемент.ИНН                = СтрокаКонтрагент.Строки[1].Значение;
		Если Не СтрокаКонтрагент.Строки[2].Значение = "0" Тогда
			НовыйЭлемент.КПП            = СтрокаКонтрагент.Строки[2].Значение;
		КонецЕсли;
		
		Если СтрДлина(НовыйЭлемент.ИНН) = 10 Тогда
			НовыйЭлемент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		Иначе
			НовыйЭлемент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		КонецЕсли;
		
		НовыйЭлемент.Записать();
		
		СообщатьОСозданномКонтрагенте = Истина;
		
	Иначе
		
		НовыйЭлемент = СтрокаКонтрагент.Реквизит.ПолучитьОбъект();
		
	КонецЕсли;
	
	Если СообщатьОСозданномКонтрагенте Тогда
		
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Контрагент (%1) создан.'"),
																				  СтрокаКонтрагент.Представление);
				
		Сообщение.Сообщить();
		
		ПредставлениеКонтрагента = "" + Символы.Таб + "- ";
		
	Иначе
		
		ПредставлениеКонтрагента = "Контрагенту (" + СтрокаКонтрагент.Представление + ")";
		
	КонецЕсли;
	
	Для Каждого Строка Из СтрокаКонтрагент.Строки Цикл
		
		СообщатьОСозданномБанковскомСчете = Ложь;
		
		Если Строка.Представление = "Р/счет" Тогда
			
			Попытка
				
				НомерСчета = Строка.Значение;
				
				НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
				
				НовыйСчет.НомерСчета            = НомерСчета;
				НовыйСчет.Владелец              = НовыйЭлемент.Ссылка;
								
				РССчет = Строка.Строки;
						
				// Банк контрагента.
				НовыйБанк = НайтиБанк(РССчет[0].Значение, РССчет[1].Значение, РССчет[2].Значение, РССчет[3].Значение);
				
				Если НовыйБанк = Справочники.КлассификаторБанков.ПустаяСсылка() Тогда
					
					НовыйБанк = Справочники.КлассификаторБанков.СоздатьЭлемент();
					
					НовыйБанк.Наименование = РССчет[0].Значение;
					НовыйБанк.Город        = РССчет[1].Значение;
					НовыйБанк.Код          = РССчет[2].Значение;
					НовыйБанк.КоррСчет     = РССчет[3].Значение;
					
					НовыйБанк.Записать();
					
					
				Иначе
					
					НовыйСчет.Банк = НовыйБанк.Ссылка;
					
				КонецЕсли;
				
				НовыйСчет.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Лев(НСтр("ru='%1, (Расчетный)'"), 100), РССчет[0].Значение);
				
				НовыйСчет.Записать();
				
				СообщатьОСозданномБанковскомСчете = Истина;
				
			Исключение
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = НСтр("ru='Не удалось создать банковский счет контрагента.'");
				
				Сообщение.Сообщить();
				
			КонецПопытки;
			
		КонецЕсли;
			
		Если СообщатьОСозданномБанковскомСчете Тогда
			
			Сообщение = Новый СообщениеПользователю;
						
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 добавлен банковский счет (%2).'"), ПредставлениеКонтрагента, НомерСчета);
						
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЦикла;
		
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;

КонецФункции

Функция НайтиБанк(НаимБанка, ГородБанка, БИК, КоррСчет)
	
	НайденныйБанк = Справочники.КлассификаторБанков.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(БИК) Тогда
		НайденныйБанк = Справочники.КлассификаторБанков.НайтиПоКоду(БИК);
	КонецЕсли;
	
	Если НайденныйБанк = Справочники.КлассификаторБанков.ПустаяСсылка() Тогда
		НайденныйБанк = Справочники.КлассификаторБанков.НайтиПоРеквизиту("КоррСчет", КоррСчет);
	КонецЕсли;
	
	Возврат НайденныйБанк;

КонецФункции

#КонецОбласти

#Область Универсальные

Процедура УдалитьВременныеФайлы(Путь, Маска = Неопределено)
	
	Попытка
		УдалитьФайлы(Путь, Маска);
	Исключение
		ВидОперации = НСтр("ru = 'Удаление временного файла.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробныйТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьДатуИзСтроки(Приемник, Источник)
	
	Буфер = Источник;
	
	ПозицияТочки = СтрНайти(Буфер, ".");
	
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru='Неверный формат строки с датой'");
	КонецЕсли;
	
	ЧислоДаты = Лев(Буфер, ПозицияТочки - 1);
	Буфер = Сред(Буфер, ПозицияТочки + 1);
	
	ПозицияТочки = СтрНайти(Буфер, ".");
	
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru='Неверный формат строки с датой'");
	КонецЕсли;
	
	МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
	ГодДаты = Сред(Буфер, ПозицияТочки + 1);
	
	Если СтрДлина(ГодДаты) = 2 Тогда
		
		Если Число(ГодДаты) < 50 Тогда
			ГодДаты = "20" + ГодДаты;
		Иначе
			ГодДаты = "19" + ГодДаты ;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
		
	Исключение
		
		Возврат НСтр("ru='Не удалось преобразовать строку в дату'");
		
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции

Функция ЕстьНеЦифры(Знач СтрокаПроверки)

	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Длина = СтрДлина(СтрокаПроверки);
	
	Для Счетчик = 1 По Длина Цикл
		Если СтрНайти("0123456789", Сред(СтрокаПроверки, Счетчик, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция НайтиЭлементДерева(ЭлементыДерева, ИмяКолонки, ИскомоеЗначение)
	
	Для Счетчик = 0 По ЭлементыДерева.Количество() - 1 Цикл
		
		ЭлементДерева = ЭлементыДерева.Получить(Счетчик);
		
		Если ЭлементДерева[ИмяКолонки] = ИскомоеЗначение Тогда
			Возврат ЭлементДерева;
		КонецЕсли;
		
		Если ЭлементДерева.Строки.Количество() > 0 Тогда
			
			РезультатПоиска = НайтиЭлементДерева(ЭлементДерева.Строки, ИмяКолонки, ИскомоеЗначение);
			
			Если НЕ РезультатПоиска = Неопределено Тогда
				Возврат РезультатПоиска;
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура УстановитьСвойство(Объект,
							ИмяСвойства,
							ЗначениеСвойства,
							ЭтоНовыйДокумент,
							ОбязательнаяЗаменаСтарогоЗначения = Ложь)
	
	Если НЕ ЗначениеСвойства = Неопределено
	   И НЕ Объект[ИмяСвойства] = ЗначениеСвойства Тогда
		
	   Если ЭтоНовыйДокумент 
		ИЛИ (НЕ ЗначениеЗаполнено(Объект[ИмяСвойства]) ИЛИ ОбязательнаяЗаменаСтарогоЗначения) 
		ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Булево") 
		ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Дата") Тогда
			
			Объект[ИмяСвойства] = ЗначениеСвойства;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти


#КонецЕсли
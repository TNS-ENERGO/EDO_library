
#Область ОписаниеПеременных

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Перем ОтключитьАвтоЗаполнениеРеквизитов;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ПараметрыКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыКонтактнойИнформации.ИсключаемыеВиды = СтатическиеРеквизитыКонтактнойИнформации();
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ПараметрыКонтактнойИнформации);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьОсновнойБанковскийСчет();
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗагруженАдресныйКлассификатор"
		ИЛИ ИмяСобытия = "Запись_НаборКонстант" 
			И Источник = "ИсточникДанныхАдресногоКлассификатора" Тогда
		
		АдресныйКлассификаторПуст = АдресныйКлассификаторПуст();
		
		Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = АдресныйКлассификаторПуст;
		
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Ссылка = Объект.ОсновнойБанковскийСчет Тогда
		
		ПрочитатьОсновнойБанковскийСчет();
		
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоБанковскогоСчета"
		ИЛИ ИмяСобытия = "УстановкаОсновногоБанковскогоСчетаПриЗаписи"
		И Параметр.Владелец = Объект.Ссылка Тогда
		
		// Если основным назначен другой банковский счет, то разблокируем предыдущий основной.
		Если Объект.ОсновнойБанковскийСчет <> Параметр.ОсновнойБанковскийСчет 
			И БанковскийСчетЗаблокирован Тогда
			РазблокироватьБанковскийСчетПриРедактированииНаСервере(Объект.ОсновнойБанковскийСчет, УникальныйИдентификатор);
			БанковскийСчетЗаблокирован = Ложь;
		КонецЕсли; 
		
		Объект.ОсновнойБанковскийСчет = Параметр.ОсновнойБанковскийСчет;
		
		ПрочитатьОсновнойБанковскийСчет();
		
		Если НЕ Модифицированность Тогда
			Записать();
		КонецЕсли;
		
		УстановитьЗаголовокОсновногоБанковскогоСчета(ЭтотОбъект);
		
		Оповестить("УстановкаОсновногоБанковскогоСчетаВыполнена");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Справочники.БанковскиеСчета.ОбработкаПроверкиЗаполнения(БанковскийСчет, Отказ);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ ИННВведенКорректно(Объект.ИНН) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета) И ЗначениеЗаполнено(БанковскийСчет.Банк)
		И СтрДлина(СокрЛП(БанковскийСчет.НомерСчета)) < 20 Тогда
		ТекстСообщения = НСтр("ru = 'Номер счета должен состоять из 20 цифр'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"БанковскийСчет.НомерСчета",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИзмененБанковскийСчет Тогда
		Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета) И ЗначениеЗаполнено(БанковскийСчет.Банк)Тогда
			
			НайденныйБанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетПоРеквизитам(ТекущийОбъект.Ссылка, 
				БанковскийСчет.Банк, БанковскийСчет.НомерСчета);
				
			Если ЗначениеЗаполнено(ТекущийОбъект.ОсновнойБанковскийСчет) Тогда
				// Снимаем блокировку для прежнего банковского счета перед его заменой новым.
				РазблокироватьДанныеДляРедактирования(ТекущийОбъект.ОсновнойБанковскийСчет, УникальныйИдентификатор);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйБанковскийСчет) Тогда
				ТекущийОбъект.ОсновнойБанковскийСчет = НайденныйБанковскийСчет;
				ОсновнойБанковскийСчетОбъект = НайденныйБанковскийСчет.ПолучитьОбъект();
				ЗначениеВРеквизитФормы(ОсновнойБанковскийСчетОбъект, "БанковскийСчет");
				ИзмененБанковскийСчет = Ложь;
			Иначе
				ТекущийОбъект.ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПолучитьСсылку();
				ОбъектРегистрации = Справочники.БанковскиеСчета.СоздатьЭлемент();
				ОбъектРегистрации.Банк = БанковскийСчет.Банк;
				ОбъектРегистрации.НомерСчета = БанковскийСчет.НомерСчета;
				ЗначениеВРеквизитФормы(ОбъектРегистрации, "БанковскийСчет");
			КонецЕсли;
			
		Иначе
			ТекущийОбъект.ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ИспользоватьНесколькоОрганизацийПередЗаписью", 
		Справочники.Организации.ИспользуетсяНесколькоОрганизаций());
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьОсновнойБанковскийСчет(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ИспользоватьНесколькоОрганизацийПослеЗаписи", 
		Справочники.Организации.ИспользуетсяНесколькоОрганизаций());
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Перем ИспользоватьНесколькоОрганизацийПередЗаписью, ИспользоватьНесколькоОрганизацийПослеЗаписи;
	
	Если ПараметрыЗаписи.Свойство("ИспользоватьНесколькоОрганизацийПередЗаписью", ИспользоватьНесколькоОрганизацийПередЗаписью)
		И ПараметрыЗаписи.Свойство("ИспользоватьНесколькоОрганизацийПослеЗаписи", ИспользоватьНесколькоОрганизацийПослеЗаписи) Тогда
		
		Если ИспользоватьНесколькоОрганизацийПередЗаписью <> ИспользоватьНесколькоОрганизацийПослеЗаписи Тогда
			ОбновитьИнтерфейс();
		ИначеЕсли НЕ ИспользоватьНесколькоОрганизацийПослеЗаписи Тогда
			Оповестить("Запись_ОрганизацииПоУмолчанию",, Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ Объект.НаименованиеПолное = Объект.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	ЮрФизЛицоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКОПФПриИзменении(Элемент)
	
	УстановитьЗаголовокКодовСтатистики(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПОПриИзменении(Элемент)
	
	УстановитьЗаголовокКодовСтатистики(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	ИзмененБанковскийСчет = Истина;
	
	УстановитьЗаголовокОсновногоБанковскогоСчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗаблокироватьБанковскийСчетПриРедактировании() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	
	Если НЕ ЗаблокироватьБанковскийСчетПриРедактировании() Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененБанковскийСчет = Истина;
	
	УстановитьЗаголовокОсновногоБанковскогоСчета(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГР(Команда)
	
	Если НЕ ЗначениеЗаполнено(ПолеПоискаИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Введите ИНН'"));
		ТекущийЭлемент = Элементы.ПолеПоискаИНН;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(ПолеПоискаИНН);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьАдресныйКлассификатор(Команда)
	
	АдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ Объект.НаименованиеПолное = Объект.Наименование;
	
	ЮрФизЛицоПриИзмененииНаСервере();
	
	УстановитьЗаголовокКодовСтатистики(ЭтотОбъект);
	
	УстановитьЗаголовокОсновногоБанковскогоСчета(ЭтотОбъект);
	
	УстановитьЗаголовокКонтактнойИнформации(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	АдресныйКлассификаторПуст = АдресныйКлассификаторПуст();
	Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = АдресныйКлассификаторПуст;
	Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Доступность = НЕ ТолькоПросмотр;
	Элементы.ЗагрузитьАдресныйКлассификатор.Доступность = НЕ ТолькоПросмотр;
	
	УстановитьЗаголовокКонтактнойИнформации(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЮрФизЛицоПриИзмененииНаСервере()
	
	Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		
		Элементы.ИНН.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru='Идентификационный номер налогоплательщика (ИНН) из ""Свидетельства о постановке на учет российской организации в налоговом органе по месту ее нахождения"".
			|Состоит из 10 цифр.'"));
		
		Элементы.ГруппаКПП.Видимость = Истина;
		Элементы.ГруппаСвидетельствоОРегистрацииИП.Видимость = Ложь;
		
		Элементы.ОГРН.Заголовок = НСтр("ru = 'ОГРН'");
		Элементы.ОГРН.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru='Основной государственный регистрационный номер (ОГРН) присваивается при государственной регистрации и указывается в ""Свидетельстве о государственной регистрации юридического лица"".
			|Состоит из 13 цифр.'"));
		
	Иначе
		
		Элементы.ИНН.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru='Идентификационный номер налогоплательщика (ИНН) из ""Свидетельства о постановке на учет физического лица в налоговом органе"".
			|Состоит из 12 цифр.'"));
		
		Элементы.ГруппаКПП.Видимость = Ложь;
		Элементы.ГруппаСвидетельствоОРегистрацииИП.Видимость = Истина;
		
		Элементы.ОГРН.Заголовок = НСтр("ru = 'ОГРНИП'");
		Элементы.ОГРН.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru='Основной государственный регистрационный номер (ОГРНИП) присваивается при государственной регистрации и указывается в ""Свидетельстве о государственной регистрации индивидуального предпринимателя"".
			|Состоит из 15 цифр.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКодовСтатистики(Форма)
	
	Объект = Форма.Объект;
	
	МассивСтрок = Новый Массив;
	
	Если Не ПустаяСтрока(Объект.КодОКОПФ) Тогда
		МассивСтрок.Добавить(НСтр("ru='ОКОПФ'")+ " " + Объект.КодОКОПФ);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Объект.КодПоОКПО) Тогда
		МассивСтрок.Добавить(НСтр("ru='ОКПО'") + " " + Объект.КодПоОКПО);
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Коды статистики'");
	Если МассивСтрок.Количество() Тогда
		ТекстЗаголовка = ТекстЗаголовка + ": " + СтрСоединить(МассивСтрок, ", ");
	КонецЕсли;
	
	Форма.Элементы.ГруппаКодыСтатистики.ЗаголовокСвернутогоОтображения = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокОсновногоБанковскогоСчета(Форма);
	
	БанковскийСчет = Форма.БанковскийСчет;
	
	ТекстЗаголовка = НСтр("ru = 'Основной банковский счет'");
	
	Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета) И ЗначениеЗаполнено(БанковскийСчет.Банк) Тогда
		ТекстЗаголовка = СтрШаблон("%1: %2, %3",
			ТекстЗаголовка, БанковскийСчет.НомерСчета, Строка(БанковскийСчет.Банк));
	КонецЕсли;
	
	Форма.Элементы.ГруппаОсновнойБанковскийСчет.ЗаголовокСвернутогоОтображения =  ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКонтактнойИнформации(Форма)
	
	ТекстЗаголовка = "";
	Для Каждого СтрокаКИ Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		Если СтрокаКИ.ИмяРеквизита <> "КонтактнаяИнформацияПолеЮрАдресОрганизации" 
			И ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
			
			ШаблонСтроки = ?(ПустаяСтрока(ТекстЗаголовка), " %1: %2", ", %1: %2");
			ТекстЗаголовка = ТекстЗаголовка + СтрШаблон(ШаблонСтроки, НРег(СтрокаКИ.Вид), СтрокаКИ.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗаголовка) Тогда
		ТекстЗаголовка = НСтр("ru='Контактная информация'");
	Иначе
		ТекстЗаголовка = НСтр("ru='Контактная информация:'") + ТекстЗаголовка;
	КонецЕсли;
		
	Форма.Элементы.ГруппаКонтактнаяИнформация.ЗаголовокСвернутогоОтображения = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресныйКлассификаторПуст()

	Возврат НЕ АдресныйКлассификатор.АдресныйКлассификаторЗагружен();

КонецФункции

&НаКлиенте
Функция ИННВведенКорректно(ИНН)
	Перем ТекстСообщения;
	
	Результат = Истина;
	
	ЭтоЮрЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	ОчиститьСообщения();
	Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
		Результат = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,"Объект.ИНН",,);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗаблокироватьБанковскийСчетПриРедактировании()
	
	Если НЕ БанковскийСчет.Ссылка.Пустая() И НЕ БанковскийСчетЗаблокирован Тогда
		Если НЕ ЗаблокироватьБанковскийСчетПриРедактированииНаСервере(БанковскийСчет.Ссылка, БанковскийСчет.ВерсияДанных, УникальныйИдентификатор) Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не удается внести изменения в реквизиты основного банковского счета. Возможно данные редактируются другим пользователем.'"));
			ПрочитатьОсновнойБанковскийСчет();
			Возврат Ложь;
		Иначе
			БанковскийСчетЗаблокирован = Истина;
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаблокироватьБанковскийСчетПриРедактированииНаСервере(Ссылка, ВерсияДанных, УникальныйИдентификатор)
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Ссылка, ВерсияДанных, УникальныйИдентификатор);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция РазблокироватьБанковскийСчетПриРедактированииНаСервере(Ссылка, ИдентификаторФормы)

	РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);

КонецФункции

&НаСервере
Процедура ПрочитатьОсновнойБанковскийСчет()
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Справочники.БанковскиеСчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
		ОсновнойБанковскийСчетОбъект = Объект.ОсновнойБанковскийСчет.ПолучитьОбъект();
	ИначеЕсли ПравоДоступа("Добавление", Метаданные.Справочники.БанковскиеСчета) Тогда
		ОсновнойБанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
	Иначе
		ОсновнойБанковскийСчетОбъект = Неопределено;
	КонецЕсли;
	
	Если ОсновнойБанковскийСчетОбъект <> Неопределено Тогда
		ЗначениеВРеквизитФормы(ОсновнойБанковскийСчетОбъект, "БанковскийСчет");
		ИзмененБанковскийСчет = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОсновнойБанковскийСчет(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ОсновнойБанковскийСчет) И ИзмененБанковскийСчет Тогда
		
		ОбъектРегистрации = РеквизитФормыВЗначение("БанковскийСчет");
		
		Если ОбъектРегистрации.Ссылка.Пустая() Тогда
			ОбъектРегистрации.УстановитьСсылкуНового(ТекущийОбъект.ОсновнойБанковскийСчет);
			ОбъектРегистрации.Заполнить(Новый Структура("Владелец", ТекущийОбъект.Ссылка));
		КонецЕсли;
		
		ОбъектРегистрации.СформироватьНаименование();
		ОбъектРегистрации.Записать();
		
		ЗначениеВРеквизитФормы(ОбъектРегистрации, "БанковскийСчет");
		
		ИзмененБанковскийСчет = Ложь;
		
		Если БанковскийСчетЗаблокирован Тогда
			РазблокироватьДанныеДляРедактирования(ТекущийОбъект.ОсновнойБанковскийСчет, УникальныйИдентификатор);
			БанковскийСчетЗаблокирован = Ложь;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтатическиеРеквизитыКонтактнойИнформации()
	
	СтатическиеРеквизиты = Новый Массив();
	
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	Возврат СтатическиеРеквизиты;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПослеИзмененияКонтактнойИнформации(Форма, ИмяРеквизита)
	
	Если ИмяРеквизита <> "КонтактнаяИнформацияПолеЮрАдресОрганизации" Тогда
		УстановитьЗаголовокКонтактнойИнформации(Форма);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	ПослеИзмененияКонтактнойИнформации(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	Если Результат.Свойство("ИмяРеквизита") Тогда
		ПослеИзмененияКонтактнойИнформации(ЭтотОбъект, Результат.ИмяРеквизита);
	КонецЕсли;
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Процедура ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(ИНН)

	Если ПустаяСтрока(ИНН) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтключитьАвтоЗаполнениеРеквизитов <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьАвтоЗаполнениеРеквизитов = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ВключитьАвтоЗаполнениеРеквизитов", 0.1, Истина);
	
	СтрокаИНН = СокрЛП(ИНН);
	
	Если ЗначениеЗаполнено(Объект.Наименование)
		Или ЗначениеЗаполнено(Объект.КПП)
		Или ЗначениеЗаполнено(Объект.ОГРН) Тогда
		
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗаполнитьПоДаннымЕдиныхГосРеестровЗавершение",
			ЭтотОбъект,
			ИНН);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьПоДаннымЕдиныхГосРеестровЗавершение(КодВозвратаДиалога.Да, ИНН);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымЕдиныхГосРеестровЗавершение(Ответ, ИНН) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРеквизитыПоИНННаКлиенте(ИНН);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНННаКлиенте(СтрокаИНН)
	
	Состояние(
		НСтр("ru = 'Получение данных'"),
		,
		НСтр("ru = 'Пожалуйста, подождите...'"));
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(СтрокаИНН, ОписаниеОшибки);
	Состояние();
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		ОбработчикЗавершенияОбработкиОшибки = Новый ОписаниеОповещения(
			"ОбработатьОшибкуЗаполнитьРеквизитыПоИННЗавершение",
			ЭтотОбъект,
			СтрокаИНН);
		ДополнительныеПараметрыОбработкиОшибки =
			РаботаСКонтрагентамиКлиент.НовыйДополнительныеПараметрыОбработкиОшибки();
		ДополнительныеПараметрыОбработкиОшибки.ПредставлениеДействия    = НСтр("ru = 'Автоматическое заполнение реквизитов организации'");
		ДополнительныеПараметрыОбработкиОшибки.ИдентификаторМестаВызова = "OrganizationCard";
		ДополнительныеПараметрыОбработкиОшибки.Форма                    = ЭтотОбъект;
		
		РаботаСКонтрагентамиКлиент.ОбработатьОшибку(
			ОписаниеОшибки,
			ОбработчикЗавершенияОбработкиОшибки,
			ДополнительныеПараметрыОбработкиОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуЗаполнитьРеквизитыПоИННЗавершение(Результат, СтрокаИНН) Экспорт
	
	Если Результат.ПовторитьДействие Тогда
		ЗаполнитьРеквизитыПоИНННаКлиенте(СтрокаИНН);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(Знач СтрокаИНН, ОписаниеОшибки = "")
	
	ЭтоЮридическоеЛицо = Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	Если ЭтоЮридическоеЛицо Тогда
		РеквизитыОрганизации = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(СтрокаИНН);
	Иначе
		РеквизитыОрганизации = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(СтрокаИНН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыОрганизации.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыОрганизации.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыОрганизации);
	Объект.ОГРН = РеквизитыОрганизации.РегистрационныйНомер;
	
	Если ЭтоЮридическоеЛицо Тогда
		ЗаполнитьЭлементКонтактнойИнформации(
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
			РеквизитыОрганизации.ЮридическийАдрес);
	Иначе
		ЗаполнитьЭлементКонтактнойИнформации(
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
			Неопределено);
	КонецЕсли;
	
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ Объект.НаименованиеПолное = Объект.Наименование;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ВидКонтактнойИнформации, СтруктураДанных)
	
	Отбор  = Новый Структура("Вид", ВидКонтактнойИнформации);
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных = Неопределено Или Не ЗначениеЗаполнено(СтруктураДанных.Представление) Тогда
		
		ДанныеСтроки.Представление = "";
		ДанныеСтроки.ЗначенияПолей = Неопределено;
		ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = "";
		
	Иначе
		
		ДанныеСтроки.Представление = СтруктураДанных.Представление;
		ДанныеСтроки.ЗначенияПолей = СтруктураДанных.КонтактнаяИнформация;
		ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
		
	КонецЕсли;
	
	Результат = Новый Структура("ОбновитьКонтекстноеМеню", Истина);
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВключитьАвтоЗаполнениеРеквизитов()

	ОтключитьАвтоЗаполнениеРеквизитов = Неопределено;	

КонецПроцедуры 

// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

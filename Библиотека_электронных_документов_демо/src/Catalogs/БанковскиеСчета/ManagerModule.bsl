#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Вычисляет количество банковских счетов по указанной организации.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - Организация, по которой производится расчет.
// 
// Возвращаемое значение:
//  Число - Количество банковских счетов организации.
//
Функция КоличествоБанковскихСчетовОрганизации(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	Иначе
		Количество = 0;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Устанавливает банковский счет основным для указанного владельца.
//
// Параметры:
//  Владелец		 - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - Владелец банковского счета.
//  БанковскийСчет	 - СправочникСсылка.БанковскиеСчета - Ссылка на банковский счет.
//
Процедура УстановитьОсновнойБанковскийСчет(Владелец, БанковскийСчет) Экспорт
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации")
		И НЕ ПравоДоступа("Изменение", Метаданные.Справочники.Организации) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентОрганизацияОбъект = Владелец.ПолучитьОбъект();
	
	УстановитьОсновнойБанковскийСчет = Истина;
	
	Попытка
		КонтрагентОрганизацияОбъект.Заблокировать();
	Исключение
		// в случае блокировки - не выполнять изменение объекта
		УстановитьОсновнойБанковскийСчет = Ложь;
		// записать предупреждение в журнал регистрации
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось заблокировать объект.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,,
			КонтрагентОрганизацияОбъект, ОписаниеОшибки());
	КонецПопытки;
	
	Если УстановитьОсновнойБанковскийСчет Тогда
		КонтрагентОрганизацияОбъект.ОсновнойБанковскийСчет = БанковскийСчет;
		КонтрагентОрганизацияОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Находит банковский счет по указанным реквизитам.
//
// Параметры:
//  Владелец	 - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - Владелец банковского счета.
//  Банк		 - СправочникСсылка.КлассификаторБанков - Ссылка на банк.
//  НомерСчета	 - Строка - Номер расчетного счета.
// 
// Возвращаемое значение:
//  СправочникСсылка.БанковскиеСчета - Ссылка на найденный банковский счет.
//
Функция БанковскийСчетПоРеквизитам(Владелец, Банк, НомерСчета) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Банк = &Банк
	|	И БанковскиеСчета.НомерСчета = &НомерСчета
	|	И БанковскиеСчета.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Выполняет проверку заполнения банковского счета.
//
// Параметры:
//  БанковскийСчет	 - СправочникОбъект.БанковскиеСчета - Банковский счет, для которого выполняется проверка.
//  Отказ			 - Булево - Признак отказа от выполнения операции.
//
Процедура ОбработкаПроверкиЗаполнения(БанковскийСчет, Отказ) Экспорт
	
	ТекстСообщения = "";
	
	Если Не ЗначениеЗаполнено(БанковскийСчет.Банк)
		И ЗначениеЗаполнено(БанковскийСчет.НомерСчета) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", НСтр("ru = 'Банк'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "БанковскийСчет.Банк", , Отказ);
		
	ИначеЕсли ЗначениеЗаполнено(БанковскийСчет.Банк)
		И Не ЗначениеЗаполнено(БанковскийСчет.НомерСчета) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", НСтр("ru = 'Номер счета'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "БанковскийСчет.НомерСчета", , Отказ);
		
	КонецЕсли;
	
	// Если есть ошибка, то запишем информацию о проблеме с расчетным счетом в журнал регистрации.
	Если Отказ И НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Не удалось записать банковский счет'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.БанковскиеСчета,
			,
			ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру значениями реквизитов банковского счета.
//
// Параметры:
//  Реквизиты		 - Структура - Структура для заполнения данными банковского счета.
//     * БанковскийСчетСсылка - СправочникСсылка.БанковскиеСчета - Ссылка на банковский счет.
//     * БанкСсылка           - СправочникСсылка.КлассификаторБанков - Ссылка на банк.
//     * НомерСчета           - Строка - Номер расчетного счета.
//     * Банк                 - Строка - Наименование банка.
//     * БИК                  - Строка - БИК банка.
//     * АдресБанка           - Строка - Адрес банка.
//     * КоррСчет             - Строка - Корреспондентский счет.
//  БанковскийСчет	 - СправочникСсылка.БанковскиеСчета - Ссылка на банковский счет.
//
Процедура ЗаполнитьРеквизитыБанковскогоСчета(Реквизиты, БанковскийСчет) Экспорт
	
	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК БанковскийСчетСсылка,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.БанкДляРасчетов КАК БанкСсылка,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.Наименование, ЕСТЬNULL(БанковскиеСчета.Банк.Наименование, """")) КАК Банк,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.Код, ЕСТЬNULL(БанковскиеСчета.Банк.Код, """")) КАК БИК,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.Адрес, ЕСТЬNULL(БанковскиеСчета.Банк.Адрес, """")) КАК АдресБанка,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.КоррСчет, ЕСТЬNULL(БанковскиеСчета.Банк.КоррСчет, """")) КАК КоррСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Реквизиты.Вставить("БанковскийСчетСсылка", Выборка.БанковскийСчетСсылка);
		Реквизиты.Вставить("БанкСсылка",           Выборка.БанкСсылка);
		Реквизиты.Вставить("НомерСчета",           Выборка.НомерСчета);
		Реквизиты.Вставить("Банк",                 Выборка.Банк);
		Реквизиты.Вставить("БИК",                  Выборка.БИК);
		Реквизиты.Вставить("АдресБанка",           Выборка.АдресБанка);
		Реквизиты.Вставить("КоррСчет",             Выборка.КоррСчет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли